Parsed test spec with 3 sessions

starting permutation: s3_lock_decompression_locks s2_read_sensor_data s1_decompress s2_read_sensor_data s3_unlock_decompression_before_reindex_lock s2_read_sensor_data s3_unlock_decompression_after_reindex_lock s2_read_sensor_data
compression_status
------------------
Compressed        

step s3_lock_decompression_locks: 
   -- This waitpoint is defined before the decompressed chunk is re-indexed. Up to this 
   -- point parallel SELECTs should be possible. 
   SELECT debug_waitpoint_enable('decompress_chunk_impl_before_reindex');

   -- This waitpoint is defined after all locks for the decompression and the deletion
   -- of the compressed chunk are requested.
   SELECT debug_waitpoint_enable('decompress_chunk_impl_after_reindex');

debug_waitpoint_enable
----------------------
                      

debug_waitpoint_enable
----------------------
                      

step s2_read_sensor_data: 
   SELECT FROM sensor_data;

step s1_decompress: 
   SELECT count(*) FROM (SELECT decompress_chunk(i, if_compressed => true) FROM show_chunks('sensor_data') i) i;
   SELECT compression_status FROM chunk_compression_stats('sensor_data');

count
-----
    1

compression_status
------------------
Uncompressed      

step s2_read_sensor_data: 
   SELECT FROM sensor_data;

step s3_unlock_decompression_before_reindex_lock: 
   -- Ensure that we are waiting on our debug waitpoint
   -- Note: The OIDs of the advisory locks are based on the hash value of the lock name (see debug_point_init())
   --       decompress_chunk_impl_before_reindex = 3966149665.
   SELECT locktype, mode, granted, objid FROM pg_locks WHERE not granted AND locktype = 'advisory' ORDER BY relation, locktype, mode, granted;

   SELECT debug_waitpoint_release('decompress_chunk_impl_before_reindex');

locktype|mode|granted|objid
--------+----+-------+-----

debug_waitpoint_release
-----------------------
                       

step s2_read_sensor_data: 
   SELECT FROM sensor_data;

step s3_unlock_decompression_after_reindex_lock: 
   -- Ensure that we are waiting on our debug waitpoint
   -- Note: The OIDs of the advisory locks are based on the hash value of the lock name (see debug_point_init())
   --       decompress_chunk_impl_after_reindex = 1858017383.
   SELECT locktype, mode, granted, objid FROM pg_locks WHERE not granted AND locktype = 'advisory' ORDER BY relation, locktype, mode, granted;

   SELECT debug_waitpoint_release('decompress_chunk_impl_after_reindex');

locktype|mode|granted|objid
--------+----+-------+-----

debug_waitpoint_release
-----------------------
                       

step s2_read_sensor_data: 
   SELECT FROM sensor_data;

