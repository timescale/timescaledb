Parsed test spec with 11 sessions

starting permutation: R1_refresh S1_select R3_refresh S1_select L2_read_unlock_threshold_table L3_unlock_cagg_table L1_unlock_threshold_table
step R1_refresh: 
    CALL refresh_continuous_aggregate('cond_10', 25, 70);

step S1_select: 
    SELECT bucket, avg_temp
    FROM cond_10
    ORDER BY 1;

    SELECT * FROM cagg_bucket_count('cond_10');
    SELECT h.table_name AS hypertable, it.watermark AS threshold
    FROM _timescaledb_catalog.continuous_aggs_invalidation_threshold it,
    _timescaledb_catalog.hypertable h
    WHERE it.hypertable_id = h.id
    ORDER BY 1;

bucket|        avg_temp
------+----------------
     0|15.8888888888889
    10|            14.2
    20|            13.4
    30|            18.3
    40|16.0909090909091
    50|            26.9
    60|            18.9
(7 rows)

cagg_bucket_count
-----------------
                7
(1 row)

hypertable |  threshold
-----------+-----------
conditions |         70
conditions2|-2147483648
(2 rows)

step R3_refresh: 
    CALL refresh_continuous_aggregate('cond_10', 70, 107);

step S1_select: 
    SELECT bucket, avg_temp
    FROM cond_10
    ORDER BY 1;

    SELECT * FROM cagg_bucket_count('cond_10');
    SELECT h.table_name AS hypertable, it.watermark AS threshold
    FROM _timescaledb_catalog.continuous_aggs_invalidation_threshold it,
    _timescaledb_catalog.hypertable h
    WHERE it.hypertable_id = h.id
    ORDER BY 1;

bucket|        avg_temp
------+----------------
     0|15.8888888888889
    10|            14.2
    20|            13.4
    30|            18.3
    40|16.0909090909091
    50|            26.9
    60|            18.9
    70|            24.6
    80|            23.6
    90|            21.3
(10 rows)

cagg_bucket_count
-----------------
               10
(1 row)

hypertable |  threshold
-----------+-----------
conditions |        100
conditions2|-2147483648
(2 rows)

step L2_read_unlock_threshold_table: 
    ROLLBACK;

step L3_unlock_cagg_table: 
    ROLLBACK;

step L1_unlock_threshold_table: 
    ROLLBACK;


starting permutation: L2_read_lock_threshold_table R3_refresh L2_read_unlock_threshold_table S1_select L3_unlock_cagg_table L1_unlock_threshold_table
R5: LOG:  statement: 
    SET SESSION lock_timeout = '500ms';
    SET SESSION deadlock_timeout = '500ms';
    SET SESSION client_min_messages = 'DEBUG1';

step L2_read_lock_threshold_table: 
    LOCK _timescaledb_catalog.continuous_aggs_invalidation_threshold
    IN ACCESS SHARE MODE;

step R3_refresh: 
    CALL refresh_continuous_aggregate('cond_10', 70, 107);

step L2_read_unlock_threshold_table: 
    ROLLBACK;

step S1_select: 
    SELECT bucket, avg_temp
    FROM cond_10
    ORDER BY 1;

    SELECT * FROM cagg_bucket_count('cond_10');
    SELECT h.table_name AS hypertable, it.watermark AS threshold
    FROM _timescaledb_catalog.continuous_aggs_invalidation_threshold it,
    _timescaledb_catalog.hypertable h
    WHERE it.hypertable_id = h.id
    ORDER BY 1;

bucket|        avg_temp
------+----------------
     0|15.8888888888889
    10|            14.2
    20|            13.4
    70|            24.6
    80|            23.6
    90|            21.3
(6 rows)

cagg_bucket_count
-----------------
                6
(1 row)

hypertable |  threshold
-----------+-----------
conditions |        100
conditions2|-2147483648
(2 rows)

step L3_unlock_cagg_table: 
    ROLLBACK;

step L1_unlock_threshold_table: 
    ROLLBACK;


starting permutation: R1_refresh L2_read_lock_threshold_table R3_refresh L2_read_unlock_threshold_table S1_select L3_unlock_cagg_table L1_unlock_threshold_table
R5: LOG:  statement: 
    SET SESSION lock_timeout = '500ms';
    SET SESSION deadlock_timeout = '500ms';
    SET SESSION client_min_messages = 'DEBUG1';

step R1_refresh: 
    CALL refresh_continuous_aggregate('cond_10', 25, 70);

step L2_read_lock_threshold_table: 
    LOCK _timescaledb_catalog.continuous_aggs_invalidation_threshold
    IN ACCESS SHARE MODE;

step R3_refresh: 
    CALL refresh_continuous_aggregate('cond_10', 70, 107);

step L2_read_unlock_threshold_table: 
    ROLLBACK;

step S1_select: 
    SELECT bucket, avg_temp
    FROM cond_10
    ORDER BY 1;

    SELECT * FROM cagg_bucket_count('cond_10');
    SELECT h.table_name AS hypertable, it.watermark AS threshold
    FROM _timescaledb_catalog.continuous_aggs_invalidation_threshold it,
    _timescaledb_catalog.hypertable h
    WHERE it.hypertable_id = h.id
    ORDER BY 1;

bucket|        avg_temp
------+----------------
     0|15.8888888888889
    10|            14.2
    20|            13.4
    30|            18.3
    40|16.0909090909091
    50|            26.9
    60|            18.9
    70|            24.6
    80|            23.6
    90|            21.3
(10 rows)

cagg_bucket_count
-----------------
               10
(1 row)

hypertable |  threshold
-----------+-----------
conditions |        100
conditions2|-2147483648
(2 rows)

step L3_unlock_cagg_table: 
    ROLLBACK;

step L1_unlock_threshold_table: 
    ROLLBACK;


starting permutation: R3_refresh L2_read_lock_threshold_table R1_refresh L2_read_unlock_threshold_table S1_select L3_unlock_cagg_table L1_unlock_threshold_table
R5: LOG:  statement: 
    SET SESSION lock_timeout = '500ms';
    SET SESSION deadlock_timeout = '500ms';
    SET SESSION client_min_messages = 'DEBUG1';

step R3_refresh: 
    CALL refresh_continuous_aggregate('cond_10', 70, 107);

step L2_read_lock_threshold_table: 
    LOCK _timescaledb_catalog.continuous_aggs_invalidation_threshold
    IN ACCESS SHARE MODE;

step R1_refresh: 
    CALL refresh_continuous_aggregate('cond_10', 25, 70);

step L2_read_unlock_threshold_table: 
    ROLLBACK;

step S1_select: 
    SELECT bucket, avg_temp
    FROM cond_10
    ORDER BY 1;

    SELECT * FROM cagg_bucket_count('cond_10');
    SELECT h.table_name AS hypertable, it.watermark AS threshold
    FROM _timescaledb_catalog.continuous_aggs_invalidation_threshold it,
    _timescaledb_catalog.hypertable h
    WHERE it.hypertable_id = h.id
    ORDER BY 1;

bucket|        avg_temp
------+----------------
     0|15.8888888888889
    10|            14.2
    20|            13.4
    30|            18.3
    40|16.0909090909091
    50|            26.9
    60|            18.9
    70|            24.6
    80|            23.6
    90|            21.3
(10 rows)

cagg_bucket_count
-----------------
               10
(1 row)

hypertable |  threshold
-----------+-----------
conditions |        100
conditions2|-2147483648
(2 rows)

step L3_unlock_cagg_table: 
    ROLLBACK;

step L1_unlock_threshold_table: 
    ROLLBACK;


starting permutation: L3_lock_cagg_table R1_refresh L3_unlock_cagg_table S1_select L1_unlock_threshold_table L2_read_unlock_threshold_table
R5: LOG:  statement: 
    SET SESSION lock_timeout = '500ms';
    SET SESSION deadlock_timeout = '500ms';
    SET SESSION client_min_messages = 'DEBUG1';

step L3_lock_cagg_table: 
    SELECT lock_cagg('cond_10');

lock_cagg
---------
         
(1 row)

step R1_refresh: 
    CALL refresh_continuous_aggregate('cond_10', 25, 70);

step L3_unlock_cagg_table: 
    ROLLBACK;

step S1_select: 
    SELECT bucket, avg_temp
    FROM cond_10
    ORDER BY 1;

    SELECT * FROM cagg_bucket_count('cond_10');
    SELECT h.table_name AS hypertable, it.watermark AS threshold
    FROM _timescaledb_catalog.continuous_aggs_invalidation_threshold it,
    _timescaledb_catalog.hypertable h
    WHERE it.hypertable_id = h.id
    ORDER BY 1;

bucket|        avg_temp
------+----------------
     0|15.8888888888889
    10|            14.2
    20|            13.4
    30|            18.3
    40|16.0909090909091
    50|            26.9
    60|            18.9
(7 rows)

cagg_bucket_count
-----------------
                7
(1 row)

hypertable |  threshold
-----------+-----------
conditions |         70
conditions2|-2147483648
(2 rows)

step L1_unlock_threshold_table: 
    ROLLBACK;

step L2_read_unlock_threshold_table: 
    ROLLBACK;


starting permutation: L3_lock_cagg_table R1_refresh R2_refresh L3_unlock_cagg_table S1_select L1_unlock_threshold_table L2_read_unlock_threshold_table
R5: LOG:  statement: 
    SET SESSION lock_timeout = '500ms';
    SET SESSION deadlock_timeout = '500ms';
    SET SESSION client_min_messages = 'DEBUG1';

step L3_lock_cagg_table: 
    SELECT lock_cagg('cond_10');

lock_cagg
---------
         
(1 row)

step R1_refresh: 
    CALL refresh_continuous_aggregate('cond_10', 25, 70);

R2: NOTICE:  continuous aggregate "cond_10" is already up-to-date
step R2_refresh: 
    CALL refresh_continuous_aggregate('cond_10', 35, 62);

step L3_unlock_cagg_table: 
    ROLLBACK;

step S1_select: 
    SELECT bucket, avg_temp
    FROM cond_10
    ORDER BY 1;

    SELECT * FROM cagg_bucket_count('cond_10');
    SELECT h.table_name AS hypertable, it.watermark AS threshold
    FROM _timescaledb_catalog.continuous_aggs_invalidation_threshold it,
    _timescaledb_catalog.hypertable h
    WHERE it.hypertable_id = h.id
    ORDER BY 1;

bucket|        avg_temp
------+----------------
     0|15.8888888888889
    10|            14.2
    20|            13.4
    30|            18.3
    40|16.0909090909091
    50|            26.9
    60|            18.9
(7 rows)

cagg_bucket_count
-----------------
                7
(1 row)

hypertable |  threshold
-----------+-----------
conditions |         70
conditions2|-2147483648
(2 rows)

step L1_unlock_threshold_table: 
    ROLLBACK;

step L2_read_unlock_threshold_table: 
    ROLLBACK;


starting permutation: L3_lock_cagg_table R1_refresh R3_refresh L3_unlock_cagg_table S1_select L1_unlock_threshold_table L2_read_unlock_threshold_table
R5: LOG:  statement: 
    SET SESSION lock_timeout = '500ms';
    SET SESSION deadlock_timeout = '500ms';
    SET SESSION client_min_messages = 'DEBUG1';

step L3_lock_cagg_table: 
    SELECT lock_cagg('cond_10');

lock_cagg
---------
         
(1 row)

step R1_refresh: 
    CALL refresh_continuous_aggregate('cond_10', 25, 70);

step R3_refresh: 
    CALL refresh_continuous_aggregate('cond_10', 70, 107);

step L3_unlock_cagg_table: 
    ROLLBACK;

step S1_select: 
    SELECT bucket, avg_temp
    FROM cond_10
    ORDER BY 1;

    SELECT * FROM cagg_bucket_count('cond_10');
    SELECT h.table_name AS hypertable, it.watermark AS threshold
    FROM _timescaledb_catalog.continuous_aggs_invalidation_threshold it,
    _timescaledb_catalog.hypertable h
    WHERE it.hypertable_id = h.id
    ORDER BY 1;

bucket|        avg_temp
------+----------------
     0|15.8888888888889
    10|            14.2
    20|            13.4
    30|            18.3
    40|16.0909090909091
    50|            26.9
    60|            18.9
    70|            24.6
    80|            23.6
    90|            21.3
(10 rows)

cagg_bucket_count
-----------------
               10
(1 row)

hypertable |  threshold
-----------+-----------
conditions |        100
conditions2|-2147483648
(2 rows)

step L1_unlock_threshold_table: 
    ROLLBACK;

step L2_read_unlock_threshold_table: 
    ROLLBACK;


starting permutation: L3_lock_cagg_table R3_refresh R4_refresh L3_unlock_cagg_table S1_select L1_unlock_threshold_table L2_read_unlock_threshold_table
R5: LOG:  statement: 
    SET SESSION lock_timeout = '500ms';
    SET SESSION deadlock_timeout = '500ms';
    SET SESSION client_min_messages = 'DEBUG1';

step L3_lock_cagg_table: 
    SELECT lock_cagg('cond_10');

lock_cagg
---------
         
(1 row)

step R3_refresh: 
    CALL refresh_continuous_aggregate('cond_10', 70, 107);

step R4_refresh: 
    CALL refresh_continuous_aggregate('cond_20', 39, 84);

step L3_unlock_cagg_table: 
    ROLLBACK;

step S1_select: 
    SELECT bucket, avg_temp
    FROM cond_10
    ORDER BY 1;

    SELECT * FROM cagg_bucket_count('cond_10');
    SELECT h.table_name AS hypertable, it.watermark AS threshold
    FROM _timescaledb_catalog.continuous_aggs_invalidation_threshold it,
    _timescaledb_catalog.hypertable h
    WHERE it.hypertable_id = h.id
    ORDER BY 1;

bucket|        avg_temp
------+----------------
     0|15.8888888888889
    10|            14.2
    20|            13.4
    70|            24.6
    80|            23.6
    90|            21.3
(6 rows)

cagg_bucket_count
-----------------
                6
(1 row)

hypertable |  threshold
-----------+-----------
conditions |        100
conditions2|-2147483648
(2 rows)

step L1_unlock_threshold_table: 
    ROLLBACK;

step L2_read_unlock_threshold_table: 
    ROLLBACK;


starting permutation: R1_refresh R12_refresh
R5: LOG:  statement: 
    SET SESSION lock_timeout = '500ms';
    SET SESSION deadlock_timeout = '500ms';
    SET SESSION client_min_messages = 'DEBUG1';

step R1_refresh: 
    CALL refresh_continuous_aggregate('cond_10', 25, 70);

step R12_refresh: 
    CALL refresh_continuous_aggregate('cond2_10', 25, 70);


starting permutation: WP_enable R1_refresh R5_refresh WP_release S1_select R3_refresh S1_select
R5: LOG:  statement: 
    SET SESSION lock_timeout = '500ms';
    SET SESSION deadlock_timeout = '500ms';
    SET SESSION client_min_messages = 'DEBUG1';

L1: WARNING:  there is already a transaction in progress
L2: WARNING:  there is already a transaction in progress
L3: WARNING:  there is already a transaction in progress
step WP_enable: 
    SELECT debug_waitpoint_enable('clear_cagg_invalidations_for_refresh_lock');

debug_waitpoint_enable
----------------------
                      
(1 row)

step R1_refresh: 
    CALL refresh_continuous_aggregate('cond_10', 25, 70);
 <waiting ...>
R5: LOG:  statement: 
    CALL refresh_continuous_aggregate('cond_10', 70, 107);

step R5_refresh: 
    CALL refresh_continuous_aggregate('cond_10', 70, 107);
 <waiting ...>
step WP_release: 
    SELECT debug_waitpoint_release('clear_cagg_invalidations_for_refresh_lock');

debug_waitpoint_release
-----------------------
                       
(1 row)

step R1_refresh: <... completed>
R5: DEBUG:  cannot lock "cond_10" materialization invalidation log [ 0, -1 ], skipping
R5: DEBUG:  cannot lock "cond_10" materialization invalidation log [ 0, 49 ], skipping
R5: DEBUG:  cannot lock "cond_10" materialization invalidation log [ 30, -1 ], skipping
R5: NOTICE:  continuous aggregate "cond_10" is already up-to-date
step R5_refresh: <... completed>
step S1_select: 
    SELECT bucket, avg_temp
    FROM cond_10
    ORDER BY 1;

    SELECT * FROM cagg_bucket_count('cond_10');
    SELECT h.table_name AS hypertable, it.watermark AS threshold
    FROM _timescaledb_catalog.continuous_aggs_invalidation_threshold it,
    _timescaledb_catalog.hypertable h
    WHERE it.hypertable_id = h.id
    ORDER BY 1;

bucket|        avg_temp
------+----------------
     0|15.8888888888889
    10|            14.2
    20|            13.4
    30|            18.3
    40|16.0909090909091
    50|            26.9
    60|            18.9
(7 rows)

cagg_bucket_count
-----------------
                7
(1 row)

hypertable |  threshold
-----------+-----------
conditions |        100
conditions2|-2147483648
(2 rows)

step R3_refresh: 
    CALL refresh_continuous_aggregate('cond_10', 70, 107);

step S1_select: 
    SELECT bucket, avg_temp
    FROM cond_10
    ORDER BY 1;

    SELECT * FROM cagg_bucket_count('cond_10');
    SELECT h.table_name AS hypertable, it.watermark AS threshold
    FROM _timescaledb_catalog.continuous_aggs_invalidation_threshold it,
    _timescaledb_catalog.hypertable h
    WHERE it.hypertable_id = h.id
    ORDER BY 1;

bucket|        avg_temp
------+----------------
     0|15.8888888888889
    10|            14.2
    20|            13.4
    30|            18.3
    40|16.0909090909091
    50|            26.9
    60|            18.9
    70|            24.6
    80|            23.6
    90|            21.3
(10 rows)

cagg_bucket_count
-----------------
               10
(1 row)

hypertable |  threshold
-----------+-----------
conditions |        100
conditions2|-2147483648
(2 rows)

