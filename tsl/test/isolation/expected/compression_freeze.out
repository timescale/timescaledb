Parsed test spec with 2 sessions

starting permutation: s1_select_count s2_select_count_and_stats
step s1_select_count: 
   SELECT count(*) FROM sensor_data;

count
-----
16850
(1 row)

step s2_select_count_and_stats: 
   SELECT count(*) FROM sensor_data;
   SELECT compression_status, count(*) FROM chunk_compression_stats('sensor_data') GROUP BY 1 ORDER BY 1, 2;

count
-----
16850
(1 row)

compression_status|count
------------------+-----
Uncompressed      |    2
(1 row)


starting permutation: s1_select_count s1_compress s1_select_count s2_select_count_and_stats
step s1_select_count: 
   SELECT count(*) FROM sensor_data;

count
-----
16850
(1 row)

step s1_compress: 
   SELECT count(*) FROM (SELECT compress_chunk(i, if_not_compressed => true) FROM show_chunks('sensor_data') i) i;

count
-----
    2
(1 row)

step s1_select_count: 
   SELECT count(*) FROM sensor_data;

count
-----
16850
(1 row)

step s2_select_count_and_stats: 
   SELECT count(*) FROM sensor_data;
   SELECT compression_status, count(*) FROM chunk_compression_stats('sensor_data') GROUP BY 1 ORDER BY 1, 2;

count
-----
16850
(1 row)

compression_status|count
------------------+-----
Compressed        |    2
(1 row)


starting permutation: s2_lock_compression s2_select_count_and_stats s1_compress s2_select_count_and_stats s2_unlock_compression s2_select_count_and_stats
step s2_lock_compression: 
    SELECT debug_waitpoint_enable('compression_done_before_truncate_uncompressed');

debug_waitpoint_enable
----------------------
                      
(1 row)

step s2_select_count_and_stats: 
   SELECT count(*) FROM sensor_data;
   SELECT compression_status, count(*) FROM chunk_compression_stats('sensor_data') GROUP BY 1 ORDER BY 1, 2;

count
-----
16850
(1 row)

compression_status|count
------------------+-----
Uncompressed      |    2
(1 row)

step s1_compress: 
   SELECT count(*) FROM (SELECT compress_chunk(i, if_not_compressed => true) FROM show_chunks('sensor_data') i) i;
 <waiting ...>
step s2_select_count_and_stats: 
   SELECT count(*) FROM sensor_data;
   SELECT compression_status, count(*) FROM chunk_compression_stats('sensor_data') GROUP BY 1 ORDER BY 1, 2;

count
-----
16850
(1 row)

compression_status|count
------------------+-----
Uncompressed      |    2
(1 row)

step s2_unlock_compression: 
    SELECT locktype, mode, granted, objid FROM pg_locks WHERE not granted AND (locktype = 'advisory' or relation::regclass::text LIKE '%chunk') ORDER BY relation, locktype, mode, granted;
    SELECT debug_waitpoint_release('compression_done_before_truncate_uncompressed');

locktype|mode     |granted|    objid
--------+---------+-------+---------
advisory|ShareLock|f      |113732026
(1 row)

debug_waitpoint_release
-----------------------
                       
(1 row)

step s1_compress: <... completed>
count
-----
    2
(1 row)

step s2_select_count_and_stats: 
   SELECT count(*) FROM sensor_data;
   SELECT compression_status, count(*) FROM chunk_compression_stats('sensor_data') GROUP BY 1 ORDER BY 1, 2;

count
-----
16850
(1 row)

compression_status|count
------------------+-----
Compressed        |    2
(1 row)


starting permutation: s2_lock_compression_after_truncate s2_select_count_and_stats s1_compress s2_unlock_compression_after_truncate s2_select_count_and_stats
step s2_lock_compression_after_truncate: 
    SELECT debug_waitpoint_enable('compression_done_after_truncate_uncompressed');

debug_waitpoint_enable
----------------------
                      
(1 row)

step s2_select_count_and_stats: 
   SELECT count(*) FROM sensor_data;
   SELECT compression_status, count(*) FROM chunk_compression_stats('sensor_data') GROUP BY 1 ORDER BY 1, 2;

count
-----
16850
(1 row)

compression_status|count
------------------+-----
Uncompressed      |    2
(1 row)

step s1_compress: 
   SELECT count(*) FROM (SELECT compress_chunk(i, if_not_compressed => true) FROM show_chunks('sensor_data') i) i;
 <waiting ...>
step s2_unlock_compression_after_truncate: 
    SELECT locktype, mode, granted, objid FROM pg_locks WHERE granted AND relation::regclass::text LIKE '%hyper%chunk' ORDER BY relation, locktype, mode, granted;
    SELECT debug_waitpoint_release('compression_done_after_truncate_uncompressed');

locktype|mode               |granted|objid
--------+-------------------+-------+-----
relation|AccessExclusiveLock|t      |     
relation|ExclusiveLock      |t      |     
relation|ShareLock          |t      |     
(3 rows)

debug_waitpoint_release
-----------------------
                       
(1 row)

step s1_compress: <... completed>
count
-----
    2
(1 row)

step s2_select_count_and_stats: 
   SELECT count(*) FROM sensor_data;
   SELECT compression_status, count(*) FROM chunk_compression_stats('sensor_data') GROUP BY 1 ORDER BY 1, 2;

count
-----
16850
(1 row)

compression_status|count
------------------+-----
Compressed        |    2
(1 row)


starting permutation: s2_lock_compression_after_delete s2_select_count_and_stats s1_compress_delete s2_select_count_and_stats s2_unlock_compression_after_delete s2_select_count_and_stats
step s2_lock_compression_after_delete: 
    SELECT debug_waitpoint_enable('compression_done_after_delete_uncompressed');

debug_waitpoint_enable
----------------------
                      
(1 row)

step s2_select_count_and_stats: 
   SELECT count(*) FROM sensor_data;
   SELECT compression_status, count(*) FROM chunk_compression_stats('sensor_data') GROUP BY 1 ORDER BY 1, 2;

count
-----
16850
(1 row)

compression_status|count
------------------+-----
Uncompressed      |    2
(1 row)

step s1_compress_delete: 
   SET timescaledb.enable_delete_after_compression TO on;
   SELECT count(*) FROM (SELECT compress_chunk(i, if_not_compressed => true) FROM show_chunks('sensor_data') i) i;
 <waiting ...>
step s2_select_count_and_stats: 
   SELECT count(*) FROM sensor_data;
   SELECT compression_status, count(*) FROM chunk_compression_stats('sensor_data') GROUP BY 1 ORDER BY 1, 2;

count
-----
16850
(1 row)

compression_status|count
------------------+-----
Uncompressed      |    2
(1 row)

step s2_unlock_compression_after_delete: 
    SELECT locktype, mode, granted, objid FROM pg_locks WHERE granted AND relation::regclass::text LIKE '%hyper%chunk' ORDER BY relation, locktype, mode, granted;
    SELECT debug_waitpoint_release('compression_done_after_delete_uncompressed');

locktype|mode            |granted|objid
--------+----------------+-------+-----
relation|ExclusiveLock   |t      |     
relation|RowExclusiveLock|t      |     
(2 rows)

debug_waitpoint_release
-----------------------
                       
(1 row)

step s1_compress_delete: <... completed>
count
-----
    2
(1 row)

step s2_select_count_and_stats: 
   SELECT count(*) FROM sensor_data;
   SELECT compression_status, count(*) FROM chunk_compression_stats('sensor_data') GROUP BY 1 ORDER BY 1, 2;

count
-----
16850
(1 row)

compression_status|count
------------------+-----
Compressed        |    2
(1 row)

