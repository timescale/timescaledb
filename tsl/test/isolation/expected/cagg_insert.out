Parsed test spec with 17 sessions

starting permutation: LockInvalThrEx Refresh Refresh2 Refresh3 UnlockInvalThrEx
step LockInvalThrEx: BEGIN; LOCK TABLE _timescaledb_catalog.continuous_aggs_invalidation_threshold ;
step Refresh: CALL refresh_continuous_aggregate('continuous_view_1', NULL, 15); <waiting ...>
step Refresh2: CALL refresh_continuous_aggregate('continuous_view_1', NULL, 15); <waiting ...>
step Refresh3: CALL refresh_continuous_aggregate('continuous_view_2', NULL, 15); <waiting ...>
step UnlockInvalThrEx: ROLLBACK;
step Refresh: <... completed>
step Refresh2: <... completed>
step Refresh3: <... completed>

starting permutation: Ib LockCagg1 I1 Refresh Ic UnLockCagg1
step Ib: BEGIN; SET LOCAL lock_timeout = '500ms'; SET LOCAL deadlock_timeout = '10ms';
step LockCagg1: BEGIN; SELECT lock_cagg('continuous_view_1');
lock_cagg
---------
         

step I1: INSERT INTO ts_continuous_test_1 VALUES (1, 1);
step Refresh: CALL refresh_continuous_aggregate('continuous_view_1', NULL, 15); <waiting ...>
step Ic: COMMIT;
step UnLockCagg1: ROLLBACK;
step Refresh: <... completed>

starting permutation: Ib LockCagg1 Refresh I1 Ic UnLockCagg1
step Ib: BEGIN; SET LOCAL lock_timeout = '500ms'; SET LOCAL deadlock_timeout = '10ms';
step LockCagg1: BEGIN; SELECT lock_cagg('continuous_view_1');
lock_cagg
---------
         

step Refresh: CALL refresh_continuous_aggregate('continuous_view_1', NULL, 15); <waiting ...>
step I1: INSERT INTO ts_continuous_test_1 VALUES (1, 1);
step Ic: COMMIT;
step UnLockCagg1: ROLLBACK;
step Refresh: <... completed>

starting permutation: I2b LockCagg2 I21 Refresh Refresh3 I2c UnLockCagg2
step I2b: BEGIN; SET LOCAL lock_timeout = '500ms'; SET LOCAL deadlock_timeout = '10ms';
step LockCagg2: BEGIN; SELECT lock_cagg('continuous_view_2');
lock_cagg
---------
         

step I21: INSERT INTO ts_continuous_test_2 VALUES (1, 1);
step Refresh: CALL refresh_continuous_aggregate('continuous_view_1', NULL, 15);
step Refresh3: CALL refresh_continuous_aggregate('continuous_view_2', NULL, 15); <waiting ...>
step I2c: COMMIT;
step UnLockCagg2: ROLLBACK;
step Refresh3: <... completed>

starting permutation: I2b LockCagg2 Refresh3 Refresh I21 I2c UnLockCagg2
step I2b: BEGIN; SET LOCAL lock_timeout = '500ms'; SET LOCAL deadlock_timeout = '10ms';
step LockCagg2: BEGIN; SELECT lock_cagg('continuous_view_2');
lock_cagg
---------
         

step Refresh3: CALL refresh_continuous_aggregate('continuous_view_2', NULL, 15); <waiting ...>
step Refresh: CALL refresh_continuous_aggregate('continuous_view_1', NULL, 15); <waiting ...>
step I21: INSERT INTO ts_continuous_test_2 VALUES (1, 1);
step I2c: COMMIT;
step UnLockCagg2: ROLLBACK;
step Refresh3: <... completed>
step Refresh: <... completed>

starting permutation: Sb LockCagg1 Refresh S1 Sc UnLockCagg1
step Sb: BEGIN; SET LOCAL lock_timeout = '500ms'; SET LOCAL deadlock_timeout = '10ms';
step LockCagg1: BEGIN; SELECT lock_cagg('continuous_view_1');
lock_cagg
---------
         

step Refresh: CALL refresh_continuous_aggregate('continuous_view_1', NULL, 15); <waiting ...>
step S1: SELECT count(*) FROM ts_continuous_test_1;
count
-----
   30

step Sc: COMMIT;
step UnLockCagg1: ROLLBACK;
step Refresh: <... completed>

starting permutation: Sb LockCagg1 S1 Refresh Sc UnLockCagg1
step Sb: BEGIN; SET LOCAL lock_timeout = '500ms'; SET LOCAL deadlock_timeout = '10ms';
step LockCagg1: BEGIN; SELECT lock_cagg('continuous_view_1');
lock_cagg
---------
         

step S1: SELECT count(*) FROM ts_continuous_test_1;
count
-----
   30

step Refresh: CALL refresh_continuous_aggregate('continuous_view_1', NULL, 15); <waiting ...>
step Sc: COMMIT;
step UnLockCagg1: ROLLBACK;
step Refresh: <... completed>

starting permutation: Ib LockInvalThr Refresh I1 Ic UnlockInvalThr
step Ib: BEGIN; SET LOCAL lock_timeout = '500ms'; SET LOCAL deadlock_timeout = '10ms';
step LockInvalThr: BEGIN; LOCK TABLE _timescaledb_catalog.continuous_aggs_invalidation_threshold IN SHARE MODE;
step Refresh: CALL refresh_continuous_aggregate('continuous_view_1', NULL, 15); <waiting ...>
step I1: INSERT INTO ts_continuous_test_1 VALUES (1, 1);
step Ic: COMMIT;
step UnlockInvalThr: ROLLBACK;
step Refresh: <... completed>

starting permutation: Ib LockInvalThr I1 Refresh Ic UnlockInvalThr
step Ib: BEGIN; SET LOCAL lock_timeout = '500ms'; SET LOCAL deadlock_timeout = '10ms';
step LockInvalThr: BEGIN; LOCK TABLE _timescaledb_catalog.continuous_aggs_invalidation_threshold IN SHARE MODE;
step I1: INSERT INTO ts_continuous_test_1 VALUES (1, 1);
step Refresh: CALL refresh_continuous_aggregate('continuous_view_1', NULL, 15); <waiting ...>
step Ic: COMMIT;
step UnlockInvalThr: ROLLBACK;
step Refresh: <... completed>

starting permutation: Ib LockInval I1 Ic Refresh UnlockInval
step Ib: BEGIN; SET LOCAL lock_timeout = '500ms'; SET LOCAL deadlock_timeout = '10ms';
step LockInval: BEGIN; LOCK TABLE _timescaledb_catalog.continuous_aggs_hypertable_invalidation_log;
step I1: INSERT INTO ts_continuous_test_1 VALUES (1, 1);
step Ic: COMMIT;
step Refresh: CALL refresh_continuous_aggregate('continuous_view_1', NULL, 15); <waiting ...>
step UnlockInval: ROLLBACK;
step Refresh: <... completed>

starting permutation: Ipb LockInval Refresh Ip1 Ipc UnlockInval
step Ipb: BEGIN; SET LOCAL lock_timeout = '500ms'; SET LOCAL deadlock_timeout = '10ms';
step LockInval: BEGIN; LOCK TABLE _timescaledb_catalog.continuous_aggs_hypertable_invalidation_log;
step Refresh: CALL refresh_continuous_aggregate('continuous_view_1', NULL, 15); <waiting ...>
step Ip1: INSERT INTO ts_continuous_test_1 VALUES (29, 29);
step Ipc: COMMIT;
step UnlockInval: ROLLBACK;
step Refresh: <... completed>

starting permutation: Ipb LockInval Ip1 Refresh Ipc UnlockInval
step Ipb: BEGIN; SET LOCAL lock_timeout = '500ms'; SET LOCAL deadlock_timeout = '10ms';
step LockInval: BEGIN; LOCK TABLE _timescaledb_catalog.continuous_aggs_hypertable_invalidation_log;
step Ip1: INSERT INTO ts_continuous_test_1 VALUES (29, 29);
step Refresh: CALL refresh_continuous_aggregate('continuous_view_1', NULL, 15); <waiting ...>
step Ipc: COMMIT;
step UnlockInval: ROLLBACK;
step Refresh: <... completed>

starting permutation: Ipb LockInval Ip1 Ipc Refresh UnlockInval
step Ipb: BEGIN; SET LOCAL lock_timeout = '500ms'; SET LOCAL deadlock_timeout = '10ms';
step LockInval: BEGIN; LOCK TABLE _timescaledb_catalog.continuous_aggs_hypertable_invalidation_log;
step Ip1: INSERT INTO ts_continuous_test_1 VALUES (29, 29);
step Ipc: COMMIT;
step Refresh: CALL refresh_continuous_aggregate('continuous_view_1', NULL, 15); <waiting ...>
step UnlockInval: ROLLBACK;
step Refresh: <... completed>

starting permutation: Refresh SV1 LockMatInval Refresh1 Ib I1 LockInvalThrEx Ic UnlockMatInval UnlockInvalThrEx SV1
step Refresh: CALL refresh_continuous_aggregate('continuous_view_1', NULL, 15);
step SV1: SELECT * FROM continuous_view_1 ORDER BY 1;
time_bucket|count
-----------+-----
          0|    5
          5|    5
         10|    5

step LockMatInval: BEGIN; LOCK TABLE _timescaledb_catalog.continuous_aggs_materialization_invalidation_log;
step Refresh1: CALL refresh_continuous_aggregate('continuous_view_1', NULL, 15); <waiting ...>
step Ib: BEGIN; SET LOCAL lock_timeout = '500ms'; SET LOCAL deadlock_timeout = '10ms';
step I1: INSERT INTO ts_continuous_test_1 VALUES (1, 1);
step LockInvalThrEx: BEGIN; LOCK TABLE _timescaledb_catalog.continuous_aggs_invalidation_threshold ; <waiting ...>
step Ic: COMMIT; <waiting ...>
step UnlockMatInval: ROLLBACK;
step Refresh1: <... completed>
step LockInvalThrEx: <... completed>
step UnlockInvalThrEx: ROLLBACK;
step Ic: <... completed>
step SV1: SELECT * FROM continuous_view_1 ORDER BY 1;
time_bucket|count
-----------+-----
          0|    5
          5|    5
         10|    5


starting permutation: I1 Refresh LockInval Refresh Sb S1 Sc UnlockInval
step I1: INSERT INTO ts_continuous_test_1 VALUES (1, 1);
step Refresh: CALL refresh_continuous_aggregate('continuous_view_1', NULL, 15);
step LockInval: BEGIN; LOCK TABLE _timescaledb_catalog.continuous_aggs_hypertable_invalidation_log;
step Refresh: CALL refresh_continuous_aggregate('continuous_view_1', NULL, 15); <waiting ...>
step Sb: BEGIN; SET LOCAL lock_timeout = '500ms'; SET LOCAL deadlock_timeout = '10ms';
step S1: SELECT count(*) FROM ts_continuous_test_1;
count
-----
   31

step Sc: COMMIT;
step UnlockInval: ROLLBACK;
step Refresh: <... completed>

starting permutation: I1 Refresh LockInval Sb S1 Refresh Sc UnlockInval
step I1: INSERT INTO ts_continuous_test_1 VALUES (1, 1);
step Refresh: CALL refresh_continuous_aggregate('continuous_view_1', NULL, 15);
step LockInval: BEGIN; LOCK TABLE _timescaledb_catalog.continuous_aggs_hypertable_invalidation_log;
step Sb: BEGIN; SET LOCAL lock_timeout = '500ms'; SET LOCAL deadlock_timeout = '10ms';
step S1: SELECT count(*) FROM ts_continuous_test_1;
count
-----
   31

step Refresh: CALL refresh_continuous_aggregate('continuous_view_1', NULL, 15); <waiting ...>
step Sc: COMMIT;
step UnlockInval: ROLLBACK;
step Refresh: <... completed>

starting permutation: I1 I21 Refresh1 Refresh2 Refresh3
step I1: INSERT INTO ts_continuous_test_1 VALUES (1, 1);
step I21: INSERT INTO ts_continuous_test_2 VALUES (1, 1);
step Refresh1: CALL refresh_continuous_aggregate('continuous_view_1', NULL, 15);
step Refresh2: CALL refresh_continuous_aggregate('continuous_view_1', NULL, 15);
step Refresh3: CALL refresh_continuous_aggregate('continuous_view_2', NULL, 15);

starting permutation: I1 I2b I21 Refresh2 Refresh3 I2c Refresh3
step I1: INSERT INTO ts_continuous_test_1 VALUES (1, 1);
step I2b: BEGIN; SET LOCAL lock_timeout = '500ms'; SET LOCAL deadlock_timeout = '10ms';
step I21: INSERT INTO ts_continuous_test_2 VALUES (1, 1);
step Refresh2: CALL refresh_continuous_aggregate('continuous_view_1', NULL, 15);
step Refresh3: CALL refresh_continuous_aggregate('continuous_view_2', NULL, 15);
step I2c: COMMIT;
step Refresh3: CALL refresh_continuous_aggregate('continuous_view_2', NULL, 15);

starting permutation: CreateMatView1_Begin CreateMatView2_Begin CreateMatView1_Commit CreateMatView2_Commit
step CreateMatView1_Begin: 
  BEGIN;
  CREATE MATERIALIZED VIEW cagg1
    WITH (timescaledb.continuous, timescaledb.materialized_only=true) AS
    SELECT time_bucket('5', time), COUNT(location)
    FROM ts_continuous_test_1
    GROUP BY 1
    WITH NO DATA;

step CreateMatView2_Begin: 
  BEGIN;
  CREATE MATERIALIZED VIEW cagg2
    WITH (timescaledb.continuous, timescaledb.materialized_only=true) AS
    SELECT time_bucket('5', time), COUNT(location)
    FROM ts_continuous_test_1
    GROUP BY 1
    WITH NO DATA;
 <waiting ...>
step CreateMatView1_Commit: COMMIT;
step CreateMatView2_Begin: <... completed>
step CreateMatView2_Commit: COMMIT;
