-- This file and its contents are licensed under the Timescale License.
-- Please see the included NOTICE for copyright information and
-- LICENSE-TIMESCALE for a copy of the license.
--
-- Test VectorAgg on top of scans with Hypercore TAM.
--
-- This test is not for the vectorized aggregation functionality
-- itself, since that is handled by other tests. Here we only test
-- that VectorAgg is compatible with scans on Hypercore TAM and that
-- the planning is done correctly.
--
-- To run on a larger data set, the vectorized_aggregation and
-- vector_agg_* tests can be run with TAM enabled by default. This is
-- also a good way to verify that the output from Hypercore TAM is the
-- same.
--
create table aggdata (time timestamptz, device int, location int, temp float);
select create_hypertable('aggdata', 'time', create_default_indexes=>false);
NOTICE:  adding not-null constraint to column "time"
  create_hypertable   
----------------------
 (1,public,aggdata,t)
(1 row)

insert into aggdata values ('2024-01-01 01:00', 1, 1, 1.0), ('2024-01-01 01:00', 2, 1, 2.0), ('2024-03-01 01:00', 3, 2, 3.0), ('2024-01-01 02:00', NULL, 1, 0.0), ('2024-01-01 02:00', NULL, 3, NULL);
select format('%I.%I', chunk_schema, chunk_name)::regclass as chunk
from timescaledb_information.chunks
where hypertable_name='aggdata'
limit 1 \gset
alter table aggdata set (timescaledb.compress_orderby='time', timescaledb.compress_segmentby='device');
alter table :chunk set access method hypercore;
-- Add some non-compressed data to ensure vectoraggs work with both
-- compressed and non-compressed data.
insert into aggdata values ('2024-01-01 02:00', 1, 1, 3.0);
analyze aggdata;
--
-- Run a number of queries to compare plans and output with vectorized
-- aggregation on and off.
--
-- This is just to do basic checks to ensure VectorAggs produce the
-- expected output.
--
set timescaledb.debug_require_vector_agg to 'require';
explain (verbose, costs off)
select avg(device) from aggdata;
                                       QUERY PLAN                                       
----------------------------------------------------------------------------------------
 Finalize Aggregate
   Output: avg(_hyper_1_1_chunk.device)
   ->  Append
         ->  Custom Scan (VectorAgg)
               Output: (PARTIAL avg(_hyper_1_1_chunk.device))
               Grouping Policy: all compressed batches
               ->  Custom Scan (ColumnarScan) on _timescaledb_internal._hyper_1_1_chunk
                     Output: _hyper_1_1_chunk.device
         ->  Partial Aggregate
               Output: PARTIAL avg(_hyper_1_2_chunk.device)
               ->  Seq Scan on _timescaledb_internal._hyper_1_2_chunk
                     Output: _hyper_1_2_chunk.device
(12 rows)

select avg(device) from aggdata;
        avg         
--------------------
 1.7500000000000000
(1 row)

set timescaledb.enable_vectorized_aggregation=false;
reset timescaledb.debug_require_vector_agg;
explain (verbose, costs off)
select avg(device) from aggdata;
                                       QUERY PLAN                                       
----------------------------------------------------------------------------------------
 Finalize Aggregate
   Output: avg(_hyper_1_1_chunk.device)
   ->  Append
         ->  Partial Aggregate
               Output: PARTIAL avg(_hyper_1_1_chunk.device)
               ->  Custom Scan (ColumnarScan) on _timescaledb_internal._hyper_1_1_chunk
                     Output: _hyper_1_1_chunk.device
         ->  Partial Aggregate
               Output: PARTIAL avg(_hyper_1_2_chunk.device)
               ->  Seq Scan on _timescaledb_internal._hyper_1_2_chunk
                     Output: _hyper_1_2_chunk.device
(11 rows)

select avg(device) from aggdata;
        avg         
--------------------
 1.7500000000000000
(1 row)

--
-- Test agg filter on segmentby column
--
set timescaledb.enable_vectorized_aggregation=true;
explain (verbose, costs off)
select avg(temp) filter (where device > 1) from aggdata;
                                               QUERY PLAN                                                
---------------------------------------------------------------------------------------------------------
 Finalize Aggregate
   Output: avg(_hyper_1_1_chunk.temp) FILTER (WHERE (_hyper_1_1_chunk.device > 1))
   ->  Append
         ->  Custom Scan (VectorAgg)
               Output: (PARTIAL avg(_hyper_1_1_chunk.temp) FILTER (WHERE (_hyper_1_1_chunk.device > 1)))
               Grouping Policy: all compressed batches
               ->  Custom Scan (ColumnarScan) on _timescaledb_internal._hyper_1_1_chunk
                     Output: _hyper_1_1_chunk.temp, _hyper_1_1_chunk.device
         ->  Partial Aggregate
               Output: PARTIAL avg(_hyper_1_2_chunk.temp) FILTER (WHERE (_hyper_1_2_chunk.device > 1))
               ->  Seq Scan on _timescaledb_internal._hyper_1_2_chunk
                     Output: _hyper_1_2_chunk.temp, _hyper_1_2_chunk.device
(12 rows)

set timescaledb.debug_require_vector_agg to 'require';
select avg(temp) filter (where device > 1) from aggdata;
 avg 
-----
 2.5
(1 row)

set timescaledb.enable_vectorized_aggregation=false;
reset timescaledb.debug_require_vector_agg;
explain (verbose, costs off)
select avg(temp) filter (where device > 1) from aggdata;
                                              QUERY PLAN                                               
-------------------------------------------------------------------------------------------------------
 Finalize Aggregate
   Output: avg(_hyper_1_1_chunk.temp) FILTER (WHERE (_hyper_1_1_chunk.device > 1))
   ->  Append
         ->  Partial Aggregate
               Output: PARTIAL avg(_hyper_1_1_chunk.temp) FILTER (WHERE (_hyper_1_1_chunk.device > 1))
               ->  Custom Scan (ColumnarScan) on _timescaledb_internal._hyper_1_1_chunk
                     Output: _hyper_1_1_chunk.temp, _hyper_1_1_chunk.device
         ->  Partial Aggregate
               Output: PARTIAL avg(_hyper_1_2_chunk.temp) FILTER (WHERE (_hyper_1_2_chunk.device > 1))
               ->  Seq Scan on _timescaledb_internal._hyper_1_2_chunk
                     Output: _hyper_1_2_chunk.temp, _hyper_1_2_chunk.device
(11 rows)

select avg(temp) filter (where device > 1) from aggdata;
 avg 
-----
 2.5
(1 row)

--
-- Test agg filter on non-segmentby column
--
set timescaledb.enable_vectorized_aggregation=true;
explain (verbose, costs off)
select count(*) filter (where location < 3) from aggdata;
                                       QUERY PLAN                                        
-----------------------------------------------------------------------------------------
 Finalize Aggregate
   Output: count(*) FILTER (WHERE (_hyper_1_1_chunk.location < 3))
   ->  Append
         ->  Custom Scan (VectorAgg)
               Output: (PARTIAL count(*) FILTER (WHERE (_hyper_1_1_chunk.location < 3)))
               Grouping Policy: all compressed batches
               ->  Custom Scan (ColumnarScan) on _timescaledb_internal._hyper_1_1_chunk
                     Output: _hyper_1_1_chunk.location
         ->  Partial Aggregate
               Output: PARTIAL count(*) FILTER (WHERE (_hyper_1_2_chunk.location < 3))
               ->  Seq Scan on _timescaledb_internal._hyper_1_2_chunk
                     Output: _hyper_1_2_chunk.location
(12 rows)

set timescaledb.debug_require_vector_agg to 'require';
select count(*) filter (where location < 3) from aggdata;
 count 
-------
     5
(1 row)

set timescaledb.enable_vectorized_aggregation=false;
reset timescaledb.debug_require_vector_agg;
explain (verbose, costs off)
select count(*) filter (where location < 3) from aggdata;
                                       QUERY PLAN                                       
----------------------------------------------------------------------------------------
 Finalize Aggregate
   Output: count(*) FILTER (WHERE (_hyper_1_1_chunk.location < 3))
   ->  Append
         ->  Partial Aggregate
               Output: PARTIAL count(*) FILTER (WHERE (_hyper_1_1_chunk.location < 3))
               ->  Custom Scan (ColumnarScan) on _timescaledb_internal._hyper_1_1_chunk
                     Output: _hyper_1_1_chunk.location
         ->  Partial Aggregate
               Output: PARTIAL count(*) FILTER (WHERE (_hyper_1_2_chunk.location < 3))
               ->  Seq Scan on _timescaledb_internal._hyper_1_2_chunk
                     Output: _hyper_1_2_chunk.location
(11 rows)

select count(*) filter (where location < 3) from aggdata;
 count 
-------
     5
(1 row)

--
-- Test grouping on non-segmentby column
--
set timescaledb.enable_vectorized_aggregation=true;
explain (verbose, costs off)
select location, avg(temp) from aggdata where location=1 group by location;
                                       QUERY PLAN                                       
----------------------------------------------------------------------------------------
 Finalize GroupAggregate
   Output: _hyper_1_1_chunk.location, avg(_hyper_1_1_chunk.temp)
   ->  Append
         ->  Custom Scan (VectorAgg)
               Output: _hyper_1_1_chunk.location, (PARTIAL avg(_hyper_1_1_chunk.temp))
               Grouping Policy: hashed with single 4-byte key
               ->  Custom Scan (ColumnarScan) on _timescaledb_internal._hyper_1_1_chunk
                     Output: _hyper_1_1_chunk.location, _hyper_1_1_chunk.temp
                     Vectorized Filter: (_hyper_1_1_chunk.location = 1)
         ->  Partial GroupAggregate
               Output: _hyper_1_2_chunk.location, PARTIAL avg(_hyper_1_2_chunk.temp)
               ->  Seq Scan on _timescaledb_internal._hyper_1_2_chunk
                     Output: _hyper_1_2_chunk.location, _hyper_1_2_chunk.temp
                     Filter: (_hyper_1_2_chunk.location = 1)
(14 rows)

set timescaledb.debug_require_vector_agg to 'require';
select location, avg(temp) from aggdata where location=1 group by location;
 location | avg 
----------+-----
        1 | 1.5
(1 row)

set timescaledb.enable_vectorized_aggregation=false;
reset timescaledb.debug_require_vector_agg;
explain (verbose, costs off)
select location, avg(temp) from aggdata where location=1 group by location;
                                       QUERY PLAN                                       
----------------------------------------------------------------------------------------
 Finalize GroupAggregate
   Output: _hyper_1_1_chunk.location, avg(_hyper_1_1_chunk.temp)
   ->  Append
         ->  Partial GroupAggregate
               Output: _hyper_1_1_chunk.location, PARTIAL avg(_hyper_1_1_chunk.temp)
               ->  Custom Scan (ColumnarScan) on _timescaledb_internal._hyper_1_1_chunk
                     Output: _hyper_1_1_chunk.location, _hyper_1_1_chunk.temp
                     Vectorized Filter: (_hyper_1_1_chunk.location = 1)
         ->  Partial GroupAggregate
               Output: _hyper_1_2_chunk.location, PARTIAL avg(_hyper_1_2_chunk.temp)
               ->  Seq Scan on _timescaledb_internal._hyper_1_2_chunk
                     Output: _hyper_1_2_chunk.location, _hyper_1_2_chunk.temp
                     Filter: (_hyper_1_2_chunk.location = 1)
(13 rows)

select location, avg(temp) from aggdata where location=1 group by location;
 location | avg 
----------+-----
        1 | 1.5
(1 row)

set timescaledb.enable_vectorized_aggregation=true;
explain (verbose, costs off)
select location, count(*) from aggdata where location=1 group by location;
                                       QUERY PLAN                                       
----------------------------------------------------------------------------------------
 Finalize GroupAggregate
   Output: _hyper_1_1_chunk.location, count(*)
   ->  Append
         ->  Custom Scan (VectorAgg)
               Output: _hyper_1_1_chunk.location, (PARTIAL count(*))
               Grouping Policy: hashed with single 4-byte key
               ->  Custom Scan (ColumnarScan) on _timescaledb_internal._hyper_1_1_chunk
                     Output: _hyper_1_1_chunk.location
                     Vectorized Filter: (_hyper_1_1_chunk.location = 1)
         ->  Partial GroupAggregate
               Output: _hyper_1_2_chunk.location, PARTIAL count(*)
               ->  Seq Scan on _timescaledb_internal._hyper_1_2_chunk
                     Output: _hyper_1_2_chunk.location
                     Filter: (_hyper_1_2_chunk.location = 1)
(14 rows)

set timescaledb.debug_require_vector_agg to 'require';
select location, count(*) from aggdata where location=1 group by location;
 location | count 
----------+-------
        1 |     4
(1 row)

set timescaledb.enable_vectorized_aggregation=false;
reset timescaledb.debug_require_vector_agg;
explain (verbose, costs off)
select location, count(*) from aggdata where location=1 group by location;
                                       QUERY PLAN                                       
----------------------------------------------------------------------------------------
 Finalize GroupAggregate
   Output: _hyper_1_1_chunk.location, count(*)
   ->  Append
         ->  Partial GroupAggregate
               Output: _hyper_1_1_chunk.location, PARTIAL count(*)
               ->  Custom Scan (ColumnarScan) on _timescaledb_internal._hyper_1_1_chunk
                     Output: _hyper_1_1_chunk.location
                     Vectorized Filter: (_hyper_1_1_chunk.location = 1)
         ->  Partial GroupAggregate
               Output: _hyper_1_2_chunk.location, PARTIAL count(*)
               ->  Seq Scan on _timescaledb_internal._hyper_1_2_chunk
                     Output: _hyper_1_2_chunk.location
                     Filter: (_hyper_1_2_chunk.location = 1)
(13 rows)

select location, count(*) from aggdata where location=1 group by location;
 location | count 
----------+-------
        1 |     4
(1 row)

--
-- Test ordering/grouping on segmentby, orderby columns
--
-- This grouping is currently NOT supported by VectorAgg
--
set timescaledb.enable_vectorized_aggregation=true;
explain (verbose, costs off)
select time, device, sum(temp) from aggdata where device is not null group by time, device order by time, device limit 10;
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Limit
   Output: _hyper_1_1_chunk."time", _hyper_1_1_chunk.device, (sum(_hyper_1_1_chunk.temp))
   ->  Sort
         Output: _hyper_1_1_chunk."time", _hyper_1_1_chunk.device, (sum(_hyper_1_1_chunk.temp))
         Sort Key: _hyper_1_1_chunk."time", _hyper_1_1_chunk.device
         ->  Finalize HashAggregate
               Output: _hyper_1_1_chunk."time", _hyper_1_1_chunk.device, sum(_hyper_1_1_chunk.temp)
               Group Key: _hyper_1_1_chunk."time", _hyper_1_1_chunk.device
               ->  Append
                     ->  Partial HashAggregate
                           Output: _hyper_1_1_chunk."time", _hyper_1_1_chunk.device, PARTIAL sum(_hyper_1_1_chunk.temp)
                           Group Key: _hyper_1_1_chunk."time", _hyper_1_1_chunk.device
                           ->  Custom Scan (ColumnarScan) on _timescaledb_internal._hyper_1_1_chunk
                                 Output: _hyper_1_1_chunk."time", _hyper_1_1_chunk.device, _hyper_1_1_chunk.temp
                                 Filter: (_hyper_1_1_chunk.device IS NOT NULL)
                     ->  Partial HashAggregate
                           Output: _hyper_1_2_chunk."time", _hyper_1_2_chunk.device, PARTIAL sum(_hyper_1_2_chunk.temp)
                           Group Key: _hyper_1_2_chunk."time", _hyper_1_2_chunk.device
                           ->  Seq Scan on _timescaledb_internal._hyper_1_2_chunk
                                 Output: _hyper_1_2_chunk."time", _hyper_1_2_chunk.device, _hyper_1_2_chunk.temp
                                 Filter: (_hyper_1_2_chunk.device IS NOT NULL)
(21 rows)

set timescaledb.debug_require_vector_agg to 'forbid';
select time, device, sum(temp) from aggdata where device is not null group by time, device order by time, device limit 10;
             time             | device | sum 
------------------------------+--------+-----
 Mon Jan 01 01:00:00 2024 PST |      1 |   1
 Mon Jan 01 01:00:00 2024 PST |      2 |   2
 Mon Jan 01 02:00:00 2024 PST |      1 |   3
 Fri Mar 01 01:00:00 2024 PST |      3 |   3
(4 rows)

set timecaledb.enable_vectorized_aggregation=false;
reset timescaledb.debug_require_vector_agg;
explain (verbose, costs off)
select time, device, sum(temp) from aggdata where device is not null group by time, device order by time, device limit 10;
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Limit
   Output: _hyper_1_1_chunk."time", _hyper_1_1_chunk.device, (sum(_hyper_1_1_chunk.temp))
   ->  Sort
         Output: _hyper_1_1_chunk."time", _hyper_1_1_chunk.device, (sum(_hyper_1_1_chunk.temp))
         Sort Key: _hyper_1_1_chunk."time", _hyper_1_1_chunk.device
         ->  Finalize HashAggregate
               Output: _hyper_1_1_chunk."time", _hyper_1_1_chunk.device, sum(_hyper_1_1_chunk.temp)
               Group Key: _hyper_1_1_chunk."time", _hyper_1_1_chunk.device
               ->  Append
                     ->  Partial HashAggregate
                           Output: _hyper_1_1_chunk."time", _hyper_1_1_chunk.device, PARTIAL sum(_hyper_1_1_chunk.temp)
                           Group Key: _hyper_1_1_chunk."time", _hyper_1_1_chunk.device
                           ->  Custom Scan (ColumnarScan) on _timescaledb_internal._hyper_1_1_chunk
                                 Output: _hyper_1_1_chunk."time", _hyper_1_1_chunk.device, _hyper_1_1_chunk.temp
                                 Filter: (_hyper_1_1_chunk.device IS NOT NULL)
                     ->  Partial HashAggregate
                           Output: _hyper_1_2_chunk."time", _hyper_1_2_chunk.device, PARTIAL sum(_hyper_1_2_chunk.temp)
                           Group Key: _hyper_1_2_chunk."time", _hyper_1_2_chunk.device
                           ->  Seq Scan on _timescaledb_internal._hyper_1_2_chunk
                                 Output: _hyper_1_2_chunk."time", _hyper_1_2_chunk.device, _hyper_1_2_chunk.temp
                                 Filter: (_hyper_1_2_chunk.device IS NOT NULL)
(21 rows)

select time, device, sum(temp) from aggdata where device is not null group by time, device order by time, device limit 10;
             time             | device | sum 
------------------------------+--------+-----
 Mon Jan 01 01:00:00 2024 PST |      1 |   1
 Mon Jan 01 01:00:00 2024 PST |      2 |   2
 Mon Jan 01 02:00:00 2024 PST |      1 |   3
 Fri Mar 01 01:00:00 2024 PST |      3 |   3
(4 rows)

set timescaledb.enable_vectorized_aggregation=true;
explain (verbose, costs off)
select time, device, sum(temp) filter (where device is not null) from aggdata group by time, device order by time, device desc limit 10;
                                                                                 QUERY PLAN                                                                                  
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit
   Output: _hyper_1_1_chunk."time", _hyper_1_1_chunk.device, (sum(_hyper_1_1_chunk.temp) FILTER (WHERE (_hyper_1_1_chunk.device IS NOT NULL)))
   ->  Sort
         Output: _hyper_1_1_chunk."time", _hyper_1_1_chunk.device, (sum(_hyper_1_1_chunk.temp) FILTER (WHERE (_hyper_1_1_chunk.device IS NOT NULL)))
         Sort Key: _hyper_1_1_chunk."time", _hyper_1_1_chunk.device DESC
         ->  Finalize HashAggregate
               Output: _hyper_1_1_chunk."time", _hyper_1_1_chunk.device, sum(_hyper_1_1_chunk.temp) FILTER (WHERE (_hyper_1_1_chunk.device IS NOT NULL))
               Group Key: _hyper_1_1_chunk."time", _hyper_1_1_chunk.device
               ->  Append
                     ->  Partial HashAggregate
                           Output: _hyper_1_1_chunk."time", _hyper_1_1_chunk.device, PARTIAL sum(_hyper_1_1_chunk.temp) FILTER (WHERE (_hyper_1_1_chunk.device IS NOT NULL))
                           Group Key: _hyper_1_1_chunk."time", _hyper_1_1_chunk.device
                           ->  Custom Scan (ColumnarScan) on _timescaledb_internal._hyper_1_1_chunk
                                 Output: _hyper_1_1_chunk."time", _hyper_1_1_chunk.device, _hyper_1_1_chunk.temp
                     ->  Partial HashAggregate
                           Output: _hyper_1_2_chunk."time", _hyper_1_2_chunk.device, PARTIAL sum(_hyper_1_2_chunk.temp) FILTER (WHERE (_hyper_1_2_chunk.device IS NOT NULL))
                           Group Key: _hyper_1_2_chunk."time", _hyper_1_2_chunk.device
                           ->  Seq Scan on _timescaledb_internal._hyper_1_2_chunk
                                 Output: _hyper_1_2_chunk."time", _hyper_1_2_chunk.device, _hyper_1_2_chunk.temp
(19 rows)

set timescaledb.debug_require_vector_agg to 'forbid';
select time, device, sum(temp) filter (where device is not null) from aggdata group by time, device order by time, device desc limit 10;
             time             | device | sum 
------------------------------+--------+-----
 Mon Jan 01 01:00:00 2024 PST |      2 |   2
 Mon Jan 01 01:00:00 2024 PST |      1 |   1
 Mon Jan 01 02:00:00 2024 PST |        |    
 Mon Jan 01 02:00:00 2024 PST |      1 |   3
 Fri Mar 01 01:00:00 2024 PST |      3 |   3
(5 rows)

set timescaledb.enable_vectorized_aggregation=false;
reset timescaledb.debug_require_vector_agg;
explain (verbose, costs off)
select time, device, sum(temp) filter (where device is not null) from aggdata group by time, device order by time, device desc limit 10;
                                                                                 QUERY PLAN                                                                                  
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit
   Output: _hyper_1_1_chunk."time", _hyper_1_1_chunk.device, (sum(_hyper_1_1_chunk.temp) FILTER (WHERE (_hyper_1_1_chunk.device IS NOT NULL)))
   ->  Sort
         Output: _hyper_1_1_chunk."time", _hyper_1_1_chunk.device, (sum(_hyper_1_1_chunk.temp) FILTER (WHERE (_hyper_1_1_chunk.device IS NOT NULL)))
         Sort Key: _hyper_1_1_chunk."time", _hyper_1_1_chunk.device DESC
         ->  Finalize HashAggregate
               Output: _hyper_1_1_chunk."time", _hyper_1_1_chunk.device, sum(_hyper_1_1_chunk.temp) FILTER (WHERE (_hyper_1_1_chunk.device IS NOT NULL))
               Group Key: _hyper_1_1_chunk."time", _hyper_1_1_chunk.device
               ->  Append
                     ->  Partial HashAggregate
                           Output: _hyper_1_1_chunk."time", _hyper_1_1_chunk.device, PARTIAL sum(_hyper_1_1_chunk.temp) FILTER (WHERE (_hyper_1_1_chunk.device IS NOT NULL))
                           Group Key: _hyper_1_1_chunk."time", _hyper_1_1_chunk.device
                           ->  Custom Scan (ColumnarScan) on _timescaledb_internal._hyper_1_1_chunk
                                 Output: _hyper_1_1_chunk."time", _hyper_1_1_chunk.device, _hyper_1_1_chunk.temp
                     ->  Partial HashAggregate
                           Output: _hyper_1_2_chunk."time", _hyper_1_2_chunk.device, PARTIAL sum(_hyper_1_2_chunk.temp) FILTER (WHERE (_hyper_1_2_chunk.device IS NOT NULL))
                           Group Key: _hyper_1_2_chunk."time", _hyper_1_2_chunk.device
                           ->  Seq Scan on _timescaledb_internal._hyper_1_2_chunk
                                 Output: _hyper_1_2_chunk."time", _hyper_1_2_chunk.device, _hyper_1_2_chunk.temp
(19 rows)

select time, device, sum(temp) filter (where device is not null) from aggdata group by time, device order by time, device desc limit 10;
             time             | device | sum 
------------------------------+--------+-----
 Mon Jan 01 01:00:00 2024 PST |      2 |   2
 Mon Jan 01 01:00:00 2024 PST |      1 |   1
 Mon Jan 01 02:00:00 2024 PST |        |    
 Mon Jan 01 02:00:00 2024 PST |      1 |   3
 Fri Mar 01 01:00:00 2024 PST |      3 |   3
(5 rows)

--
-- Test ordering on time (orderby), ASC as well as DESC
--
set timescaledb.enable_vectorized_aggregation=true;
explain (verbose, costs off)
select time, sum(temp) from aggdata group by time order by time limit 10;
                                             QUERY PLAN                                             
----------------------------------------------------------------------------------------------------
 Limit
   Output: _hyper_1_1_chunk."time", (sum(_hyper_1_1_chunk.temp))
   ->  Sort
         Output: _hyper_1_1_chunk."time", (sum(_hyper_1_1_chunk.temp))
         Sort Key: _hyper_1_1_chunk."time"
         ->  Finalize HashAggregate
               Output: _hyper_1_1_chunk."time", sum(_hyper_1_1_chunk.temp)
               Group Key: _hyper_1_1_chunk."time"
               ->  Append
                     ->  Custom Scan (VectorAgg)
                           Output: _hyper_1_1_chunk."time", (PARTIAL sum(_hyper_1_1_chunk.temp))
                           Grouping Policy: hashed with single 8-byte key
                           ->  Custom Scan (ColumnarScan) on _timescaledb_internal._hyper_1_1_chunk
                                 Output: _hyper_1_1_chunk."time", _hyper_1_1_chunk.temp
                     ->  Partial HashAggregate
                           Output: _hyper_1_2_chunk."time", PARTIAL sum(_hyper_1_2_chunk.temp)
                           Group Key: _hyper_1_2_chunk."time"
                           ->  Seq Scan on _timescaledb_internal._hyper_1_2_chunk
                                 Output: _hyper_1_2_chunk."time", _hyper_1_2_chunk.temp
(19 rows)

set timescaledb.debug_require_vector_agg to 'require';
select time, sum(temp) from aggdata group by time order by time limit 10;
             time             | sum 
------------------------------+-----
 Mon Jan 01 01:00:00 2024 PST |   3
 Mon Jan 01 02:00:00 2024 PST |   3
 Fri Mar 01 01:00:00 2024 PST |   3
(3 rows)

set timescaledb.enable_vectorized_aggregation=false;
reset timescaledb.debug_require_vector_agg;
explain (verbose, costs off)
select time, sum(temp) from aggdata group by time order by time limit 10;
                                             QUERY PLAN                                             
----------------------------------------------------------------------------------------------------
 Limit
   Output: _hyper_1_1_chunk."time", (sum(_hyper_1_1_chunk.temp))
   ->  Sort
         Output: _hyper_1_1_chunk."time", (sum(_hyper_1_1_chunk.temp))
         Sort Key: _hyper_1_1_chunk."time"
         ->  Finalize HashAggregate
               Output: _hyper_1_1_chunk."time", sum(_hyper_1_1_chunk.temp)
               Group Key: _hyper_1_1_chunk."time"
               ->  Append
                     ->  Partial HashAggregate
                           Output: _hyper_1_1_chunk."time", PARTIAL sum(_hyper_1_1_chunk.temp)
                           Group Key: _hyper_1_1_chunk."time"
                           ->  Custom Scan (ColumnarScan) on _timescaledb_internal._hyper_1_1_chunk
                                 Output: _hyper_1_1_chunk."time", _hyper_1_1_chunk.temp
                     ->  Partial HashAggregate
                           Output: _hyper_1_2_chunk."time", PARTIAL sum(_hyper_1_2_chunk.temp)
                           Group Key: _hyper_1_2_chunk."time"
                           ->  Seq Scan on _timescaledb_internal._hyper_1_2_chunk
                                 Output: _hyper_1_2_chunk."time", _hyper_1_2_chunk.temp
(19 rows)

select time, sum(temp) from aggdata group by time order by time limit 10;
             time             | sum 
------------------------------+-----
 Mon Jan 01 01:00:00 2024 PST |   3
 Mon Jan 01 02:00:00 2024 PST |   3
 Fri Mar 01 01:00:00 2024 PST |   3
(3 rows)

set timescaledb.enable_vectorized_aggregation=true;
explain (verbose, costs off)
select time, sum(temp) from aggdata group by time order by time desc limit 10;
                                             QUERY PLAN                                             
----------------------------------------------------------------------------------------------------
 Limit
   Output: _hyper_1_2_chunk."time", (sum(_hyper_1_2_chunk.temp))
   ->  Sort
         Output: _hyper_1_2_chunk."time", (sum(_hyper_1_2_chunk.temp))
         Sort Key: _hyper_1_2_chunk."time" DESC
         ->  Finalize HashAggregate
               Output: _hyper_1_2_chunk."time", sum(_hyper_1_2_chunk.temp)
               Group Key: _hyper_1_2_chunk."time"
               ->  Append
                     ->  Partial HashAggregate
                           Output: _hyper_1_2_chunk."time", PARTIAL sum(_hyper_1_2_chunk.temp)
                           Group Key: _hyper_1_2_chunk."time"
                           ->  Seq Scan on _timescaledb_internal._hyper_1_2_chunk
                                 Output: _hyper_1_2_chunk."time", _hyper_1_2_chunk.temp
                     ->  Custom Scan (VectorAgg)
                           Output: _hyper_1_1_chunk."time", (PARTIAL sum(_hyper_1_1_chunk.temp))
                           Grouping Policy: hashed with single 8-byte key
                           ->  Custom Scan (ColumnarScan) on _timescaledb_internal._hyper_1_1_chunk
                                 Output: _hyper_1_1_chunk."time", _hyper_1_1_chunk.temp
(19 rows)

set timescaledb.debug_require_vector_agg to 'require';
select time, sum(temp) from aggdata group by time order by time desc limit 10;
             time             | sum 
------------------------------+-----
 Fri Mar 01 01:00:00 2024 PST |   3
 Mon Jan 01 02:00:00 2024 PST |   3
 Mon Jan 01 01:00:00 2024 PST |   3
(3 rows)

set timescaledb.enable_vectorized_aggregation=false;
reset timescaledb.debug_require_vector_agg;
explain (verbose, costs off)
select time, sum(temp) from aggdata group by time order by time desc limit 10;
                                             QUERY PLAN                                             
----------------------------------------------------------------------------------------------------
 Limit
   Output: _hyper_1_2_chunk."time", (sum(_hyper_1_2_chunk.temp))
   ->  Sort
         Output: _hyper_1_2_chunk."time", (sum(_hyper_1_2_chunk.temp))
         Sort Key: _hyper_1_2_chunk."time" DESC
         ->  Finalize HashAggregate
               Output: _hyper_1_2_chunk."time", sum(_hyper_1_2_chunk.temp)
               Group Key: _hyper_1_2_chunk."time"
               ->  Append
                     ->  Partial HashAggregate
                           Output: _hyper_1_2_chunk."time", PARTIAL sum(_hyper_1_2_chunk.temp)
                           Group Key: _hyper_1_2_chunk."time"
                           ->  Seq Scan on _timescaledb_internal._hyper_1_2_chunk
                                 Output: _hyper_1_2_chunk."time", _hyper_1_2_chunk.temp
                     ->  Partial HashAggregate
                           Output: _hyper_1_1_chunk."time", PARTIAL sum(_hyper_1_1_chunk.temp)
                           Group Key: _hyper_1_1_chunk."time"
                           ->  Custom Scan (ColumnarScan) on _timescaledb_internal._hyper_1_1_chunk
                                 Output: _hyper_1_1_chunk."time", _hyper_1_1_chunk.temp
(19 rows)

select time, sum(temp) from aggdata group by time order by time desc limit 10;
             time             | sum 
------------------------------+-----
 Fri Mar 01 01:00:00 2024 PST |   3
 Mon Jan 01 02:00:00 2024 PST |   3
 Mon Jan 01 01:00:00 2024 PST |   3
(3 rows)

--
-- Test ordering on time (orderby), ASC as well as DESC with no segmentby
--
create table aggdata_timeorder (like aggdata);
select create_hypertable('aggdata_timeorder', 'time', create_default_indexes=>false);
       create_hypertable        
--------------------------------
 (3,public,aggdata_timeorder,t)
(1 row)

insert into aggdata_timeorder select * from aggdata;
select format('%I.%I', chunk_schema, chunk_name)::regclass as chunk
from timescaledb_information.chunks
where hypertable_name='aggdata_timeorder'
limit 1 \gset
alter table aggdata_timeorder set (timescaledb.compress_orderby='time', timescaledb.compress_segmentby='');
alter table :chunk set access method hypercore;
analyze aggdata_timeorder;
set timescaledb.enable_vectorized_aggregation=true;
explain (verbose, costs off)
select time, sum(temp) from aggdata_timeorder group by time order by time limit 10;
                                             QUERY PLAN                                             
----------------------------------------------------------------------------------------------------
 Limit
   Output: _hyper_3_4_chunk."time", (sum(_hyper_3_4_chunk.temp))
   ->  Sort
         Output: _hyper_3_4_chunk."time", (sum(_hyper_3_4_chunk.temp))
         Sort Key: _hyper_3_4_chunk."time"
         ->  Finalize HashAggregate
               Output: _hyper_3_4_chunk."time", sum(_hyper_3_4_chunk.temp)
               Group Key: _hyper_3_4_chunk."time"
               ->  Append
                     ->  Custom Scan (VectorAgg)
                           Output: _hyper_3_4_chunk."time", (PARTIAL sum(_hyper_3_4_chunk.temp))
                           Grouping Policy: hashed with single 8-byte key
                           ->  Custom Scan (ColumnarScan) on _timescaledb_internal._hyper_3_4_chunk
                                 Output: _hyper_3_4_chunk."time", _hyper_3_4_chunk.temp
                     ->  Partial HashAggregate
                           Output: _hyper_3_5_chunk."time", PARTIAL sum(_hyper_3_5_chunk.temp)
                           Group Key: _hyper_3_5_chunk."time"
                           ->  Seq Scan on _timescaledb_internal._hyper_3_5_chunk
                                 Output: _hyper_3_5_chunk."time", _hyper_3_5_chunk.temp
(19 rows)

set timescaledb.debug_require_vector_agg to 'require';
select time, sum(temp) from aggdata_timeorder group by time order by time limit 10;
             time             | sum 
------------------------------+-----
 Mon Jan 01 01:00:00 2024 PST |   3
 Mon Jan 01 02:00:00 2024 PST |   3
 Fri Mar 01 01:00:00 2024 PST |   3
(3 rows)

explain (verbose, costs off)
select time, sum(temp) from aggdata_timeorder group by time order by time desc limit 10;
                                             QUERY PLAN                                             
----------------------------------------------------------------------------------------------------
 Limit
   Output: _hyper_3_5_chunk."time", (sum(_hyper_3_5_chunk.temp))
   ->  Sort
         Output: _hyper_3_5_chunk."time", (sum(_hyper_3_5_chunk.temp))
         Sort Key: _hyper_3_5_chunk."time" DESC
         ->  Finalize HashAggregate
               Output: _hyper_3_5_chunk."time", sum(_hyper_3_5_chunk.temp)
               Group Key: _hyper_3_5_chunk."time"
               ->  Append
                     ->  Partial HashAggregate
                           Output: _hyper_3_5_chunk."time", PARTIAL sum(_hyper_3_5_chunk.temp)
                           Group Key: _hyper_3_5_chunk."time"
                           ->  Seq Scan on _timescaledb_internal._hyper_3_5_chunk
                                 Output: _hyper_3_5_chunk."time", _hyper_3_5_chunk.temp
                     ->  Custom Scan (VectorAgg)
                           Output: _hyper_3_4_chunk."time", (PARTIAL sum(_hyper_3_4_chunk.temp))
                           Grouping Policy: hashed with single 8-byte key
                           ->  Custom Scan (ColumnarScan) on _timescaledb_internal._hyper_3_4_chunk
                                 Output: _hyper_3_4_chunk."time", _hyper_3_4_chunk.temp
(19 rows)

select time, sum(temp) from aggdata_timeorder group by time order by time desc limit 10;
             time             | sum 
------------------------------+-----
 Fri Mar 01 01:00:00 2024 PST |   3
 Mon Jan 01 02:00:00 2024 PST |   3
 Mon Jan 01 01:00:00 2024 PST |   3
(3 rows)

