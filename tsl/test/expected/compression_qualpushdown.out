-- This file and its contents are licensed under the Timescale License.
-- Please see the included NOTICE for copyright information and
-- LICENSE-TIMESCALE for a copy of the license.
-- qual pushdown tests for decompresschunk ---
-- Test qual pushdown with ints
CREATE TABLE meta (device_id INT PRIMARY KEY);
CREATE TABLE hyper(
    time INT NOT NULL,
    device_id INT REFERENCES meta(device_id) ON DELETE CASCADE ON UPDATE CASCADE,
    val INT);
SELECT * FROM create_hypertable('hyper', 'time', chunk_time_interval => 10);
 hypertable_id | schema_name | table_name | created 
---------------+-------------+------------+---------
             1 | public      | hyper      | t
(1 row)

ALTER TABLE hyper SET (
    timescaledb.compress,
    timescaledb.compress_orderby = 'time',
    timescaledb.compress_segmentby = 'device_id');
INSERT INTO meta VALUES (1), (2), (3), (4), (5);
INSERT INTO hyper VALUES (1, 1, 1), (2, 2, 1), (3, 3, 1), (10, 3, 2), (11, 4, 2), (11, 5, 2);
SELECT ch1.table_name AS "CHUNK_NAME", ch1.schema_name|| '.' || ch1.table_name AS "CHUNK_FULL_NAME"
FROM _timescaledb_catalog.chunk ch1, _timescaledb_catalog.hypertable ht
WHERE ch1.hypertable_id = ht.id AND ht.table_name LIKE 'hyper'
ORDER BY ch1.id LIMIT 1 \gset
SELECT compress_chunk(:'CHUNK_FULL_NAME');
             compress_chunk             
----------------------------------------
 _timescaledb_internal._hyper_1_1_chunk
(1 row)

-- test for qual pushdown
explain (costs off, verbose)
SELECT
FROM hyper
WHERE time > 2::bigint and time < 4;
                                                                                                                  QUERY PLAN                                                                                                                  
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (DecompressChunk) on _timescaledb_internal._hyper_1_1_chunk
   Vectorized Filter: ((_hyper_1_1_chunk."time" > '2'::bigint) AND (_hyper_1_1_chunk."time" < 4))
   ->  Index Scan using compress_hyper_2_3_chunk_device_id__ts_meta_min_1__ts_meta__idx on _timescaledb_internal.compress_hyper_2_3_chunk
         Output: compress_hyper_2_3_chunk._ts_meta_count, compress_hyper_2_3_chunk.device_id, compress_hyper_2_3_chunk._ts_meta_min_1, compress_hyper_2_3_chunk._ts_meta_max_1, compress_hyper_2_3_chunk."time", compress_hyper_2_3_chunk.val
         Index Cond: ((compress_hyper_2_3_chunk._ts_meta_min_1 < 4) AND (compress_hyper_2_3_chunk._ts_meta_max_1 > '2'::bigint))
(5 rows)

explain (costs off, verbose)
SELECT
FROM hyper
WHERE time = 3::bigint;
                                                                                                                  QUERY PLAN                                                                                                                  
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (DecompressChunk) on _timescaledb_internal._hyper_1_1_chunk
   Vectorized Filter: (_hyper_1_1_chunk."time" = '3'::bigint)
   ->  Index Scan using compress_hyper_2_3_chunk_device_id__ts_meta_min_1__ts_meta__idx on _timescaledb_internal.compress_hyper_2_3_chunk
         Output: compress_hyper_2_3_chunk._ts_meta_count, compress_hyper_2_3_chunk.device_id, compress_hyper_2_3_chunk._ts_meta_min_1, compress_hyper_2_3_chunk._ts_meta_max_1, compress_hyper_2_3_chunk."time", compress_hyper_2_3_chunk.val
         Index Cond: ((compress_hyper_2_3_chunk._ts_meta_min_1 <= '3'::bigint) AND (compress_hyper_2_3_chunk._ts_meta_max_1 >= '3'::bigint))
(5 rows)

SELECT *
FROM hyper
WHERE time > 2::bigint and time < 4;
 time | device_id | val 
------+-----------+-----
    3 |         3 |   1
(1 row)

SELECT *
FROM hyper
WHERE time = 3::bigint;
 time | device_id | val 
------+-----------+-----
    3 |         3 |   1
(1 row)

--- github issue 1855
--- TESTs for meta column pushdown filters on exprs with casts.
CREATE TABLE metaseg_tab (
fmid smallint,
factorid smallint,
start_dt timestamp without time zone,
end_dt timestamp without time zone,
interval_number smallint,
logret double precision,
knowledge_date date NOT NULL
);
SELECT create_hypertable('metaseg_tab', 'end_dt', chunk_time_interval=>interval '1 month', create_default_indexes=>false);
WARNING:  column type "timestamp without time zone" used for "start_dt" does not follow best practices
WARNING:  column type "timestamp without time zone" used for "end_dt" does not follow best practices
NOTICE:  adding not-null constraint to column "end_dt"
    create_hypertable     
--------------------------
 (3,public,metaseg_tab,t)
(1 row)

SELECT add_dimension('metaseg_tab', 'fmid', chunk_time_interval => 1);
NOTICE:  adding not-null constraint to column "fmid"
         add_dimension         
-------------------------------
 (3,public,metaseg_tab,fmid,t)
(1 row)

ALTER TABLE metaseg_tab SET (timescaledb.compress, timescaledb.compress_orderby= 'end_dt');
WARNING:  there was some uncertainty picking the default segment by for the hypertable: You do not have any indexes on columns that can be used for segment_by and thus we are not using segment_by for compression. Please make sure you are not missing any indexes
NOTICE:  default segment by for hypertable "metaseg_tab" is set to ""
INSERT INTO metaseg_tab values (56,0,'2012-12-10 09:45:00','2012-12-10 09:50:00',1,0.1,'2012-12-10');
SELECT compress_chunk(i) from show_chunks('metaseg_tab') i;
             compress_chunk             
----------------------------------------
 _timescaledb_internal._hyper_3_4_chunk
(1 row)

select factorid, end_dt, logret
from metaseg_tab
where fmid = 56
and end_dt between '2012-12-10'::date and '2012-12-11'::date
order by factorid, end_dt;
 factorid |          end_dt          | logret 
----------+--------------------------+--------
        0 | Mon Dec 10 09:50:00 2012 |    0.1
(1 row)

explain (costs off, verbose)
select factorid, end_dt, logret
from metaseg_tab
where fmid = 56
and end_dt between '2012-12-10'::date and '2012-12-11'::date
order by factorid, end_dt;
                                                                                                                                                                                                QUERY PLAN                                                                                                                                                                                                 
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: _hyper_3_4_chunk.factorid, _hyper_3_4_chunk.end_dt, _hyper_3_4_chunk.logret
   Sort Key: _hyper_3_4_chunk.factorid, _hyper_3_4_chunk.end_dt
   ->  Custom Scan (DecompressChunk) on _timescaledb_internal._hyper_3_4_chunk
         Output: _hyper_3_4_chunk.factorid, _hyper_3_4_chunk.end_dt, _hyper_3_4_chunk.logret
         Filter: ((_hyper_3_4_chunk.end_dt >= '12-10-2012'::date) AND (_hyper_3_4_chunk.end_dt <= '12-11-2012'::date))
         Vectorized Filter: (_hyper_3_4_chunk.fmid = 56)
         ->  Seq Scan on _timescaledb_internal.compress_hyper_4_5_chunk
               Output: compress_hyper_4_5_chunk._ts_meta_count, compress_hyper_4_5_chunk.fmid, compress_hyper_4_5_chunk.factorid, compress_hyper_4_5_chunk.start_dt, compress_hyper_4_5_chunk._ts_meta_min_1, compress_hyper_4_5_chunk._ts_meta_max_1, compress_hyper_4_5_chunk.end_dt, compress_hyper_4_5_chunk.interval_number, compress_hyper_4_5_chunk.logret, compress_hyper_4_5_chunk.knowledge_date
               Filter: ((compress_hyper_4_5_chunk._ts_meta_max_1 >= '12-10-2012'::date) AND (compress_hyper_4_5_chunk._ts_meta_min_1 <= '12-11-2012'::date))
(10 rows)

--no pushdown here
select factorid, end_dt, logret
from metaseg_tab
where fmid = 56
and end_dt::date between '2012-12-10'::timestamp and '2012-12-11'::date
order by factorid, end_dt;
 factorid |          end_dt          | logret 
----------+--------------------------+--------
        0 | Mon Dec 10 09:50:00 2012 |    0.1
(1 row)

explain (costs off, verbose)
select factorid, end_dt, logret
from metaseg_tab
where fmid = 56
and end_dt::date between '2012-12-10'::timestamp and '2012-12-11'::date
order by factorid, end_dt;
                                                                                                                                                                                                QUERY PLAN                                                                                                                                                                                                 
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: _hyper_3_4_chunk.factorid, _hyper_3_4_chunk.end_dt, _hyper_3_4_chunk.logret
   Sort Key: _hyper_3_4_chunk.factorid, _hyper_3_4_chunk.end_dt
   ->  Custom Scan (DecompressChunk) on _timescaledb_internal._hyper_3_4_chunk
         Output: _hyper_3_4_chunk.factorid, _hyper_3_4_chunk.end_dt, _hyper_3_4_chunk.logret
         Filter: (((_hyper_3_4_chunk.end_dt)::date >= 'Mon Dec 10 00:00:00 2012'::timestamp without time zone) AND ((_hyper_3_4_chunk.end_dt)::date <= '12-11-2012'::date))
         Vectorized Filter: (_hyper_3_4_chunk.fmid = 56)
         ->  Seq Scan on _timescaledb_internal.compress_hyper_4_5_chunk
               Output: compress_hyper_4_5_chunk._ts_meta_count, compress_hyper_4_5_chunk.fmid, compress_hyper_4_5_chunk.factorid, compress_hyper_4_5_chunk.start_dt, compress_hyper_4_5_chunk._ts_meta_min_1, compress_hyper_4_5_chunk._ts_meta_max_1, compress_hyper_4_5_chunk.end_dt, compress_hyper_4_5_chunk.interval_number, compress_hyper_4_5_chunk.logret, compress_hyper_4_5_chunk.knowledge_date
(9 rows)

--should fail
\set ON_ERROR_STOP 0
select factorid, end_dt, logret
from metaseg_tab
where fmid = 56
and end_dt::date = 10;
ERROR:  operator does not exist: date = integer at character 83
select factorid, end_dt, logret
from metaseg_tab
where fmid = 56
and end_dt::date = 'dec 2010'::date;
ERROR:  invalid input syntax for type date: "dec 2010" at character 85
-- test casts between different char types are pushed down
CREATE TABLE pushdown_relabel(time timestamptz NOT NULL, dev_vc varchar(10), dev_c char(10));
SELECT table_name FROM create_hypertable('pushdown_relabel', 'time');
WARNING:  column type "character varying" used for "dev_vc" does not follow best practices
    table_name    
------------------
 pushdown_relabel
(1 row)

ALTER TABLE pushdown_relabel SET (timescaledb.compress, timescaledb.compress_segmentby='dev_vc,dev_c');
NOTICE:  default order by for hypertable "pushdown_relabel" is set to ""time" DESC"
INSERT INTO pushdown_relabel SELECT '2000-01-01','varchar','char';
SELECT compress_chunk(i) from show_chunks('pushdown_relabel') i;
             compress_chunk             
----------------------------------------
 _timescaledb_internal._hyper_5_6_chunk
(1 row)

ANALYZE pushdown_relabel;
EXPLAIN (costs off) SELECT * FROM pushdown_relabel WHERE dev_vc = 'varchar';
                     QUERY PLAN                     
----------------------------------------------------
 Custom Scan (DecompressChunk) on _hyper_5_6_chunk
   ->  Seq Scan on compress_hyper_6_7_chunk
         Filter: ((dev_vc)::text = 'varchar'::text)
(3 rows)

EXPLAIN (costs off) SELECT * FROM pushdown_relabel WHERE dev_c = 'char';
                    QUERY PLAN                     
---------------------------------------------------
 Custom Scan (DecompressChunk) on _hyper_5_6_chunk
   ->  Seq Scan on compress_hyper_6_7_chunk
         Filter: (dev_c = 'char'::bpchar)
(3 rows)

EXPLAIN (costs off) SELECT * FROM pushdown_relabel WHERE dev_vc = 'varchar' AND dev_c = 'char';
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Custom Scan (DecompressChunk) on _hyper_5_6_chunk
   ->  Seq Scan on compress_hyper_6_7_chunk
         Filter: (((dev_vc)::text = 'varchar'::text) AND (dev_c = 'char'::bpchar))
(3 rows)

EXPLAIN (costs off) SELECT * FROM pushdown_relabel WHERE dev_vc = 'varchar'::char(10) AND dev_c = 'char'::varchar;
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Custom Scan (DecompressChunk) on _hyper_5_6_chunk
   ->  Seq Scan on compress_hyper_6_7_chunk
         Filter: (((dev_vc)::bpchar = 'varchar   '::character(10)) AND (dev_c = 'char'::bpchar))
(3 rows)

-- test again with index scans
SET enable_seqscan TO false;
EXPLAIN (costs off) SELECT * FROM pushdown_relabel WHERE dev_vc = 'varchar';
                                                     QUERY PLAN                                                     
--------------------------------------------------------------------------------------------------------------------
 Custom Scan (DecompressChunk) on _hyper_5_6_chunk
   ->  Index Scan using compress_hyper_6_7_chunk_dev_vc_dev_c__ts_meta_min_1__ts_me_idx on compress_hyper_6_7_chunk
         Index Cond: ((dev_vc)::text = 'varchar'::text)
(3 rows)

EXPLAIN (costs off) SELECT * FROM pushdown_relabel WHERE dev_c = 'char';
                                                     QUERY PLAN                                                     
--------------------------------------------------------------------------------------------------------------------
 Custom Scan (DecompressChunk) on _hyper_5_6_chunk
   ->  Index Scan using compress_hyper_6_7_chunk_dev_vc_dev_c__ts_meta_min_1__ts_me_idx on compress_hyper_6_7_chunk
         Index Cond: (dev_c = 'char'::bpchar)
(3 rows)

EXPLAIN (costs off) SELECT * FROM pushdown_relabel WHERE dev_vc = 'varchar' AND dev_c = 'char';
                                                     QUERY PLAN                                                     
--------------------------------------------------------------------------------------------------------------------
 Custom Scan (DecompressChunk) on _hyper_5_6_chunk
   ->  Index Scan using compress_hyper_6_7_chunk_dev_vc_dev_c__ts_meta_min_1__ts_me_idx on compress_hyper_6_7_chunk
         Index Cond: (((dev_vc)::text = 'varchar'::text) AND (dev_c = 'char'::bpchar))
(3 rows)

EXPLAIN (costs off) SELECT * FROM pushdown_relabel WHERE dev_vc = 'varchar'::char(10) AND dev_c = 'char'::varchar;
                                                     QUERY PLAN                                                     
--------------------------------------------------------------------------------------------------------------------
 Custom Scan (DecompressChunk) on _hyper_5_6_chunk
   ->  Index Scan using compress_hyper_6_7_chunk_dev_vc_dev_c__ts_meta_min_1__ts_me_idx on compress_hyper_6_7_chunk
         Index Cond: (dev_c = 'char'::bpchar)
         Filter: ((dev_vc)::bpchar = 'varchar   '::character(10))
(4 rows)

-- github issue #5286
CREATE TABLE deleteme AS
    SELECT generate_series AS timestamp, 1 AS segment, 0 AS data
        FROM generate_series('2008-03-01 00:00'::timestamp with time zone,
                             '2008-03-04 12:00', '1 second');
SELECT create_hypertable('deleteme', 'timestamp', migrate_data => true);
NOTICE:  adding not-null constraint to column "timestamp"
NOTICE:  migrating data to chunks
   create_hypertable   
-----------------------
 (7,public,deleteme,t)
(1 row)

ALTER TABLE deleteme SET (
  timescaledb.compress,
  timescaledb.compress_segmentby = 'segment'
);
NOTICE:  default order by for hypertable "deleteme" is set to ""timestamp" DESC"
SELECT compress_chunk(i) FROM show_chunks('deleteme') i;
             compress_chunk             
----------------------------------------
 _timescaledb_internal._hyper_7_8_chunk
(1 row)

EXPLAIN (costs off) SELECT sum(data) FROM deleteme WHERE segment::text like '%4%';
                       QUERY PLAN                        
---------------------------------------------------------
 Aggregate
   ->  Custom Scan (DecompressChunk) on _hyper_7_8_chunk
         ->  Seq Scan on compress_hyper_8_9_chunk
               Filter: ((segment)::text ~~ '%4%'::text)
(4 rows)

EXPLAIN (costs off) SELECT sum(data) FROM deleteme WHERE '4' = segment::text;
                       QUERY PLAN                        
---------------------------------------------------------
 Aggregate
   ->  Custom Scan (DecompressChunk) on _hyper_7_8_chunk
         ->  Seq Scan on compress_hyper_8_9_chunk
               Filter: ('4'::text = (segment)::text)
(4 rows)

CREATE TABLE deleteme_with_bytea(time bigint NOT NULL, bdata bytea);
SELECT create_hypertable('deleteme_with_bytea', 'time', chunk_time_interval => 1000000);
        create_hypertable         
----------------------------------
 (9,public,deleteme_with_bytea,t)
(1 row)

INSERT INTO deleteme_with_bytea(time, bdata) VALUES (1001, E'\\x');
INSERT INTO deleteme_with_bytea(time, bdata) VALUES (1001, NULL);
ALTER TABLE deleteme_with_bytea SET (
  timescaledb.compress,
  timescaledb.compress_segmentby = 'bdata'
);
NOTICE:  default order by for hypertable "deleteme_with_bytea" is set to ""time" DESC"
SELECT compress_chunk(i) FROM show_chunks('deleteme_with_bytea') i;
             compress_chunk              
-----------------------------------------
 _timescaledb_internal._hyper_9_10_chunk
(1 row)

EXPLAIN (costs off) SELECT '1' FROM deleteme_with_bytea WHERE bdata = E'\\x';
                                                         QUERY PLAN                                                         
----------------------------------------------------------------------------------------------------------------------------
 Result
   ->  Custom Scan (DecompressChunk) on _hyper_9_10_chunk
         ->  Index Scan using compress_hyper_10_11_chunk_bdata__ts_meta_min_1__ts_meta_ma_idx on compress_hyper_10_11_chunk
               Index Cond: (bdata = '\x'::bytea)
(4 rows)

EXPLAIN (costs off) SELECT '1' FROM deleteme_with_bytea WHERE bdata::text = '123';
                        QUERY PLAN                        
----------------------------------------------------------
 Result
   ->  Custom Scan (DecompressChunk) on _hyper_9_10_chunk
         ->  Seq Scan on compress_hyper_10_11_chunk
               Filter: ((bdata)::text = '123'::text)
(4 rows)

DROP table deleteme;
DROP table deleteme_with_bytea;
-- test sqlvaluefunction pushdown
CREATE TABLE svf_pushdown(time timestamptz, c_date date, c_time time, c_timetz timetz, c_timestamp timestamptz, c_name text, c_bool bool);
SELECT table_name FROM create_hypertable('svf_pushdown', 'time');
NOTICE:  adding not-null constraint to column "time"
  table_name  
--------------
 svf_pushdown
(1 row)

ALTER TABLE svf_pushdown SET (timescaledb.compress,timescaledb.compress_segmentby='c_date,c_time, c_timetz,c_timestamp,c_name,c_bool');
NOTICE:  default order by for hypertable "svf_pushdown" is set to ""time" DESC"
INSERT INTO svf_pushdown SELECT '2020-01-01';
SELECT compress_chunk(show_chunks('svf_pushdown'));
              compress_chunk              
------------------------------------------
 _timescaledb_internal._hyper_11_12_chunk
(1 row)

-- constraints should be pushed down into scan below decompresschunk in all cases
EXPLAIN (costs off) SELECT * FROM svf_pushdown WHERE c_date = CURRENT_DATE;
                                                         QUERY PLAN                                                         
----------------------------------------------------------------------------------------------------------------------------
 Custom Scan (ChunkAppend) on svf_pushdown
   Chunks excluded during startup: 0
   ->  Custom Scan (DecompressChunk) on _hyper_11_12_chunk
         ->  Index Scan using compress_hyper_12_13_chunk_c_date_c_time_c_timetz_c_timesta_idx on compress_hyper_12_13_chunk
               Index Cond: (c_date = CURRENT_DATE)
(5 rows)

EXPLAIN (costs off) SELECT * FROM svf_pushdown WHERE c_timetz = CURRENT_TIME;
                                                         QUERY PLAN                                                         
----------------------------------------------------------------------------------------------------------------------------
 Custom Scan (ChunkAppend) on svf_pushdown
   Chunks excluded during startup: 0
   ->  Custom Scan (DecompressChunk) on _hyper_11_12_chunk
         ->  Index Scan using compress_hyper_12_13_chunk_c_date_c_time_c_timetz_c_timesta_idx on compress_hyper_12_13_chunk
               Index Cond: (c_timetz = CURRENT_TIME)
(5 rows)

EXPLAIN (costs off) SELECT * FROM svf_pushdown WHERE c_timetz = CURRENT_TIME(1);
                                                         QUERY PLAN                                                         
----------------------------------------------------------------------------------------------------------------------------
 Custom Scan (ChunkAppend) on svf_pushdown
   Chunks excluded during startup: 0
   ->  Custom Scan (DecompressChunk) on _hyper_11_12_chunk
         ->  Index Scan using compress_hyper_12_13_chunk_c_date_c_time_c_timetz_c_timesta_idx on compress_hyper_12_13_chunk
               Index Cond: (c_timetz = CURRENT_TIME(1))
(5 rows)

EXPLAIN (costs off) SELECT * FROM svf_pushdown WHERE c_timestamp = CURRENT_TIMESTAMP;
                                                         QUERY PLAN                                                         
----------------------------------------------------------------------------------------------------------------------------
 Custom Scan (ChunkAppend) on svf_pushdown
   Chunks excluded during startup: 0
   ->  Custom Scan (DecompressChunk) on _hyper_11_12_chunk
         ->  Index Scan using compress_hyper_12_13_chunk_c_date_c_time_c_timetz_c_timesta_idx on compress_hyper_12_13_chunk
               Index Cond: (c_timestamp = CURRENT_TIMESTAMP)
(5 rows)

EXPLAIN (costs off) SELECT * FROM svf_pushdown WHERE c_timestamp = CURRENT_TIMESTAMP(1);
                                                         QUERY PLAN                                                         
----------------------------------------------------------------------------------------------------------------------------
 Custom Scan (ChunkAppend) on svf_pushdown
   Chunks excluded during startup: 0
   ->  Custom Scan (DecompressChunk) on _hyper_11_12_chunk
         ->  Index Scan using compress_hyper_12_13_chunk_c_date_c_time_c_timetz_c_timesta_idx on compress_hyper_12_13_chunk
               Index Cond: (c_timestamp = CURRENT_TIMESTAMP(1))
(5 rows)

EXPLAIN (costs off) SELECT * FROM svf_pushdown WHERE c_time = LOCALTIME;
                                                         QUERY PLAN                                                         
----------------------------------------------------------------------------------------------------------------------------
 Custom Scan (ChunkAppend) on svf_pushdown
   Chunks excluded during startup: 0
   ->  Custom Scan (DecompressChunk) on _hyper_11_12_chunk
         ->  Index Scan using compress_hyper_12_13_chunk_c_date_c_time_c_timetz_c_timesta_idx on compress_hyper_12_13_chunk
               Index Cond: (c_time = LOCALTIME)
(5 rows)

EXPLAIN (costs off) SELECT * FROM svf_pushdown WHERE c_time = LOCALTIME(1);
                                                         QUERY PLAN                                                         
----------------------------------------------------------------------------------------------------------------------------
 Custom Scan (ChunkAppend) on svf_pushdown
   Chunks excluded during startup: 0
   ->  Custom Scan (DecompressChunk) on _hyper_11_12_chunk
         ->  Index Scan using compress_hyper_12_13_chunk_c_date_c_time_c_timetz_c_timesta_idx on compress_hyper_12_13_chunk
               Index Cond: (c_time = LOCALTIME(1))
(5 rows)

EXPLAIN (costs off) SELECT * FROM svf_pushdown WHERE c_timestamp = LOCALTIMESTAMP;
                                                         QUERY PLAN                                                         
----------------------------------------------------------------------------------------------------------------------------
 Custom Scan (ChunkAppend) on svf_pushdown
   Chunks excluded during startup: 0
   ->  Custom Scan (DecompressChunk) on _hyper_11_12_chunk
         ->  Index Scan using compress_hyper_12_13_chunk_c_date_c_time_c_timetz_c_timesta_idx on compress_hyper_12_13_chunk
               Index Cond: (c_timestamp = LOCALTIMESTAMP)
(5 rows)

EXPLAIN (costs off) SELECT * FROM svf_pushdown WHERE c_timestamp = LOCALTIMESTAMP(1);
                                                         QUERY PLAN                                                         
----------------------------------------------------------------------------------------------------------------------------
 Custom Scan (ChunkAppend) on svf_pushdown
   Chunks excluded during startup: 0
   ->  Custom Scan (DecompressChunk) on _hyper_11_12_chunk
         ->  Index Scan using compress_hyper_12_13_chunk_c_date_c_time_c_timetz_c_timesta_idx on compress_hyper_12_13_chunk
               Index Cond: (c_timestamp = LOCALTIMESTAMP(1))
(5 rows)

EXPLAIN (costs off) SELECT * FROM svf_pushdown WHERE c_name = USER;
                        QUERY PLAN                         
-----------------------------------------------------------
 Custom Scan (ChunkAppend) on svf_pushdown
   Chunks excluded during startup: 0
   ->  Custom Scan (DecompressChunk) on _hyper_11_12_chunk
         ->  Seq Scan on compress_hyper_12_13_chunk
               Filter: (c_name = USER)
(5 rows)

EXPLAIN (costs off) SELECT * FROM svf_pushdown WHERE c_name = CURRENT_USER;
                        QUERY PLAN                         
-----------------------------------------------------------
 Custom Scan (ChunkAppend) on svf_pushdown
   Chunks excluded during startup: 0
   ->  Custom Scan (DecompressChunk) on _hyper_11_12_chunk
         ->  Seq Scan on compress_hyper_12_13_chunk
               Filter: (c_name = CURRENT_USER)
(5 rows)

EXPLAIN (costs off) SELECT * FROM svf_pushdown WHERE c_name = SESSION_USER;
                        QUERY PLAN                         
-----------------------------------------------------------
 Custom Scan (ChunkAppend) on svf_pushdown
   Chunks excluded during startup: 0
   ->  Custom Scan (DecompressChunk) on _hyper_11_12_chunk
         ->  Seq Scan on compress_hyper_12_13_chunk
               Filter: (c_name = SESSION_USER)
(5 rows)

EXPLAIN (costs off) SELECT * FROM svf_pushdown WHERE c_name = CURRENT_USER OR c_name = SESSION_USER;
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 Custom Scan (ChunkAppend) on svf_pushdown
   Chunks excluded during startup: 0
   ->  Custom Scan (DecompressChunk) on _hyper_11_12_chunk
         ->  Seq Scan on compress_hyper_12_13_chunk
               Filter: ((c_name = CURRENT_USER) OR (c_name = SESSION_USER))
(5 rows)

EXPLAIN (costs off) SELECT * FROM svf_pushdown WHERE c_name = CURRENT_CATALOG;
                        QUERY PLAN                         
-----------------------------------------------------------
 Custom Scan (ChunkAppend) on svf_pushdown
   Chunks excluded during startup: 0
   ->  Custom Scan (DecompressChunk) on _hyper_11_12_chunk
         ->  Seq Scan on compress_hyper_12_13_chunk
               Filter: (c_name = CURRENT_CATALOG)
(5 rows)

EXPLAIN (costs off) SELECT * FROM svf_pushdown WHERE c_name = CURRENT_SCHEMA;
                        QUERY PLAN                         
-----------------------------------------------------------
 Custom Scan (ChunkAppend) on svf_pushdown
   Chunks excluded during startup: 0
   ->  Custom Scan (DecompressChunk) on _hyper_11_12_chunk
         ->  Seq Scan on compress_hyper_12_13_chunk
               Filter: (c_name = CURRENT_SCHEMA)
(5 rows)

EXPLAIN (costs off) SELECT * FROM svf_pushdown WHERE c_bool;
                                                      QUERY PLAN                                                      
----------------------------------------------------------------------------------------------------------------------
 Custom Scan (DecompressChunk) on _hyper_11_12_chunk
   ->  Index Scan using compress_hyper_12_13_chunk_c_date_c_time_c_timetz_c_timesta_idx on compress_hyper_12_13_chunk
         Index Cond: (c_bool = true)
(3 rows)

EXPLAIN (costs off) SELECT * FROM svf_pushdown WHERE c_bool = true;
                                                      QUERY PLAN                                                      
----------------------------------------------------------------------------------------------------------------------
 Custom Scan (DecompressChunk) on _hyper_11_12_chunk
   ->  Index Scan using compress_hyper_12_13_chunk_c_date_c_time_c_timetz_c_timesta_idx on compress_hyper_12_13_chunk
         Index Cond: (c_bool = true)
(3 rows)

EXPLAIN (costs off) SELECT * FROM svf_pushdown WHERE c_bool = false;
                                                      QUERY PLAN                                                      
----------------------------------------------------------------------------------------------------------------------
 Custom Scan (DecompressChunk) on _hyper_11_12_chunk
   ->  Index Scan using compress_hyper_12_13_chunk_c_date_c_time_c_timetz_c_timesta_idx on compress_hyper_12_13_chunk
         Index Cond: (c_bool = false)
(3 rows)

EXPLAIN (costs off) SELECT * FROM svf_pushdown WHERE NOT c_bool;
                                                      QUERY PLAN                                                      
----------------------------------------------------------------------------------------------------------------------
 Custom Scan (DecompressChunk) on _hyper_11_12_chunk
   ->  Index Scan using compress_hyper_12_13_chunk_c_date_c_time_c_timetz_c_timesta_idx on compress_hyper_12_13_chunk
         Index Cond: (c_bool = false)
(3 rows)

-- current_query() is not a sqlvaluefunction and volatile so should not be pushed down
EXPLAIN (costs off) SELECT * FROM svf_pushdown WHERE c_name = current_query();
                        QUERY PLAN                         
-----------------------------------------------------------
 Custom Scan (ChunkAppend) on svf_pushdown
   Chunks excluded during startup: 0
   ->  Custom Scan (DecompressChunk) on _hyper_11_12_chunk
         Filter: (c_name = current_query())
         ->  Seq Scan on compress_hyper_12_13_chunk
(5 rows)

-- test or constraints in lateral query #6912
SELECT FROM svf_pushdown m1,
LATERAL(
  SELECT FROM svf_pushdown m2
  WHERE
    m1.time = m2.time AND
    EXISTS (SELECT random()) OR
    EXISTS (SELECT FROM meta) LIMIT 1
) l;
--
(1 row)

