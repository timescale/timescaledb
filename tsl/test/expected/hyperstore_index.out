-- This file and its contents are licensed under the Timescale License.
-- Please see the included NOTICE for copyright information and
-- LICENSE-TIMESCALE for a copy of the license.
\ir include/setup_hyperstore.sql
-- This file and its contents are licensed under the Timescale License.
-- Please see the included NOTICE for copyright information and
-- LICENSE-TIMESCALE for a copy of the license.
\set hypertable readings
-- Alternative function to compress_chunk that uses the table access
-- method to compress a chunk.
create function twist_chunk(chunk regclass) returns regclass language plpgsql
as $$
begin
    execute format('alter table %s set access method hyperstore', chunk);
    return chunk;
end
$$;
create function untwist_chunk(chunk regclass) returns regclass language plpgsql
as $$
begin
    execute format('alter table %s set access method heap', chunk);
    return chunk;
end
$$;
create table :hypertable(
       metric_id serial,
       created_at timestamptz not null unique,
       location_id int,		--segmentby attribute with index
       owner_id int,		--segmentby attribute without index
       device_id int,		--non-segmentby attribute
       temp float,
       humidity float
);
create index hypertable_location_id_idx on :hypertable (location_id);
create index hypertable_device_id_idx on :hypertable (device_id);
select create_hypertable(:'hypertable', by_range('created_at'));
 create_hypertable 
-------------------
 (1,t)
(1 row)

-- Disable incremental sort to make tests stable
set enable_incremental_sort = false;
select setseed(1);
 setseed 
---------
 
(1 row)

-- Insert rows into the tables.
--
-- The timestamps for the original rows will have timestamps every 10
-- seconds. Any other timestamps are inserted as part of the test.
insert into :hypertable (created_at, location_id, owner_id, device_id, temp, humidity)
select t, ceil(random()*10), ceil(random()*30), ceil(random() * 5), random()*40, random()*100
from generate_series('2022-06-01'::timestamptz, '2022-07-01', '10s') t;
alter table :hypertable set (
	  timescaledb.compress,
	  timescaledb.compress_orderby = 'created_at',
	  timescaledb.compress_segmentby = 'location_id, owner_id'
);
-- Get some test chunks as global variables (first and last chunk here)
select format('%I.%I', chunk_schema, chunk_name)::regclass as chunk1
  from timescaledb_information.chunks
 where format('%I.%I', hypertable_schema, hypertable_name)::regclass = :'hypertable'::regclass
 order by chunk1 asc
 limit 1 \gset
select format('%I.%I', chunk_schema, chunk_name)::regclass as chunk2
  from timescaledb_information.chunks
 where format('%I.%I', hypertable_schema, hypertable_name)::regclass = :'hypertable'::regclass
 order by chunk2 asc
 limit 1 offset 1 \gset
create view chunk_indexes as
select ch::regclass as chunk, indexrelid::regclass as index, attname
from pg_attribute att inner join pg_index ind
on (att.attrelid=ind.indrelid and att.attnum=ind.indkey[0])
inner join show_chunks(:'hypertable') ch on (ch = att.attrelid)
order by chunk, index;
-- save some reference data from an index (only) scan
explain (costs off)
select location_id, count(*) into orig from :hypertable
where location_id in (3,4,5) group by location_id;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Finalize GroupAggregate
   Group Key: _hyper_1_1_chunk.location_id
   ->  Sort
         Sort Key: _hyper_1_1_chunk.location_id
         ->  Append
               ->  Partial GroupAggregate
                     Group Key: _hyper_1_1_chunk.location_id
                     ->  Index Only Scan using _hyper_1_1_chunk_hypertable_location_id_idx on _hyper_1_1_chunk
                           Index Cond: (location_id = ANY ('{3,4,5}'::integer[]))
               ->  Partial GroupAggregate
                     Group Key: _hyper_1_2_chunk.location_id
                     ->  Index Only Scan using _hyper_1_2_chunk_hypertable_location_id_idx on _hyper_1_2_chunk
                           Index Cond: (location_id = ANY ('{3,4,5}'::integer[]))
               ->  Partial GroupAggregate
                     Group Key: _hyper_1_3_chunk.location_id
                     ->  Index Only Scan using _hyper_1_3_chunk_hypertable_location_id_idx on _hyper_1_3_chunk
                           Index Cond: (location_id = ANY ('{3,4,5}'::integer[]))
               ->  Partial GroupAggregate
                     Group Key: _hyper_1_4_chunk.location_id
                     ->  Index Only Scan using _hyper_1_4_chunk_hypertable_location_id_idx on _hyper_1_4_chunk
                           Index Cond: (location_id = ANY ('{3,4,5}'::integer[]))
               ->  Partial GroupAggregate
                     Group Key: _hyper_1_5_chunk.location_id
                     ->  Index Only Scan using _hyper_1_5_chunk_hypertable_location_id_idx on _hyper_1_5_chunk
                           Index Cond: (location_id = ANY ('{3,4,5}'::integer[]))
               ->  Partial GroupAggregate
                     Group Key: _hyper_1_6_chunk.location_id
                     ->  Index Only Scan using _hyper_1_6_chunk_hypertable_location_id_idx on _hyper_1_6_chunk
                           Index Cond: (location_id = ANY ('{3,4,5}'::integer[]))
(29 rows)

select location_id, count(*) into orig from :hypertable
where location_id in (3,4,5) group by location_id;
-- show index size before switching to hyperstore
select index, pg_relation_size(index)
from chunk_indexes
where chunk=:'chunk2'::regclass and (attname='location_id' or attname='device_id' or attname='owner_id');
                               index                               | pg_relation_size 
-------------------------------------------------------------------+------------------
 _timescaledb_internal._hyper_1_2_chunk_hypertable_location_id_idx |           425984
 _timescaledb_internal._hyper_1_2_chunk_hypertable_device_id_idx   |           425984
(2 rows)

alter table :chunk2 set access method hyperstore;
-- count without indexes
select owner_id, count(*) into owner_orig from :hypertable
where owner_id in (3,4,5) group by owner_id;
-- create indexes on all segmentby columns
create index hypertable_owner_idx on :hypertable (owner_id);
create index hypertable_location_id_owner_id_idx on :hypertable (location_id, owner_id);
-- Result should be the same with indexes
explain (costs off)
select owner_id, count(*) into owner_comp from :hypertable
where owner_id in (3,4,5) group by owner_id;
                                               QUERY PLAN                                                
---------------------------------------------------------------------------------------------------------
 Finalize GroupAggregate
   Group Key: _hyper_1_1_chunk.owner_id
   ->  Sort
         Sort Key: _hyper_1_1_chunk.owner_id
         ->  Append
               ->  Partial GroupAggregate
                     Group Key: _hyper_1_1_chunk.owner_id
                     ->  Index Only Scan using _hyper_1_1_chunk_hypertable_owner_idx on _hyper_1_1_chunk
                           Index Cond: (owner_id = ANY ('{3,4,5}'::integer[]))
               ->  Partial GroupAggregate
                     Group Key: _hyper_1_2_chunk.owner_id
                     ->  Index Scan using _hyper_1_2_chunk_hypertable_owner_idx on _hyper_1_2_chunk
                           Index Cond: (owner_id = ANY ('{3,4,5}'::integer[]))
               ->  Partial GroupAggregate
                     Group Key: _hyper_1_3_chunk.owner_id
                     ->  Index Only Scan using _hyper_1_3_chunk_hypertable_owner_idx on _hyper_1_3_chunk
                           Index Cond: (owner_id = ANY ('{3,4,5}'::integer[]))
               ->  Partial GroupAggregate
                     Group Key: _hyper_1_4_chunk.owner_id
                     ->  Index Only Scan using _hyper_1_4_chunk_hypertable_owner_idx on _hyper_1_4_chunk
                           Index Cond: (owner_id = ANY ('{3,4,5}'::integer[]))
               ->  Partial GroupAggregate
                     Group Key: _hyper_1_5_chunk.owner_id
                     ->  Index Only Scan using _hyper_1_5_chunk_hypertable_owner_idx on _hyper_1_5_chunk
                           Index Cond: (owner_id = ANY ('{3,4,5}'::integer[]))
               ->  Partial GroupAggregate
                     Group Key: _hyper_1_6_chunk.owner_id
                     ->  Index Only Scan using _hyper_1_6_chunk_hypertable_owner_idx on _hyper_1_6_chunk
                           Index Cond: (owner_id = ANY ('{3,4,5}'::integer[]))
(29 rows)

select owner_id, count(*) into owner_comp from :hypertable
where owner_id in (3,4,5) group by owner_id;
select * from owner_orig join owner_comp using (owner_id) where owner_orig.count != owner_comp.count;
 owner_id | count | count 
----------+-------+-------
(0 rows)

-- the indexes on segmentby columns should be smaller on hyperstore
-- while the device_id index remains the same size
select index, pg_relation_size(index)
from chunk_indexes
where chunk=:'chunk2'::regclass and (attname='location_id' or attname='device_id' or attname='owner_id');
                                   index                                    | pg_relation_size 
----------------------------------------------------------------------------+------------------
 _timescaledb_internal._hyper_1_2_chunk_hypertable_location_id_idx          |            16384
 _timescaledb_internal._hyper_1_2_chunk_hypertable_device_id_idx            |           442368
 _timescaledb_internal._hyper_1_2_chunk_hypertable_owner_idx                |            16384
 _timescaledb_internal._hyper_1_2_chunk_hypertable_location_id_owner_id_idx |            16384
(4 rows)

-- the query should not use index-only scan on the hypestore chunk
-- (number 2) because it is not supported on segmentby indexes
explain (costs off)
select location_id, count(*) into comp from :hypertable
where location_id in (3,4,5) group by location_id;
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Finalize GroupAggregate
   Group Key: _hyper_1_1_chunk.location_id
   ->  Sort
         Sort Key: _hyper_1_1_chunk.location_id
         ->  Append
               ->  Partial GroupAggregate
                     Group Key: _hyper_1_1_chunk.location_id
                     ->  Index Only Scan using _hyper_1_1_chunk_hypertable_location_id_owner_id_idx on _hyper_1_1_chunk
                           Index Cond: (location_id = ANY ('{3,4,5}'::integer[]))
               ->  Partial GroupAggregate
                     Group Key: _hyper_1_2_chunk.location_id
                     ->  Index Scan using _hyper_1_2_chunk_hypertable_location_id_owner_id_idx on _hyper_1_2_chunk
                           Index Cond: (location_id = ANY ('{3,4,5}'::integer[]))
               ->  Partial GroupAggregate
                     Group Key: _hyper_1_3_chunk.location_id
                     ->  Index Only Scan using _hyper_1_3_chunk_hypertable_location_id_owner_id_idx on _hyper_1_3_chunk
                           Index Cond: (location_id = ANY ('{3,4,5}'::integer[]))
               ->  Partial GroupAggregate
                     Group Key: _hyper_1_4_chunk.location_id
                     ->  Index Only Scan using _hyper_1_4_chunk_hypertable_location_id_owner_id_idx on _hyper_1_4_chunk
                           Index Cond: (location_id = ANY ('{3,4,5}'::integer[]))
               ->  Partial GroupAggregate
                     Group Key: _hyper_1_5_chunk.location_id
                     ->  Index Only Scan using _hyper_1_5_chunk_hypertable_location_id_owner_id_idx on _hyper_1_5_chunk
                           Index Cond: (location_id = ANY ('{3,4,5}'::integer[]))
               ->  Partial GroupAggregate
                     Group Key: _hyper_1_6_chunk.location_id
                     ->  Index Only Scan using _hyper_1_6_chunk_hypertable_location_id_owner_id_idx on _hyper_1_6_chunk
                           Index Cond: (location_id = ANY ('{3,4,5}'::integer[]))
(29 rows)

-- result should be the same
select location_id, count(*) into comp from :hypertable where location_id in (3,4,5) group by location_id;
select * from orig join comp using (location_id) where orig.count != comp.count;
 location_id | count | count 
-------------+-------+-------
(0 rows)

--
-- test that indexes work after updates
--
select ctid, created_at, location_id, temp from :chunk2 order by location_id, created_at desc limit 2;
       ctid       |          created_at          | location_id |       temp       
------------------+------------------------------+-------------+------------------
 (2147483676,253) | Wed Jun 08 16:57:50 2022 PDT |           1 | 4.61673551524566
 (2147483683,280) | Wed Jun 08 16:56:40 2022 PDT |           1 | 38.0183806703047
(2 rows)

-- first update moves the value from the compressed rel to the non-compressed (seen via ctid)
update :hypertable set temp=1.0 where location_id=1 and created_at='Wed Jun 08 16:57:50 2022 PDT';
select ctid, created_at, location_id, temp from :chunk2 order by location_id, created_at desc limit 2;
       ctid       |          created_at          | location_id |       temp       
------------------+------------------------------+-------------+------------------
 (1,102)          | Wed Jun 08 16:57:50 2022 PDT |           1 |                1
 (2147483683,280) | Wed Jun 08 16:56:40 2022 PDT |           1 | 38.0183806703047
(2 rows)

-- second update should be a hot update (tuple in same block after update, as shown by ctid)
update :hypertable set temp=2.0 where location_id=1 and created_at='Wed Jun 08 16:57:50 2022 PDT';
select ctid, created_at, location_id, temp from :chunk2 order by location_id, created_at desc limit 2;
       ctid       |          created_at          | location_id |       temp       
------------------+------------------------------+-------------+------------------
 (1,103)          | Wed Jun 08 16:57:50 2022 PDT |           1 |                2
 (2147483683,280) | Wed Jun 08 16:56:40 2022 PDT |           1 | 38.0183806703047
(2 rows)

-- make sure query uses a segmentby index and returns the correct data for the update value
explain (costs off)
select created_at, location_id, temp from :chunk2 where location_id=1 and temp=2.0;
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Index Scan using _hyper_1_2_chunk_hypertable_location_id_owner_id_idx on _hyper_1_2_chunk
   Index Cond: (location_id = 1)
   Filter: (temp = '2'::double precision)
(3 rows)

select created_at, location_id, temp from :chunk2 where location_id=1 and temp=2.0;
          created_at          | location_id | temp 
------------------------------+-------------+------
 Wed Jun 08 16:57:50 2022 PDT |           1 |    2
(1 row)

