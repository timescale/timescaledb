-- This file and its contents are licensed under the Timescale License.
-- Please see the included NOTICE for copyright information and
-- LICENSE-TIMESCALE for a copy of the license.
select setseed(0.3);
 setseed 
---------
 
(1 row)

create table hyperdump (time timestamptz not null, device int, tempc float, tempf float generated always as (tempc * 2 + 30) stored, status text default 'idle');
select create_hypertable('hyperdump', by_range('time'), create_default_indexes => false);
 create_hypertable 
-------------------
 (1,t)
(1 row)

insert into hyperdump (time, device, tempc)
select t, ceil(random()*10), random()*60
from generate_series('2022-06-01'::timestamptz, '2022-07-01', '5m') t;
create index time_device_idx on hyperdump (device, time desc);
alter table hyperdump set (
      timescaledb.compress_orderby='time',
      timescaledb.compress_segmentby='device');
\set TEST_BASE_NAME hypercore_pgdump
SELECT
    format('%s/results/%s_results_original.out', :'TEST_OUTPUT_DIR', :'TEST_BASE_NAME') AS "TEST_RESULTS_ORIGINAL",
    format('%s/results/%s_results_restored.out', :'TEST_OUTPUT_DIR', :'TEST_BASE_NAME') AS "TEST_RESULTS_RESTORED" \gset
-- Save uncompressed table query output as a reference to compare against
\o :TEST_RESULTS_ORIGINAL
select * from hyperdump order by time, device;
\o
explain (costs off)
select * from hyperdump where device = 2 and time < '2022-06-03';
                                                 QUERY PLAN                                                 
------------------------------------------------------------------------------------------------------------
 Append
   ->  Index Scan using _hyper_1_1_chunk_time_device_idx on _hyper_1_1_chunk
         Index Cond: ((device = 2) AND ("time" < 'Fri Jun 03 00:00:00 2022 PDT'::timestamp with time zone))
   ->  Index Scan using _hyper_1_2_chunk_time_device_idx on _hyper_1_2_chunk
         Index Cond: ((device = 2) AND ("time" < 'Fri Jun 03 00:00:00 2022 PDT'::timestamp with time zone))
(5 rows)

-- Convert to hypercore
select compress_chunk(ch, hypercore_use_access_method=>true) from show_chunks('hyperdump') ch;
             compress_chunk             
----------------------------------------
 _timescaledb_internal._hyper_1_1_chunk
 _timescaledb_internal._hyper_1_2_chunk
 _timescaledb_internal._hyper_1_3_chunk
 _timescaledb_internal._hyper_1_4_chunk
 _timescaledb_internal._hyper_1_5_chunk
 _timescaledb_internal._hyper_1_6_chunk
(6 rows)

reindex table hyperdump;
explain (costs off)
select * from hyperdump where device = 2 and time < '2022-06-03';
                                                 QUERY PLAN                                                 
------------------------------------------------------------------------------------------------------------
 Append
   ->  Index Scan using _hyper_1_1_chunk_time_device_idx on _hyper_1_1_chunk
         Index Cond: ((device = 2) AND ("time" < 'Fri Jun 03 00:00:00 2022 PDT'::timestamp with time zone))
   ->  Index Scan using _hyper_1_2_chunk_time_device_idx on _hyper_1_2_chunk
         Index Cond: ((device = 2) AND ("time" < 'Fri Jun 03 00:00:00 2022 PDT'::timestamp with time zone))
(5 rows)

\set ON_ERROR_STOP 0
-- Test unsupported GUC values
set timescaledb.hypercore_copy_to_behavior=0;
ERROR:  invalid value for parameter "timescaledb.hypercore_copy_to_behavior": "0"
set timescaledb.hypercore_copy_to_behavior=null;
ERROR:  syntax error at or near "null" at character 44
set timescaledb.hypercore_copy_to_behavior='dummy';
ERROR:  invalid value for parameter "timescaledb.hypercore_copy_to_behavior": "dummy"
\set ON_ERROR_STOP 1
set timescaledb.hypercore_copy_to_behavior='all_data';
select chunk from show_chunks('hyperdump') chunk offset 2 limit 1 \gset
\d+ :chunk
                                                                   Table "_timescaledb_internal._hyper_1_3_chunk"
 Column |           Type           | Collation | Nullable |                                     Default                                     | Storage  | Stats target | Description 
--------+--------------------------+-----------+----------+---------------------------------------------------------------------------------+----------+--------------+-------------
 time   | timestamp with time zone |           | not null |                                                                                 | plain    |              | 
 device | integer                  |           |          |                                                                                 | plain    |              | 
 tempc  | double precision         |           |          |                                                                                 | plain    |              | 
 tempf  | double precision         |           |          | generated always as (tempc * 2::double precision + 30::double precision) stored | plain    |              | 
 status | text                     |           |          | 'idle'::text                                                                    | extended |              | 
Indexes:
    "_hyper_1_3_chunk_time_device_idx" btree (device, "time" DESC)
Check constraints:
    "constraint_3" CHECK ("time" >= 'Wed Jun 08 17:00:00 2022 PDT'::timestamp with time zone AND "time" < 'Wed Jun 15 17:00:00 2022 PDT'::timestamp with time zone)
Inherits: hyperdump

SELECT format('%I.%I', c2.schema_name, c2.table_name)::regclass AS cchunk
FROM _timescaledb_catalog.chunk c1
INNER JOIN _timescaledb_catalog.chunk c2
ON (c1.compressed_chunk_id = c2.id) offset 2 limit 1 \gset
-- This should not return any data when in this COPY mode.
copy :cchunk to stdout;
NOTICE:  skipping data for internal Hypercore relation "compress_hyper_2_9_chunk"
---
-- Create a "compressed" dump where only uncompressed data is
-- returned dumped via the TAM relation. The rest of the data is
-- dumped via the internal compressed relation. This is compatible
-- with compression without TAM.
--
-- When restoring from the compressed dump, it will create hypercore
-- relations that are also compressed.
--
\c postgres :ROLE_SUPERUSER
\! utils/pg_dump_aux_dump.sh dump/hypercore-dump-compress.sql -ctimescaledb.hypercore_copy_to_behavior='no_compressed_data'
\c :TEST_DBNAME
create extension timescaledb;
select timescaledb_pre_restore();
 timescaledb_pre_restore 
-------------------------
 t
(1 row)

\! utils/pg_dump_aux_restore.sh dump/hypercore-dump-compress.sql
select timescaledb_post_restore();
 timescaledb_post_restore 
--------------------------
 t
(1 row)

-- Background workers restarted by post restore, so stop again
select _timescaledb_functions.stop_background_workers();
 stop_background_workers 
-------------------------
 t
(1 row)

\c :TEST_DBNAME :ROLE_DEFAULT_PERM_USER
\o :TEST_RESULTS_RESTORED
select * from hyperdump order by time, device;
\o
select chunk from show_chunks('hyperdump') chunk offset 2 limit 1 \gset
\d+ hyperdump
                                                                              Table "public.hyperdump"
 Column |           Type           | Collation | Nullable |                                     Default                                     | Storage  | Stats target | Description 
--------+--------------------------+-----------+----------+---------------------------------------------------------------------------------+----------+--------------+-------------
 time   | timestamp with time zone |           | not null |                                                                                 | plain    |              | 
 device | integer                  |           |          |                                                                                 | plain    |              | 
 tempc  | double precision         |           |          |                                                                                 | plain    |              | 
 tempf  | double precision         |           |          | generated always as (tempc * 2::double precision + 30::double precision) stored | plain    |              | 
 status | text                     |           |          | 'idle'::text                                                                    | extended |              | 
Indexes:
    "time_device_idx" btree (device, "time" DESC)
Triggers:
    ts_insert_blocker BEFORE INSERT ON hyperdump FOR EACH ROW EXECUTE FUNCTION _timescaledb_functions.insert_blocker()
Child tables: _timescaledb_internal._hyper_1_1_chunk,
              _timescaledb_internal._hyper_1_2_chunk,
              _timescaledb_internal._hyper_1_3_chunk,
              _timescaledb_internal._hyper_1_4_chunk,
              _timescaledb_internal._hyper_1_5_chunk,
              _timescaledb_internal._hyper_1_6_chunk

\d+ :chunk
                                                                   Table "_timescaledb_internal._hyper_1_3_chunk"
 Column |           Type           | Collation | Nullable |                                     Default                                     | Storage  | Stats target | Description 
--------+--------------------------+-----------+----------+---------------------------------------------------------------------------------+----------+--------------+-------------
 time   | timestamp with time zone |           | not null |                                                                                 | plain    |              | 
 device | integer                  |           |          |                                                                                 | plain    |              | 
 tempc  | double precision         |           |          |                                                                                 | plain    |              | 
 tempf  | double precision         |           |          | generated always as (tempc * 2::double precision + 30::double precision) stored | plain    |              | 
 status | text                     |           |          | 'idle'::text                                                                    | extended |              | 
Indexes:
    "_hyper_1_3_chunk_time_device_idx" btree (device, "time" DESC)
Check constraints:
    "constraint_3" CHECK ("time" >= 'Wed Jun 08 17:00:00 2022 PDT'::timestamp with time zone AND "time" < 'Wed Jun 15 17:00:00 2022 PDT'::timestamp with time zone)
Inherits: hyperdump

explain (costs off)
select * from hyperdump where time < '2022-06-03';
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Append
   ->  Custom Scan (ColumnarScan) on _hyper_1_1_chunk
         Vectorized Filter: ("time" < 'Fri Jun 03 00:00:00 2022 PDT'::timestamp with time zone)
   ->  Custom Scan (ColumnarScan) on _hyper_1_2_chunk
         Vectorized Filter: ("time" < 'Fri Jun 03 00:00:00 2022 PDT'::timestamp with time zone)
(5 rows)

reindex table hyperdump;
explain (costs off)
select * from hyperdump where time < '2022-06-03';
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Append
   ->  Custom Scan (ColumnarScan) on _hyper_1_1_chunk
         Vectorized Filter: ("time" < 'Fri Jun 03 00:00:00 2022 PDT'::timestamp with time zone)
   ->  Custom Scan (ColumnarScan) on _hyper_1_2_chunk
         Vectorized Filter: ("time" < 'Fri Jun 03 00:00:00 2022 PDT'::timestamp with time zone)
(5 rows)

select format('\! diff -u --label "hypercore original" --label "hypercore restored" %s %s', :'TEST_RESULTS_ORIGINAL', :'TEST_RESULTS_RESTORED') as "DIFF_CMD" \gset
-- Original output and restored output should be the same, i.e., no
-- diff
:DIFF_CMD
SELECT format('%s/results/%s_results_restored_2.out', :'TEST_OUTPUT_DIR', :'TEST_BASE_NAME') AS "TEST_RESULTS_RESTORED" \gset
reindex table hyperdump;
explain (costs off)
select * from hyperdump where device = 2 and time < '2022-06-03';
                                                 QUERY PLAN                                                 
------------------------------------------------------------------------------------------------------------
 Append
   ->  Index Scan using _hyper_1_1_chunk_time_device_idx on _hyper_1_1_chunk
         Index Cond: ((device = 2) AND ("time" < 'Fri Jun 03 00:00:00 2022 PDT'::timestamp with time zone))
   ->  Index Scan using _hyper_1_2_chunk_time_device_idx on _hyper_1_2_chunk
         Index Cond: ((device = 2) AND ("time" < 'Fri Jun 03 00:00:00 2022 PDT'::timestamp with time zone))
(5 rows)

---
-- Create an "uncompressed" dump where _all_ data is dumped via the
-- TAM relation. No data is dumped via the internal compressed
-- relation. This dump is compatible with uncompressed hypertables.
--
-- When restoring from the uncompressed dump, it will create
-- hypercore relations that are also uncompressed.
--
\c postgres :ROLE_SUPERUSER
\! utils/pg_dump_aux_dump.sh dump/hypercore-dump-uncompress.sql -ctimescaledb.hypercore_copy_to_behavior='all_data'
\c :TEST_DBNAME
create extension timescaledb;
select timescaledb_pre_restore();
 timescaledb_pre_restore 
-------------------------
 t
(1 row)

\! utils/pg_dump_aux_restore.sh dump/hypercore-dump-uncompress.sql
select timescaledb_post_restore();
 timescaledb_post_restore 
--------------------------
 t
(1 row)

-- Background workers restarted by post restore, so stop again
select _timescaledb_functions.stop_background_workers();
 stop_background_workers 
-------------------------
 t
(1 row)

\c :TEST_DBNAME :ROLE_DEFAULT_PERM_USER
select chunk from show_chunks('hyperdump') chunk offset 2 limit 1 \gset
-- If restore is OK, and TAM is used, we should see a ColumnarScan
explain (costs off)
select * from hyperdump order by time, device limit 10;
                             QUERY PLAN                             
--------------------------------------------------------------------
 Limit
   ->  Sort
         Sort Key: _hyper_1_1_chunk."time", _hyper_1_1_chunk.device
         ->  Append
               ->  Custom Scan (ColumnarScan) on _hyper_1_1_chunk
               ->  Custom Scan (ColumnarScan) on _hyper_1_2_chunk
               ->  Custom Scan (ColumnarScan) on _hyper_1_3_chunk
               ->  Custom Scan (ColumnarScan) on _hyper_1_4_chunk
               ->  Custom Scan (ColumnarScan) on _hyper_1_5_chunk
               ->  Custom Scan (ColumnarScan) on _hyper_1_6_chunk
(10 rows)

--
-- After restore, the status of the compressed chunks should be
-- partial since, with an uncompressed dump, the restore inserts data
-- via the hypercore relation in uncompressed form.
select c1.table_name, c1.status from _timescaledb_catalog.chunk c1
join _timescaledb_catalog.chunk c2 on (c1.compressed_chunk_id = c2.id)
order by c2.table_name;
    table_name    | status 
------------------+--------
 _hyper_1_4_chunk |      9
 _hyper_1_5_chunk |      9
 _hyper_1_6_chunk |      9
 _hyper_1_1_chunk |      9
 _hyper_1_2_chunk |      9
 _hyper_1_3_chunk |      9
(6 rows)

-- Check that a compressed chunk holds no data
SELECT format('%I.%I', c2.schema_name, c2.table_name)::regclass AS cchunk
FROM _timescaledb_catalog.chunk c1
INNER JOIN _timescaledb_catalog.chunk c2
ON (c1.compressed_chunk_id = c2.id) offset 2 limit 1 \gset
-- Compressed relation should hold no data
select count(*) from :cchunk;
 count 
-------
     0
(1 row)

-- Compress all chunks
select compress_chunk(ch) from show_chunks('hyperdump') ch;
             compress_chunk             
----------------------------------------
 _timescaledb_internal._hyper_1_1_chunk
 _timescaledb_internal._hyper_1_2_chunk
 _timescaledb_internal._hyper_1_3_chunk
 _timescaledb_internal._hyper_1_4_chunk
 _timescaledb_internal._hyper_1_5_chunk
 _timescaledb_internal._hyper_1_6_chunk
(6 rows)

-- Data should now be compressed
select count(*) from :cchunk;
 count 
-------
    10
(1 row)

-- Output data to a file for comparison with original contents
\o :TEST_RESULTS_RESTORED
select * from hyperdump order by time, device;
\o
select format('\! diff -u --label "hypercore original" --label "hypercore restored" %s %s', :'TEST_RESULTS_ORIGINAL', :'TEST_RESULTS_RESTORED') as "DIFF_CMD" \gset
-- Outputs should be the same, i.e., no diff
:DIFF_CMD
