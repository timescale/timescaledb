-- This file and its contents are licensed under the Timescale License.
-- Please see the included NOTICE for copyright information and
-- LICENSE-TIMESCALE for a copy of the license.
-- Some primitive tests that show cost of DecompressChunk node so that we can
-- monitor the changes.
create table t(ts int, s text, c text);
select create_hypertable('t', 'ts');
NOTICE:  adding not-null constraint to column "ts"
 create_hypertable 
-------------------
 (1,public,t,t)
(1 row)

alter table t set (timescaledb.compress, timescaledb.compress_segmentby = 's',
    timescaledb.compress_orderby = 'ts');
insert into t select ts, ts % 10, ts::text from generate_series(1, 10000) ts;
select count(compress_chunk(x)) from show_chunks('t') x;
 count 
-------
     1
(1 row)

vacuum freeze analyze t;
explain select * from t;
                                       QUERY PLAN                                        
-----------------------------------------------------------------------------------------
 Custom Scan (ColumnarScan) on _hyper_1_1_chunk  (cost=0.11..101.10 rows=10000 width=68)
   ->  Seq Scan on compress_hyper_2_2_chunk  (cost=0.00..1.10 rows=10 width=78)
(2 rows)

explain select * from t where s = '1';
                                      QUERY PLAN                                       
---------------------------------------------------------------------------------------
 Custom Scan (ColumnarScan) on _hyper_1_1_chunk  (cost=1.12..11.12 rows=1000 width=68)
   ->  Seq Scan on compress_hyper_2_2_chunk  (cost=0.00..1.12 rows=1 width=78)
         Filter: (s = '1'::text)
(3 rows)

explain select * from t where c = '100';
                                       QUERY PLAN                                        
-----------------------------------------------------------------------------------------
 Custom Scan (ColumnarScan) on _hyper_1_1_chunk  (cost=0.11..101.10 rows=10000 width=68)
   Vectorized Filter: (c = '100'::text)
   ->  Seq Scan on compress_hyper_2_2_chunk  (cost=0.00..1.10 rows=10 width=78)
(3 rows)

explain select ts from t;
                                       QUERY PLAN                                       
----------------------------------------------------------------------------------------
 Custom Scan (ColumnarScan) on _hyper_1_1_chunk  (cost=0.11..101.10 rows=10000 width=4)
   ->  Seq Scan on compress_hyper_2_2_chunk  (cost=0.00..1.10 rows=10 width=44)
(2 rows)

explain select ts from t where s = '1';
                                      QUERY PLAN                                      
--------------------------------------------------------------------------------------
 Custom Scan (ColumnarScan) on _hyper_1_1_chunk  (cost=1.12..11.12 rows=1000 width=4)
   ->  Seq Scan on compress_hyper_2_2_chunk  (cost=0.00..1.12 rows=1 width=46)
         Filter: (s = '1'::text)
(3 rows)

explain select ts from t where c = '100';
                                       QUERY PLAN                                       
----------------------------------------------------------------------------------------
 Custom Scan (ColumnarScan) on _hyper_1_1_chunk  (cost=0.11..101.10 rows=10000 width=4)
   Vectorized Filter: (c = '100'::text)
   ->  Seq Scan on compress_hyper_2_2_chunk  (cost=0.00..1.10 rows=10 width=76)
(3 rows)

explain select ts, s from t;
                                       QUERY PLAN                                        
-----------------------------------------------------------------------------------------
 Custom Scan (ColumnarScan) on _hyper_1_1_chunk  (cost=0.11..101.10 rows=10000 width=36)
   ->  Seq Scan on compress_hyper_2_2_chunk  (cost=0.00..1.10 rows=10 width=46)
(2 rows)

explain select ts, s from t where s = '1';
                                      QUERY PLAN                                       
---------------------------------------------------------------------------------------
 Custom Scan (ColumnarScan) on _hyper_1_1_chunk  (cost=1.12..11.12 rows=1000 width=36)
   ->  Seq Scan on compress_hyper_2_2_chunk  (cost=0.00..1.12 rows=1 width=46)
         Filter: (s = '1'::text)
(3 rows)

explain select ts, s from t where c = '100';
                                       QUERY PLAN                                        
-----------------------------------------------------------------------------------------
 Custom Scan (ColumnarScan) on _hyper_1_1_chunk  (cost=0.11..101.10 rows=10000 width=36)
   Vectorized Filter: (c = '100'::text)
   ->  Seq Scan on compress_hyper_2_2_chunk  (cost=0.00..1.10 rows=10 width=78)
(3 rows)

-- Test estimation of compressed batch size using the _ts_meta_count stats.
create table estimate_count(time timestamptz, device int, value float);
select create_hypertable('estimate_count','time');
NOTICE:  adding not-null constraint to column "time"
      create_hypertable      
-----------------------------
 (3,public,estimate_count,t)
(1 row)

alter table estimate_count
  set (timescaledb.compress,
       timescaledb.compress_segmentby = 'device',
       timescaledb.compress_orderby   = 'time');
-- same batch sizes
insert into estimate_count
select t, d, 1
from generate_series('2025-01-01'::timestamptz,'2025-01-03','15 min') t,
  generate_series(1, 1000) d
;
select count(compress_chunk(c)) from show_chunks('estimate_count') c;
 count 
-------
     2
(1 row)

vacuum analyze estimate_count;
explain (analyze, timing off, summary off) select * from estimate_count;
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Append  (cost=0.04..2988.00 rows=193000 width=20) (actual rows=193000 loops=1)
   ->  Custom Scan (ColumnarScan) on _hyper_3_3_chunk  (cost=0.04..685.00 rows=64000 width=20) (actual rows=64000 loops=1)
         ->  Seq Scan on compress_hyper_4_5_chunk  (cost=0.00..45.00 rows=1000 width=88) (actual rows=1000 loops=1)
   ->  Custom Scan (ColumnarScan) on _hyper_3_4_chunk  (cost=0.05..1338.00 rows=129000 width=20) (actual rows=129000 loops=1)
         ->  Seq Scan on compress_hyper_4_6_chunk  (cost=0.00..48.00 rows=1000 width=88) (actual rows=1000 loops=1)
(5 rows)

-- different batch sizes
truncate estimate_count;
insert into estimate_count
select t, d, 2
from generate_series(1, 1000) d,
    lateral generate_series('2025-01-01'::timestamptz,'2025-01-03',
        interval '15 min' * (d % 10 + 1)) t
;
select count(compress_chunk(c)) from show_chunks('estimate_count') c;
 count 
-------
     2
(1 row)

vacuum analyze estimate_count;
explain (analyze, timing off, summary off) select * from estimate_count;
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Append  (cost=0.04..938.50 rows=57100 width=20) (actual rows=57100 loops=1)
   ->  Custom Scan (ColumnarScan) on _hyper_3_7_chunk  (cost=0.04..231.00 rows=19100 width=20) (actual rows=19100 loops=1)
         ->  Seq Scan on compress_hyper_4_9_chunk  (cost=0.00..40.00 rows=1000 width=88) (actual rows=1000 loops=1)
   ->  Custom Scan (ColumnarScan) on _hyper_3_8_chunk  (cost=0.04..422.00 rows=38000 width=20) (actual rows=38000 loops=1)
         ->  Seq Scan on compress_hyper_4_10_chunk  (cost=0.00..42.00 rows=1000 width=88) (actual rows=1000 loops=1)
(5 rows)

-- more different batch sizes
truncate estimate_count;
insert into estimate_count
select t, d, 2
from generate_series(1, 1000) d,
    lateral generate_series('2025-01-01'::timestamptz,'2025-01-03',
        interval '15 min' + interval '1 minute' * d) t
;
select count(compress_chunk(c)) from show_chunks('estimate_count') c;
 count 
-------
     2
(1 row)

vacuum analyze estimate_count;
explain (analyze, timing off, summary off) select * from estimate_count;
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Append  (cost=0.04..265.21 rows=12548 width=20) (actual rows=12559 loops=1)
   ->  Custom Scan (ColumnarScan) on _hyper_3_11_chunk  (cost=0.04..83.50 rows=4550 width=20) (actual rows=4553 loops=1)
         ->  Seq Scan on compress_hyper_4_13_chunk  (cost=0.00..38.00 rows=1000 width=88) (actual rows=1000 loops=1)
   ->  Custom Scan (ColumnarScan) on _hyper_3_12_chunk  (cost=0.04..118.97 rows=7997 width=20) (actual rows=8006 loops=1)
         ->  Seq Scan on compress_hyper_4_14_chunk  (cost=0.00..39.00 rows=1000 width=88) (actual rows=1000 loops=1)
(5 rows)

-- more different + one very frequent
truncate estimate_count;
insert into estimate_count
select t, d, 2
from generate_series(1, 1000) d,
    lateral generate_series('2025-01-01'::timestamptz,'2025-01-03',
        case when d % 2 = 0 then interval '10 min'
            else interval '15 min' + interval '1 minute' * d end) t
;
select count(compress_chunk(c)) from show_chunks('estimate_count') c;
 count 
-------
     2
(1 row)

vacuum analyze estimate_count;
explain (analyze, timing off, summary off) select * from estimate_count;
                                                          QUERY PLAN                                                           
-------------------------------------------------------------------------------------------------------------------------------
 Append  (cost=0.04..2348.10 rows=150807 width=20) (actual rows=150830 loops=1)
   ->  Custom Scan (ColumnarScan) on _hyper_3_15_chunk  (cost=0.04..545.81 rows=50281 width=20) (actual rows=50287 loops=1)
         ->  Seq Scan on compress_hyper_4_17_chunk  (cost=0.00..43.00 rows=1000 width=88) (actual rows=1000 loops=1)
   ->  Custom Scan (ColumnarScan) on _hyper_3_16_chunk  (cost=0.04..1048.26 rows=100526 width=20) (actual rows=100543 loops=1)
         ->  Seq Scan on compress_hyper_4_18_chunk  (cost=0.00..43.00 rows=1000 width=88) (actual rows=1000 loops=1)
(5 rows)

-- no statistics
truncate estimate_count;
vacuum analyze estimate_count;
insert into estimate_count
select t, d, 1
from generate_series('2025-01-01'::timestamptz,'2025-01-03','15 min') t,
  generate_series(1, 1000) d
;
select count(compress_chunk(c)) from show_chunks('estimate_count') c;
 count 
-------
     2
(1 row)

explain (analyze, timing off, summary off) select * from estimate_count;
                                                           QUERY PLAN                                                            
---------------------------------------------------------------------------------------------------------------------------------
 Append  (cost=0.02..134617.60 rows=8960000 width=20) (actual rows=193000 loops=1)
   ->  Custom Scan (ColumnarScan) on _hyper_3_19_chunk  (cost=0.02..44908.80 rows=4480000 width=20) (actual rows=64000 loops=1)
         ->  Seq Scan on compress_hyper_4_21_chunk  (cost=0.00..108.80 rows=4480 width=88) (actual rows=1000 loops=1)
   ->  Custom Scan (ColumnarScan) on _hyper_3_20_chunk  (cost=0.02..44908.80 rows=4480000 width=20) (actual rows=129000 loops=1)
         ->  Seq Scan on compress_hyper_4_22_chunk  (cost=0.00..108.80 rows=4480 width=88) (actual rows=1000 loops=1)
(5 rows)

