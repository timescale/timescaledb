-- This file and its contents are licensed under the Timescale License.
-- Please see the included NOTICE for copyright information and
-- LICENSE-TIMESCALE for a copy of the license.
CREATE TABLE IF NOT EXISTS data_integrity_snapshots (
    table_name text,
    snapshot_data jsonb
);
CREATE OR REPLACE FUNCTION capture_data_snapshot(p_chunk regclass)
RETURNS void AS $$
DECLARE
    sql text;
BEGIN
    DELETE FROM data_integrity_snapshots
    WHERE table_name = p_chunk::text;

    sql := format($f$
        INSERT INTO data_integrity_snapshots (table_name, snapshot_data)
        SELECT %L, jsonb_agg(to_jsonb(t.*) ORDER BY to_jsonb(t.*))
        FROM %s t
    $f$, p_chunk::text, p_chunk);

    EXECUTE sql;
END;
$$ LANGUAGE plpgsql;
CREATE OR REPLACE FUNCTION validate_data_integrity(p_chunk regclass)
RETURNS boolean AS $$
DECLARE
    current_data   jsonb := '[]'::jsonb;
    original_data  jsonb;
    current_count  bigint;
    original_count bigint;
    sql            text;
BEGIN
    -- Build query with regclass so schema/table are quoted correctly
    sql := format($f$
        SELECT COALESCE(jsonb_agg(to_jsonb(t.*) ORDER BY to_jsonb(t.*)), '[]'::jsonb)
        FROM %s t
    $f$, p_chunk);

    EXECUTE sql INTO current_data;

    -- Load snapshot for this table
    SELECT snapshot_data
      INTO original_data
      FROM data_integrity_snapshots
     WHERE table_name = p_chunk::text;

    IF original_data IS NULL THEN
        RAISE EXCEPTION 'No original data snapshot found for table %', p_chunk::text;
        RETURN false;
    END IF;

    current_count  := jsonb_array_length(current_data);
    original_count := jsonb_array_length(original_data);

    IF current_count <> original_count THEN
        RAISE EXCEPTION 'Row count mismatch for %: expected %, got %', p_chunk::text, original_count, current_count;
        RETURN false;
    END IF;

    -- Compare content
    IF current_data IS DISTINCT FROM original_data THEN
        RAISE EXCEPTION 'Data content mismatch for table %', p_chunk::text;
        RETURN false;
    END IF;

    RAISE NOTICE 'Data integrity validation passed for % (% rows)', p_chunk::text, current_count;
    RETURN true;
END;
$$ LANGUAGE plpgsql;
CREATE OR REPLACE FUNCTION test_recompression(p_table_name text)
RETURNS boolean AS $$
DECLARE
    old_chunk_name text;
    old_compressed_chunk_name text;
    old_chunk_id int;
    new_compressed_chunk_name text;
    new_chunk_id int;
    ok boolean := false;
BEGIN
    -- Compress all uncompressed chunks
    PERFORM compress_chunk(ch)
    FROM show_chunks(p_table_name) ch;

    -- Store initial compressed chunk info before recompression
    SELECT uncompressed.schema_name || '.' || uncompressed.table_name,
           compressed.schema_name || '.' || compressed.table_name,
           compressed.id
      INTO old_chunk_name, old_compressed_chunk_name, old_chunk_id
    FROM _timescaledb_catalog.chunk uncompressed
    JOIN _timescaledb_catalog.chunk compressed
      ON uncompressed.compressed_chunk_id = compressed.id
    WHERE uncompressed.hypertable_id = (
              SELECT id
              FROM _timescaledb_catalog.hypertable
              WHERE table_name = p_table_name
          )
    LIMIT 1;

    IF old_chunk_name IS NULL THEN
        RAISE EXCEPTION 'No chunk found for hypertable %', p_table_name;
        RETURN false;
    END IF;

    -- Capture original data snapshot
    PERFORM capture_data_snapshot(old_chunk_name);

    -- Recompress the chunk in-memory
    PERFORM compress_chunk(old_chunk_name, recompress := true);

    -- Get info for the new compressed chunk
    SELECT compressed.schema_name || '.' || compressed.table_name,
           compressed.id
      INTO new_compressed_chunk_name, new_chunk_id
    FROM _timescaledb_catalog.chunk uncompressed
    JOIN _timescaledb_catalog.chunk compressed
      ON uncompressed.compressed_chunk_id = compressed.id
    WHERE uncompressed.schema_name || '.' || uncompressed.table_name = old_chunk_name
    LIMIT 1;

    -- Check if a new chunk was created
    IF new_chunk_id IS NULL OR old_chunk_id = new_chunk_id THEN
        RAISE EXCEPTION 'Recompression did not create a new chunk for %', p_table_name;
        RETURN false;
    END IF;

    -- Validate integrity of recompressed data
    ok := validate_data_integrity(old_chunk_name);

    IF ok THEN
        RAISE NOTICE 'Recompression test passed for %, old_chunk_id=%, new_chunk_id=%',
                     p_table_name, old_chunk_id, new_chunk_id;
    ELSE
        RAISE EXCEPTION 'Data integrity validation failed for %', p_table_name;
    END IF;

    RETURN ok;
END;
$$ LANGUAGE plpgsql;
-- Test Case 1: Basic segmentby configuration
DROP TABLE IF EXISTS recomp_segmentby_test CASCADE;
NOTICE:  table "recomp_segmentby_test" does not exist, skipping
CREATE TABLE recomp_segmentby_test(
    time timestamptz NOT NULL,
    device text,
    location text,
    temperature float,
    humidity float
);
SELECT table_name FROM create_hypertable('recomp_segmentby_test','time') \gset
-- Set compression with single segmentby column
ALTER TABLE recomp_segmentby_test SET (
    timescaledb.compress,
    timescaledb.compress_segmentby='device',
    timescaledb.compress_orderby='time'
);
-- Insert test data across multiple time ranges
INSERT INTO recomp_segmentby_test VALUES
  ('2000-01-01 00:00:00', 'device1', 'room1', 20.5, 60.0),
  ('2000-01-01 01:00:00', 'device1', 'room1', 21.0, 61.5),
  ('2000-01-01 02:00:00', 'device2', 'room2', 19.8, 58.2),
  ('2000-01-02 00:00:00', 'device1', 'room1', 22.1, 63.0),
  ('2000-01-02 01:00:00', 'device2', 'room2', 18.9, 55.7),
  ('2001-01-01 00:00:00', 'device1', 'room1', 25.0, 70.0),
  ('2001-01-01 01:00:00', 'device2', 'room2', 23.5, 68.5);
SELECT test_recompression(:'table_name');
NOTICE:  Data integrity validation passed for _timescaledb_internal._hyper_1_1_chunk (5 rows)
NOTICE:  Recompression test passed for recomp_segmentby_test, old_chunk_id=3, new_chunk_id=5
 test_recompression 
--------------------
 t
(1 row)

SELECT * FROM _timescaledb_catalog.compression_settings ORDER BY relid;
                 relid                  |                 compress_relid                 | segmentby | orderby | orderby_desc | orderby_nullsfirst |                            index                            
----------------------------------------+------------------------------------------------+-----------+---------+--------------+--------------------+-------------------------------------------------------------
 recomp_segmentby_test                  |                                                | {device}  | {time}  | {f}          | {f}                | [{"type": "minmax", "column": "time", "source": "orderby"}]
 _timescaledb_internal._hyper_1_1_chunk | _timescaledb_internal.compress_hyper_2_5_chunk | {device}  | {time}  | {f}          | {f}                | [{"type": "minmax", "column": "time", "source": "orderby"}]
 _timescaledb_internal._hyper_1_2_chunk | _timescaledb_internal.compress_hyper_2_4_chunk | {device}  | {time}  | {f}          | {f}                | [{"type": "minmax", "column": "time", "source": "orderby"}]
(3 rows)

DROP TABLE recomp_segmentby_test CASCADE;
-- Test Case 2: Multiple segmentby columns configuration
DROP TABLE IF EXISTS recomp_multi_segmentby_test CASCADE;
NOTICE:  table "recomp_multi_segmentby_test" does not exist, skipping
CREATE TABLE recomp_multi_segmentby_test(
    time timestamptz NOT NULL,
    device text,
    location text,
    sensor_type text,
    value float
);
SELECT table_name FROM create_hypertable('recomp_multi_segmentby_test','time') \gset
-- Set compression with multiple segmentby columns
ALTER TABLE recomp_multi_segmentby_test SET (
    timescaledb.compress,
    timescaledb.compress_segmentby='device,location',
    timescaledb.compress_orderby='time'
);
-- Insert test data
INSERT INTO recomp_multi_segmentby_test VALUES
  ('2000-01-01', 'device1', 'room1', 'temp', 20.5),
  ('2000-01-01', 'device1', 'room1', 'humidity', 60.0),
  ('2000-01-01', 'device1', 'room2', 'temp', 21.0),
  ('2000-01-01', 'device2', 'room1', 'temp', 19.8),
  ('2000-01-01', 'device2', 'room2', 'humidity', 58.2),
  ('2001-01-01', 'device1', 'room1', 'temp', 22.1),
  ('2001-01-01', 'device2', 'room1', 'humidity', 63.0);
SELECT test_recompression(:'table_name');
NOTICE:  Data integrity validation passed for _timescaledb_internal._hyper_3_6_chunk (5 rows)
NOTICE:  Recompression test passed for recomp_multi_segmentby_test, old_chunk_id=8, new_chunk_id=10
 test_recompression 
--------------------
 t
(1 row)

SELECT * FROM _timescaledb_catalog.compression_settings ORDER BY relid;
                 relid                  |                 compress_relid                  |     segmentby     | orderby | orderby_desc | orderby_nullsfirst |                            index                            
----------------------------------------+-------------------------------------------------+-------------------+---------+--------------+--------------------+-------------------------------------------------------------
 recomp_multi_segmentby_test            |                                                 | {device,location} | {time}  | {f}          | {f}                | [{"type": "minmax", "column": "time", "source": "orderby"}]
 _timescaledb_internal._hyper_3_6_chunk | _timescaledb_internal.compress_hyper_4_10_chunk | {device,location} | {time}  | {f}          | {f}                | [{"type": "minmax", "column": "time", "source": "orderby"}]
 _timescaledb_internal._hyper_3_7_chunk | _timescaledb_internal.compress_hyper_4_9_chunk  | {device,location} | {time}  | {f}          | {f}                | [{"type": "minmax", "column": "time", "source": "orderby"}]
(3 rows)

DROP TABLE recomp_multi_segmentby_test CASCADE;
-- Test Case 3: Sparse index configuration
DROP TABLE IF EXISTS recomp_index_test CASCADE;
NOTICE:  table "recomp_index_test" does not exist, skipping
CREATE TABLE recomp_index_test(
    x int,
    value text,
    u uuid,
    ts timestamp
) WITH (
    tsdb.hypertable,
    tsdb.partition_column='x',
    tsdb.segment_by='',
    tsdb.order_by='x',
    tsdb.index='bloom("u"),minmax("ts")'
);
-- Insert test data with sparse UUID pattern
INSERT INTO recomp_index_test
SELECT x, md5(x::text),
    CASE WHEN x = 7134 THEN '90ec9e8e-4501-4232-9d03-6d7cf6132815'::uuid
        ELSE '6c1d0998-05f3-452c-abd3-45afe72bbcab'::uuid END,
    '2021-01-01'::timestamp + (interval '1 hour') * x
FROM generate_series(1, 10000) x;
INSERT INTO recomp_index_test
SELECT x, md5(x::text),
    CASE WHEN x = 7134 THEN '90ec9e8e-4501-4232-9d03-6d7cf6132815'::uuid
        ELSE '6c1d0998-05f3-452c-abd3-45afe72bbcab'::uuid END,
    '2022-01-01'::timestamp + (interval '1 hour') * x
FROM generate_series(1, 10000) x;
SELECT test_recompression('recomp_index_test');
NOTICE:  Data integrity validation passed for _timescaledb_internal._hyper_5_11_chunk (20000 rows)
NOTICE:  Recompression test passed for recomp_index_test, old_chunk_id=12, new_chunk_id=13
 test_recompression 
--------------------
 t
(1 row)

SELECT * FROM _timescaledb_catalog.compression_settings ORDER BY relid;
                  relid                  |                 compress_relid                  | segmentby | orderby | orderby_desc | orderby_nullsfirst |                                                                                 index                                                                                  
-----------------------------------------+-------------------------------------------------+-----------+---------+--------------+--------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 recomp_index_test                       |                                                 | {}        | {x}     | {f}          | {f}                | [{"type": "bloom", "column": "u", "source": "config"}, {"type": "minmax", "column": "ts", "source": "config"}, {"type": "minmax", "column": "x", "source": "orderby"}]
 _timescaledb_internal._hyper_5_11_chunk | _timescaledb_internal.compress_hyper_6_13_chunk | {}        | {x}     | {f}          | {f}                | [{"type": "bloom", "column": "u", "source": "config"}, {"type": "minmax", "column": "ts", "source": "config"}, {"type": "minmax", "column": "x", "source": "orderby"}]
(2 rows)

DROP TABLE recomp_index_test CASCADE;
-- Test Case 4: Large dataset
DROP TABLE IF EXISTS recomp_large_data_test CASCADE;
NOTICE:  table "recomp_large_data_test" does not exist, skipping
CREATE TABLE recomp_large_data_test(
    x int,
    value text,
    u uuid,
    ts timestamp
) WITH (
    tsdb.hypertable,
    tsdb.partition_column='ts',
    tsdb.segment_by='',
    tsdb.order_by='ts',
    tsdb.index=''
);
-- Insert test data with sparse UUID pattern
INSERT INTO recomp_large_data_test
SELECT x, md5(x::text),
    CASE WHEN x = 7134 THEN '90ec9e8e-4501-4232-9d03-6d7cf6132815'::uuid
        ELSE '6c1d0998-05f3-452c-abd3-45afe72bbcab'::uuid END,
    '2021-01-01'::timestamp + (interval '1 hour') * x
FROM generate_series(1, 10000) x;
INSERT INTO recomp_large_data_test
SELECT x, md5(x::text),
    CASE WHEN x = 7134 THEN '90ec9e8e-4501-4232-9d03-6d7cf6132815'::uuid
        ELSE '6c1d0998-05f3-452c-abd3-45afe72bbcab'::uuid END,
    '2022-01-01'::timestamp + (interval '1 hour') * x
FROM generate_series(1, 10000) x;
SELECT test_recompression('recomp_large_data_test');
NOTICE:  Data integrity validation passed for _timescaledb_internal._hyper_7_14_chunk (143 rows)
NOTICE:  Recompression test passed for recomp_large_data_test, old_chunk_id=126, new_chunk_id=238
 test_recompression 
--------------------
 t
(1 row)

SELECT * FROM _timescaledb_catalog.compression_settings ORDER BY relid;
                  relid                   |                  compress_relid                  | segmentby | orderby | orderby_desc | orderby_nullsfirst |                                      index                                      
------------------------------------------+--------------------------------------------------+-----------+---------+--------------+--------------------+---------------------------------------------------------------------------------
 recomp_large_data_test                   |                                                  | {}        | {ts}    | {f}          | {f}                | [{"source": "config"}, {"type": "minmax", "column": "ts", "source": "orderby"}]
 _timescaledb_internal._hyper_7_14_chunk  | _timescaledb_internal.compress_hyper_8_238_chunk | {}        | {ts}    | {f}          | {f}                | [{"source": "config"}, {"type": "minmax", "column": "ts", "source": "orderby"}]
 _timescaledb_internal._hyper_7_15_chunk  | _timescaledb_internal.compress_hyper_8_127_chunk | {}        | {ts}    | {f}          | {f}                | [{"source": "config"}, {"type": "minmax", "column": "ts", "source": "orderby"}]
 _timescaledb_internal._hyper_7_16_chunk  | _timescaledb_internal.compress_hyper_8_128_chunk | {}        | {ts}    | {f}          | {f}                | [{"source": "config"}, {"type": "minmax", "column": "ts", "source": "orderby"}]
 _timescaledb_internal._hyper_7_17_chunk  | _timescaledb_internal.compress_hyper_8_129_chunk | {}        | {ts}    | {f}          | {f}                | [{"source": "config"}, {"type": "minmax", "column": "ts", "source": "orderby"}]
 _timescaledb_internal._hyper_7_18_chunk  | _timescaledb_internal.compress_hyper_8_130_chunk | {}        | {ts}    | {f}          | {f}                | [{"source": "config"}, {"type": "minmax", "column": "ts", "source": "orderby"}]
 _timescaledb_internal._hyper_7_19_chunk  | _timescaledb_internal.compress_hyper_8_131_chunk | {}        | {ts}    | {f}          | {f}                | [{"source": "config"}, {"type": "minmax", "column": "ts", "source": "orderby"}]
 _timescaledb_internal._hyper_7_20_chunk  | _timescaledb_internal.compress_hyper_8_132_chunk | {}        | {ts}    | {f}          | {f}                | [{"source": "config"}, {"type": "minmax", "column": "ts", "source": "orderby"}]
 _timescaledb_internal._hyper_7_21_chunk  | _timescaledb_internal.compress_hyper_8_133_chunk | {}        | {ts}    | {f}          | {f}                | [{"source": "config"}, {"type": "minmax", "column": "ts", "source": "orderby"}]
 _timescaledb_internal._hyper_7_22_chunk  | _timescaledb_internal.compress_hyper_8_134_chunk | {}        | {ts}    | {f}          | {f}                | [{"source": "config"}, {"type": "minmax", "column": "ts", "source": "orderby"}]
 _timescaledb_internal._hyper_7_23_chunk  | _timescaledb_internal.compress_hyper_8_135_chunk | {}        | {ts}    | {f}          | {f}                | [{"source": "config"}, {"type": "minmax", "column": "ts", "source": "orderby"}]
 _timescaledb_internal._hyper_7_24_chunk  | _timescaledb_internal.compress_hyper_8_136_chunk | {}        | {ts}    | {f}          | {f}                | [{"source": "config"}, {"type": "minmax", "column": "ts", "source": "orderby"}]
 _timescaledb_internal._hyper_7_25_chunk  | _timescaledb_internal.compress_hyper_8_137_chunk | {}        | {ts}    | {f}          | {f}                | [{"source": "config"}, {"type": "minmax", "column": "ts", "source": "orderby"}]
 _timescaledb_internal._hyper_7_26_chunk  | _timescaledb_internal.compress_hyper_8_138_chunk | {}        | {ts}    | {f}          | {f}                | [{"source": "config"}, {"type": "minmax", "column": "ts", "source": "orderby"}]
 _timescaledb_internal._hyper_7_27_chunk  | _timescaledb_internal.compress_hyper_8_139_chunk | {}        | {ts}    | {f}          | {f}                | [{"source": "config"}, {"type": "minmax", "column": "ts", "source": "orderby"}]
 _timescaledb_internal._hyper_7_28_chunk  | _timescaledb_internal.compress_hyper_8_140_chunk | {}        | {ts}    | {f}          | {f}                | [{"source": "config"}, {"type": "minmax", "column": "ts", "source": "orderby"}]
 _timescaledb_internal._hyper_7_29_chunk  | _timescaledb_internal.compress_hyper_8_141_chunk | {}        | {ts}    | {f}          | {f}                | [{"source": "config"}, {"type": "minmax", "column": "ts", "source": "orderby"}]
 _timescaledb_internal._hyper_7_30_chunk  | _timescaledb_internal.compress_hyper_8_142_chunk | {}        | {ts}    | {f}          | {f}                | [{"source": "config"}, {"type": "minmax", "column": "ts", "source": "orderby"}]
 _timescaledb_internal._hyper_7_31_chunk  | _timescaledb_internal.compress_hyper_8_143_chunk | {}        | {ts}    | {f}          | {f}                | [{"source": "config"}, {"type": "minmax", "column": "ts", "source": "orderby"}]
 _timescaledb_internal._hyper_7_32_chunk  | _timescaledb_internal.compress_hyper_8_144_chunk | {}        | {ts}    | {f}          | {f}                | [{"source": "config"}, {"type": "minmax", "column": "ts", "source": "orderby"}]
 _timescaledb_internal._hyper_7_33_chunk  | _timescaledb_internal.compress_hyper_8_145_chunk | {}        | {ts}    | {f}          | {f}                | [{"source": "config"}, {"type": "minmax", "column": "ts", "source": "orderby"}]
 _timescaledb_internal._hyper_7_34_chunk  | _timescaledb_internal.compress_hyper_8_146_chunk | {}        | {ts}    | {f}          | {f}                | [{"source": "config"}, {"type": "minmax", "column": "ts", "source": "orderby"}]
 _timescaledb_internal._hyper_7_35_chunk  | _timescaledb_internal.compress_hyper_8_147_chunk | {}        | {ts}    | {f}          | {f}                | [{"source": "config"}, {"type": "minmax", "column": "ts", "source": "orderby"}]
 _timescaledb_internal._hyper_7_36_chunk  | _timescaledb_internal.compress_hyper_8_148_chunk | {}        | {ts}    | {f}          | {f}                | [{"source": "config"}, {"type": "minmax", "column": "ts", "source": "orderby"}]
 _timescaledb_internal._hyper_7_37_chunk  | _timescaledb_internal.compress_hyper_8_149_chunk | {}        | {ts}    | {f}          | {f}                | [{"source": "config"}, {"type": "minmax", "column": "ts", "source": "orderby"}]
 _timescaledb_internal._hyper_7_38_chunk  | _timescaledb_internal.compress_hyper_8_150_chunk | {}        | {ts}    | {f}          | {f}                | [{"source": "config"}, {"type": "minmax", "column": "ts", "source": "orderby"}]
 _timescaledb_internal._hyper_7_39_chunk  | _timescaledb_internal.compress_hyper_8_151_chunk | {}        | {ts}    | {f}          | {f}                | [{"source": "config"}, {"type": "minmax", "column": "ts", "source": "orderby"}]
 _timescaledb_internal._hyper_7_40_chunk  | _timescaledb_internal.compress_hyper_8_152_chunk | {}        | {ts}    | {f}          | {f}                | [{"source": "config"}, {"type": "minmax", "column": "ts", "source": "orderby"}]
 _timescaledb_internal._hyper_7_41_chunk  | _timescaledb_internal.compress_hyper_8_153_chunk | {}        | {ts}    | {f}          | {f}                | [{"source": "config"}, {"type": "minmax", "column": "ts", "source": "orderby"}]
 _timescaledb_internal._hyper_7_42_chunk  | _timescaledb_internal.compress_hyper_8_154_chunk | {}        | {ts}    | {f}          | {f}                | [{"source": "config"}, {"type": "minmax", "column": "ts", "source": "orderby"}]
 _timescaledb_internal._hyper_7_43_chunk  | _timescaledb_internal.compress_hyper_8_155_chunk | {}        | {ts}    | {f}          | {f}                | [{"source": "config"}, {"type": "minmax", "column": "ts", "source": "orderby"}]
 _timescaledb_internal._hyper_7_44_chunk  | _timescaledb_internal.compress_hyper_8_156_chunk | {}        | {ts}    | {f}          | {f}                | [{"source": "config"}, {"type": "minmax", "column": "ts", "source": "orderby"}]
 _timescaledb_internal._hyper_7_45_chunk  | _timescaledb_internal.compress_hyper_8_157_chunk | {}        | {ts}    | {f}          | {f}                | [{"source": "config"}, {"type": "minmax", "column": "ts", "source": "orderby"}]
 _timescaledb_internal._hyper_7_46_chunk  | _timescaledb_internal.compress_hyper_8_158_chunk | {}        | {ts}    | {f}          | {f}                | [{"source": "config"}, {"type": "minmax", "column": "ts", "source": "orderby"}]
 _timescaledb_internal._hyper_7_47_chunk  | _timescaledb_internal.compress_hyper_8_159_chunk | {}        | {ts}    | {f}          | {f}                | [{"source": "config"}, {"type": "minmax", "column": "ts", "source": "orderby"}]
 _timescaledb_internal._hyper_7_48_chunk  | _timescaledb_internal.compress_hyper_8_160_chunk | {}        | {ts}    | {f}          | {f}                | [{"source": "config"}, {"type": "minmax", "column": "ts", "source": "orderby"}]
 _timescaledb_internal._hyper_7_49_chunk  | _timescaledb_internal.compress_hyper_8_161_chunk | {}        | {ts}    | {f}          | {f}                | [{"source": "config"}, {"type": "minmax", "column": "ts", "source": "orderby"}]
 _timescaledb_internal._hyper_7_50_chunk  | _timescaledb_internal.compress_hyper_8_162_chunk | {}        | {ts}    | {f}          | {f}                | [{"source": "config"}, {"type": "minmax", "column": "ts", "source": "orderby"}]
 _timescaledb_internal._hyper_7_51_chunk  | _timescaledb_internal.compress_hyper_8_163_chunk | {}        | {ts}    | {f}          | {f}                | [{"source": "config"}, {"type": "minmax", "column": "ts", "source": "orderby"}]
 _timescaledb_internal._hyper_7_52_chunk  | _timescaledb_internal.compress_hyper_8_164_chunk | {}        | {ts}    | {f}          | {f}                | [{"source": "config"}, {"type": "minmax", "column": "ts", "source": "orderby"}]
 _timescaledb_internal._hyper_7_53_chunk  | _timescaledb_internal.compress_hyper_8_165_chunk | {}        | {ts}    | {f}          | {f}                | [{"source": "config"}, {"type": "minmax", "column": "ts", "source": "orderby"}]
 _timescaledb_internal._hyper_7_54_chunk  | _timescaledb_internal.compress_hyper_8_166_chunk | {}        | {ts}    | {f}          | {f}                | [{"source": "config"}, {"type": "minmax", "column": "ts", "source": "orderby"}]
 _timescaledb_internal._hyper_7_55_chunk  | _timescaledb_internal.compress_hyper_8_167_chunk | {}        | {ts}    | {f}          | {f}                | [{"source": "config"}, {"type": "minmax", "column": "ts", "source": "orderby"}]
 _timescaledb_internal._hyper_7_56_chunk  | _timescaledb_internal.compress_hyper_8_168_chunk | {}        | {ts}    | {f}          | {f}                | [{"source": "config"}, {"type": "minmax", "column": "ts", "source": "orderby"}]
 _timescaledb_internal._hyper_7_57_chunk  | _timescaledb_internal.compress_hyper_8_169_chunk | {}        | {ts}    | {f}          | {f}                | [{"source": "config"}, {"type": "minmax", "column": "ts", "source": "orderby"}]
 _timescaledb_internal._hyper_7_58_chunk  | _timescaledb_internal.compress_hyper_8_170_chunk | {}        | {ts}    | {f}          | {f}                | [{"source": "config"}, {"type": "minmax", "column": "ts", "source": "orderby"}]
 _timescaledb_internal._hyper_7_59_chunk  | _timescaledb_internal.compress_hyper_8_171_chunk | {}        | {ts}    | {f}          | {f}                | [{"source": "config"}, {"type": "minmax", "column": "ts", "source": "orderby"}]
 _timescaledb_internal._hyper_7_60_chunk  | _timescaledb_internal.compress_hyper_8_172_chunk | {}        | {ts}    | {f}          | {f}                | [{"source": "config"}, {"type": "minmax", "column": "ts", "source": "orderby"}]
 _timescaledb_internal._hyper_7_61_chunk  | _timescaledb_internal.compress_hyper_8_173_chunk | {}        | {ts}    | {f}          | {f}                | [{"source": "config"}, {"type": "minmax", "column": "ts", "source": "orderby"}]
 _timescaledb_internal._hyper_7_62_chunk  | _timescaledb_internal.compress_hyper_8_174_chunk | {}        | {ts}    | {f}          | {f}                | [{"source": "config"}, {"type": "minmax", "column": "ts", "source": "orderby"}]
 _timescaledb_internal._hyper_7_63_chunk  | _timescaledb_internal.compress_hyper_8_175_chunk | {}        | {ts}    | {f}          | {f}                | [{"source": "config"}, {"type": "minmax", "column": "ts", "source": "orderby"}]
 _timescaledb_internal._hyper_7_64_chunk  | _timescaledb_internal.compress_hyper_8_176_chunk | {}        | {ts}    | {f}          | {f}                | [{"source": "config"}, {"type": "minmax", "column": "ts", "source": "orderby"}]
 _timescaledb_internal._hyper_7_65_chunk  | _timescaledb_internal.compress_hyper_8_177_chunk | {}        | {ts}    | {f}          | {f}                | [{"source": "config"}, {"type": "minmax", "column": "ts", "source": "orderby"}]
 _timescaledb_internal._hyper_7_66_chunk  | _timescaledb_internal.compress_hyper_8_178_chunk | {}        | {ts}    | {f}          | {f}                | [{"source": "config"}, {"type": "minmax", "column": "ts", "source": "orderby"}]
 _timescaledb_internal._hyper_7_67_chunk  | _timescaledb_internal.compress_hyper_8_179_chunk | {}        | {ts}    | {f}          | {f}                | [{"source": "config"}, {"type": "minmax", "column": "ts", "source": "orderby"}]
 _timescaledb_internal._hyper_7_68_chunk  | _timescaledb_internal.compress_hyper_8_180_chunk | {}        | {ts}    | {f}          | {f}                | [{"source": "config"}, {"type": "minmax", "column": "ts", "source": "orderby"}]
 _timescaledb_internal._hyper_7_69_chunk  | _timescaledb_internal.compress_hyper_8_181_chunk | {}        | {ts}    | {f}          | {f}                | [{"source": "config"}, {"type": "minmax", "column": "ts", "source": "orderby"}]
 _timescaledb_internal._hyper_7_70_chunk  | _timescaledb_internal.compress_hyper_8_182_chunk | {}        | {ts}    | {f}          | {f}                | [{"source": "config"}, {"type": "minmax", "column": "ts", "source": "orderby"}]
 _timescaledb_internal._hyper_7_71_chunk  | _timescaledb_internal.compress_hyper_8_183_chunk | {}        | {ts}    | {f}          | {f}                | [{"source": "config"}, {"type": "minmax", "column": "ts", "source": "orderby"}]
 _timescaledb_internal._hyper_7_72_chunk  | _timescaledb_internal.compress_hyper_8_184_chunk | {}        | {ts}    | {f}          | {f}                | [{"source": "config"}, {"type": "minmax", "column": "ts", "source": "orderby"}]
 _timescaledb_internal._hyper_7_73_chunk  | _timescaledb_internal.compress_hyper_8_185_chunk | {}        | {ts}    | {f}          | {f}                | [{"source": "config"}, {"type": "minmax", "column": "ts", "source": "orderby"}]
 _timescaledb_internal._hyper_7_74_chunk  | _timescaledb_internal.compress_hyper_8_186_chunk | {}        | {ts}    | {f}          | {f}                | [{"source": "config"}, {"type": "minmax", "column": "ts", "source": "orderby"}]
 _timescaledb_internal._hyper_7_75_chunk  | _timescaledb_internal.compress_hyper_8_187_chunk | {}        | {ts}    | {f}          | {f}                | [{"source": "config"}, {"type": "minmax", "column": "ts", "source": "orderby"}]
 _timescaledb_internal._hyper_7_76_chunk  | _timescaledb_internal.compress_hyper_8_188_chunk | {}        | {ts}    | {f}          | {f}                | [{"source": "config"}, {"type": "minmax", "column": "ts", "source": "orderby"}]
 _timescaledb_internal._hyper_7_77_chunk  | _timescaledb_internal.compress_hyper_8_189_chunk | {}        | {ts}    | {f}          | {f}                | [{"source": "config"}, {"type": "minmax", "column": "ts", "source": "orderby"}]
 _timescaledb_internal._hyper_7_78_chunk  | _timescaledb_internal.compress_hyper_8_190_chunk | {}        | {ts}    | {f}          | {f}                | [{"source": "config"}, {"type": "minmax", "column": "ts", "source": "orderby"}]
 _timescaledb_internal._hyper_7_79_chunk  | _timescaledb_internal.compress_hyper_8_191_chunk | {}        | {ts}    | {f}          | {f}                | [{"source": "config"}, {"type": "minmax", "column": "ts", "source": "orderby"}]
 _timescaledb_internal._hyper_7_80_chunk  | _timescaledb_internal.compress_hyper_8_192_chunk | {}        | {ts}    | {f}          | {f}                | [{"source": "config"}, {"type": "minmax", "column": "ts", "source": "orderby"}]
 _timescaledb_internal._hyper_7_81_chunk  | _timescaledb_internal.compress_hyper_8_193_chunk | {}        | {ts}    | {f}          | {f}                | [{"source": "config"}, {"type": "minmax", "column": "ts", "source": "orderby"}]
 _timescaledb_internal._hyper_7_82_chunk  | _timescaledb_internal.compress_hyper_8_194_chunk | {}        | {ts}    | {f}          | {f}                | [{"source": "config"}, {"type": "minmax", "column": "ts", "source": "orderby"}]
 _timescaledb_internal._hyper_7_83_chunk  | _timescaledb_internal.compress_hyper_8_195_chunk | {}        | {ts}    | {f}          | {f}                | [{"source": "config"}, {"type": "minmax", "column": "ts", "source": "orderby"}]
 _timescaledb_internal._hyper_7_84_chunk  | _timescaledb_internal.compress_hyper_8_196_chunk | {}        | {ts}    | {f}          | {f}                | [{"source": "config"}, {"type": "minmax", "column": "ts", "source": "orderby"}]
 _timescaledb_internal._hyper_7_85_chunk  | _timescaledb_internal.compress_hyper_8_197_chunk | {}        | {ts}    | {f}          | {f}                | [{"source": "config"}, {"type": "minmax", "column": "ts", "source": "orderby"}]
 _timescaledb_internal._hyper_7_86_chunk  | _timescaledb_internal.compress_hyper_8_198_chunk | {}        | {ts}    | {f}          | {f}                | [{"source": "config"}, {"type": "minmax", "column": "ts", "source": "orderby"}]
 _timescaledb_internal._hyper_7_87_chunk  | _timescaledb_internal.compress_hyper_8_199_chunk | {}        | {ts}    | {f}          | {f}                | [{"source": "config"}, {"type": "minmax", "column": "ts", "source": "orderby"}]
 _timescaledb_internal._hyper_7_88_chunk  | _timescaledb_internal.compress_hyper_8_200_chunk | {}        | {ts}    | {f}          | {f}                | [{"source": "config"}, {"type": "minmax", "column": "ts", "source": "orderby"}]
 _timescaledb_internal._hyper_7_89_chunk  | _timescaledb_internal.compress_hyper_8_201_chunk | {}        | {ts}    | {f}          | {f}                | [{"source": "config"}, {"type": "minmax", "column": "ts", "source": "orderby"}]
 _timescaledb_internal._hyper_7_90_chunk  | _timescaledb_internal.compress_hyper_8_202_chunk | {}        | {ts}    | {f}          | {f}                | [{"source": "config"}, {"type": "minmax", "column": "ts", "source": "orderby"}]
 _timescaledb_internal._hyper_7_91_chunk  | _timescaledb_internal.compress_hyper_8_203_chunk | {}        | {ts}    | {f}          | {f}                | [{"source": "config"}, {"type": "minmax", "column": "ts", "source": "orderby"}]
 _timescaledb_internal._hyper_7_92_chunk  | _timescaledb_internal.compress_hyper_8_204_chunk | {}        | {ts}    | {f}          | {f}                | [{"source": "config"}, {"type": "minmax", "column": "ts", "source": "orderby"}]
 _timescaledb_internal._hyper_7_93_chunk  | _timescaledb_internal.compress_hyper_8_205_chunk | {}        | {ts}    | {f}          | {f}                | [{"source": "config"}, {"type": "minmax", "column": "ts", "source": "orderby"}]
 _timescaledb_internal._hyper_7_94_chunk  | _timescaledb_internal.compress_hyper_8_206_chunk | {}        | {ts}    | {f}          | {f}                | [{"source": "config"}, {"type": "minmax", "column": "ts", "source": "orderby"}]
 _timescaledb_internal._hyper_7_95_chunk  | _timescaledb_internal.compress_hyper_8_207_chunk | {}        | {ts}    | {f}          | {f}                | [{"source": "config"}, {"type": "minmax", "column": "ts", "source": "orderby"}]
 _timescaledb_internal._hyper_7_96_chunk  | _timescaledb_internal.compress_hyper_8_208_chunk | {}        | {ts}    | {f}          | {f}                | [{"source": "config"}, {"type": "minmax", "column": "ts", "source": "orderby"}]
 _timescaledb_internal._hyper_7_97_chunk  | _timescaledb_internal.compress_hyper_8_209_chunk | {}        | {ts}    | {f}          | {f}                | [{"source": "config"}, {"type": "minmax", "column": "ts", "source": "orderby"}]
 _timescaledb_internal._hyper_7_98_chunk  | _timescaledb_internal.compress_hyper_8_210_chunk | {}        | {ts}    | {f}          | {f}                | [{"source": "config"}, {"type": "minmax", "column": "ts", "source": "orderby"}]
 _timescaledb_internal._hyper_7_99_chunk  | _timescaledb_internal.compress_hyper_8_211_chunk | {}        | {ts}    | {f}          | {f}                | [{"source": "config"}, {"type": "minmax", "column": "ts", "source": "orderby"}]
 _timescaledb_internal._hyper_7_100_chunk | _timescaledb_internal.compress_hyper_8_212_chunk | {}        | {ts}    | {f}          | {f}                | [{"source": "config"}, {"type": "minmax", "column": "ts", "source": "orderby"}]
 _timescaledb_internal._hyper_7_101_chunk | _timescaledb_internal.compress_hyper_8_213_chunk | {}        | {ts}    | {f}          | {f}                | [{"source": "config"}, {"type": "minmax", "column": "ts", "source": "orderby"}]
 _timescaledb_internal._hyper_7_102_chunk | _timescaledb_internal.compress_hyper_8_214_chunk | {}        | {ts}    | {f}          | {f}                | [{"source": "config"}, {"type": "minmax", "column": "ts", "source": "orderby"}]
 _timescaledb_internal._hyper_7_103_chunk | _timescaledb_internal.compress_hyper_8_215_chunk | {}        | {ts}    | {f}          | {f}                | [{"source": "config"}, {"type": "minmax", "column": "ts", "source": "orderby"}]
 _timescaledb_internal._hyper_7_104_chunk | _timescaledb_internal.compress_hyper_8_216_chunk | {}        | {ts}    | {f}          | {f}                | [{"source": "config"}, {"type": "minmax", "column": "ts", "source": "orderby"}]
 _timescaledb_internal._hyper_7_105_chunk | _timescaledb_internal.compress_hyper_8_217_chunk | {}        | {ts}    | {f}          | {f}                | [{"source": "config"}, {"type": "minmax", "column": "ts", "source": "orderby"}]
 _timescaledb_internal._hyper_7_106_chunk | _timescaledb_internal.compress_hyper_8_218_chunk | {}        | {ts}    | {f}          | {f}                | [{"source": "config"}, {"type": "minmax", "column": "ts", "source": "orderby"}]
 _timescaledb_internal._hyper_7_107_chunk | _timescaledb_internal.compress_hyper_8_219_chunk | {}        | {ts}    | {f}          | {f}                | [{"source": "config"}, {"type": "minmax", "column": "ts", "source": "orderby"}]
 _timescaledb_internal._hyper_7_108_chunk | _timescaledb_internal.compress_hyper_8_220_chunk | {}        | {ts}    | {f}          | {f}                | [{"source": "config"}, {"type": "minmax", "column": "ts", "source": "orderby"}]
 _timescaledb_internal._hyper_7_109_chunk | _timescaledb_internal.compress_hyper_8_221_chunk | {}        | {ts}    | {f}          | {f}                | [{"source": "config"}, {"type": "minmax", "column": "ts", "source": "orderby"}]
 _timescaledb_internal._hyper_7_110_chunk | _timescaledb_internal.compress_hyper_8_222_chunk | {}        | {ts}    | {f}          | {f}                | [{"source": "config"}, {"type": "minmax", "column": "ts", "source": "orderby"}]
 _timescaledb_internal._hyper_7_111_chunk | _timescaledb_internal.compress_hyper_8_223_chunk | {}        | {ts}    | {f}          | {f}                | [{"source": "config"}, {"type": "minmax", "column": "ts", "source": "orderby"}]
 _timescaledb_internal._hyper_7_112_chunk | _timescaledb_internal.compress_hyper_8_224_chunk | {}        | {ts}    | {f}          | {f}                | [{"source": "config"}, {"type": "minmax", "column": "ts", "source": "orderby"}]
 _timescaledb_internal._hyper_7_113_chunk | _timescaledb_internal.compress_hyper_8_225_chunk | {}        | {ts}    | {f}          | {f}                | [{"source": "config"}, {"type": "minmax", "column": "ts", "source": "orderby"}]
 _timescaledb_internal._hyper_7_114_chunk | _timescaledb_internal.compress_hyper_8_226_chunk | {}        | {ts}    | {f}          | {f}                | [{"source": "config"}, {"type": "minmax", "column": "ts", "source": "orderby"}]
 _timescaledb_internal._hyper_7_115_chunk | _timescaledb_internal.compress_hyper_8_227_chunk | {}        | {ts}    | {f}          | {f}                | [{"source": "config"}, {"type": "minmax", "column": "ts", "source": "orderby"}]
 _timescaledb_internal._hyper_7_116_chunk | _timescaledb_internal.compress_hyper_8_228_chunk | {}        | {ts}    | {f}          | {f}                | [{"source": "config"}, {"type": "minmax", "column": "ts", "source": "orderby"}]
 _timescaledb_internal._hyper_7_117_chunk | _timescaledb_internal.compress_hyper_8_229_chunk | {}        | {ts}    | {f}          | {f}                | [{"source": "config"}, {"type": "minmax", "column": "ts", "source": "orderby"}]
 _timescaledb_internal._hyper_7_118_chunk | _timescaledb_internal.compress_hyper_8_230_chunk | {}        | {ts}    | {f}          | {f}                | [{"source": "config"}, {"type": "minmax", "column": "ts", "source": "orderby"}]
 _timescaledb_internal._hyper_7_119_chunk | _timescaledb_internal.compress_hyper_8_231_chunk | {}        | {ts}    | {f}          | {f}                | [{"source": "config"}, {"type": "minmax", "column": "ts", "source": "orderby"}]
 _timescaledb_internal._hyper_7_120_chunk | _timescaledb_internal.compress_hyper_8_232_chunk | {}        | {ts}    | {f}          | {f}                | [{"source": "config"}, {"type": "minmax", "column": "ts", "source": "orderby"}]
 _timescaledb_internal._hyper_7_121_chunk | _timescaledb_internal.compress_hyper_8_233_chunk | {}        | {ts}    | {f}          | {f}                | [{"source": "config"}, {"type": "minmax", "column": "ts", "source": "orderby"}]
 _timescaledb_internal._hyper_7_122_chunk | _timescaledb_internal.compress_hyper_8_234_chunk | {}        | {ts}    | {f}          | {f}                | [{"source": "config"}, {"type": "minmax", "column": "ts", "source": "orderby"}]
 _timescaledb_internal._hyper_7_123_chunk | _timescaledb_internal.compress_hyper_8_235_chunk | {}        | {ts}    | {f}          | {f}                | [{"source": "config"}, {"type": "minmax", "column": "ts", "source": "orderby"}]
 _timescaledb_internal._hyper_7_124_chunk | _timescaledb_internal.compress_hyper_8_236_chunk | {}        | {ts}    | {f}          | {f}                | [{"source": "config"}, {"type": "minmax", "column": "ts", "source": "orderby"}]
 _timescaledb_internal._hyper_7_125_chunk | _timescaledb_internal.compress_hyper_8_237_chunk | {}        | {ts}    | {f}          | {f}                | [{"source": "config"}, {"type": "minmax", "column": "ts", "source": "orderby"}]
(113 rows)

DROP TABLE recomp_large_data_test CASCADE;
-- Cleanup
DROP FUNCTION IF EXISTS validate_data_integrity(regclass);
DROP FUNCTION IF EXISTS capture_data_snapshot(regclass);
DROP TABLE IF EXISTS data_integrity_snapshots CASCADE;
