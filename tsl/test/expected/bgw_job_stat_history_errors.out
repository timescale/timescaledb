-- This file and its contents are licensed under the Timescale License.
-- Please see the included NOTICE for copyright information and
-- LICENSE-TIMESCALE for a copy of the license.
\c :TEST_DBNAME :ROLE_SUPERUSER
\set client_min_messages TO NOTICE;
create or replace procedure job_fail(jobid int, config jsonb) language plpgsql as $$
begin
perform pg_sleep(2);
raise exception 'raising an exception';
end
$$;
-- very simple case: job that raises an exception
select add_job('job_fail', '4 minutes') as jobf_id \gset
-- test jobs that try to update concurrently
CREATE TABLE custom_log (
    a int,
    b int,
    msg text
);
insert into custom_log values (0, 0, 'msg0');
ALTER SYSTEM SET DEFAULT_TRANSACTION_ISOLATION TO 'serializable';
SELECT pg_reload_conf();
 pg_reload_conf 
----------------
 t
(1 row)

-- test a concurrent update
CREATE OR REPLACE PROCEDURE custom_proc1(jobid int, config jsonb) LANGUAGE PLPGSQL AS
$$
BEGIN
  UPDATE custom_log set msg = 'msg1' where msg = 'msg0';
  perform pg_sleep(5);
  COMMIT;
END
$$;
CREATE OR REPLACE PROCEDURE custom_proc2(jobid int, config jsonb) LANGUAGE PLPGSQL AS
$$
BEGIN
  UPDATE custom_log set msg = 'msg2' where msg = 'msg0';
  COMMIT;
END
$$;
select add_job('custom_proc1', '2 min', initial_start => now());
 add_job 
---------
    1001
(1 row)

-- to make sure custom_log is first updated by custom_proc_1
select add_job('custom_proc2', '2 min', initial_start => now() + interval '2 seconds');
 add_job 
---------
    1002
(1 row)

SELECT _timescaledb_functions.start_background_workers();
 start_background_workers 
--------------------------
 t
(1 row)

-- enough time to for job_fail to fail
select pg_sleep(5);
 pg_sleep 
----------
 
(1 row)

select job_id, data->'job'->>'proc_name' as proc_name, data->'error_data'->>'message' as err_message, data->'error_data'->>'sqlerrcode' as sqlerrcode
from _timescaledb_internal.bgw_job_stat_history where job_id = :jobf_id and succeeded is false;
 job_id | proc_name |     err_message      | sqlerrcode 
--------+-----------+----------------------+------------
   1000 | job_fail  | raising an exception | P0001
(1 row)

select delete_job(:jobf_id);
 delete_job 
------------
 
(1 row)

select pg_sleep(5);
 pg_sleep 
----------
 
(1 row)

-- exclude internal jobs
select job_id, data->'job'->>'proc_name' as proc_name, data->'error_data'->>'message' as err_message, data->'error_data'->>'sqlerrcode' as sqlerrcode
from _timescaledb_internal.bgw_job_stat_history WHERE job_id >= 1000 and succeeded is false;
 job_id |  proc_name   |                     err_message                     | sqlerrcode 
--------+--------------+-----------------------------------------------------+------------
   1000 | job_fail     | raising an exception                                | P0001
   1002 | custom_proc2 | could not serialize access due to concurrent update | 40001
(2 rows)

ALTER SYSTEM RESET DEFAULT_TRANSACTION_ISOLATION;
SELECT pg_reload_conf();
 pg_reload_conf 
----------------
 t
(1 row)

-- test the retention job
SELECT next_start FROM alter_job(3, next_start => '2060-01-01 00:00:00+00'::timestamptz);
          next_start          
------------------------------
 Wed Dec 31 16:00:00 2059 PST
(1 row)

TRUNCATE TABLE _timescaledb_internal.bgw_job_stat_history;
INSERT INTO _timescaledb_internal.bgw_job_stat_history(job_id, pid, succeeded, execution_start, execution_finish, data)
VALUES (123, 12345, false, '2000-01-01 00:00:00+00'::timestamptz, '2000-01-01 00:00:10+00'::timestamptz, '{}'),
(456, 45678, false, '2000-01-01 00:00:20+00'::timestamptz, '2000-01-01 00:00:40+00'::timestamptz, '{}'),
-- not older than a month
(123, 23456, false, '2050-01-01 00:00:00+00'::timestamptz, '2050-01-01 00:00:10+00'::timestamptz, '{}');
-- 3 rows in the table before policy runs
SELECT job_id, pid, succeeded, execution_start, execution_finish, data
FROM _timescaledb_internal.bgw_job_stat_history
WHERE succeeded IS FALSE;
 job_id |  pid  | succeeded |       execution_start        |       execution_finish       | data 
--------+-------+-----------+------------------------------+------------------------------+------
    123 | 12345 | f         | Fri Dec 31 16:00:00 1999 PST | Fri Dec 31 16:00:10 1999 PST | {}
    456 | 45678 | f         | Fri Dec 31 16:00:20 1999 PST | Fri Dec 31 16:00:40 1999 PST | {}
    123 | 23456 | f         | Fri Dec 31 16:00:00 2049 PST | Fri Dec 31 16:00:10 2049 PST | {}
(3 rows)

-- drop all job_stats for the retention job
DELETE FROM _timescaledb_internal.bgw_job_stat WHERE job_id = 3;
SELECT  next_start FROM alter_job(3, next_start => now() + interval '2 seconds') \gset
SELECT test.wait_for_job_to_run(3, 1);
 wait_for_job_to_run 
---------------------
 t
(1 row)

-- only the last row remains
SELECT job_id, pid, succeeded, execution_start, execution_finish, data
FROM _timescaledb_internal.bgw_job_stat_history
WHERE succeeded IS FALSE;
 job_id |  pid  | succeeded |       execution_start        |       execution_finish       | data 
--------+-------+-----------+------------------------------+------------------------------+------
    123 | 23456 | f         | Fri Dec 31 16:00:00 2049 PST | Fri Dec 31 16:00:10 2049 PST | {}
(1 row)

\c :TEST_DBNAME :ROLE_SUPERUSER
SELECT _timescaledb_functions.stop_background_workers();
 stop_background_workers 
-------------------------
 t
(1 row)

