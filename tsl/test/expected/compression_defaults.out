-- This file and its contents are licensed under the Timescale License.
-- Please see the included NOTICE for copyright information and
-- LICENSE-TIMESCALE for a copy of the license.
\c :TEST_DBNAME :ROLE_DEFAULT_PERM_USER
-- statitics on
CREATE TABLE "public"."metrics" (
    "time" timestamp with time zone NOT NULL,
    "device_id" "text",
    "val" double precision
) WITH (autovacuum_enabled=0);
SELECT create_hypertable('public.metrics', 'time', create_default_indexes=>false);
  create_hypertable   
----------------------
 (1,public,metrics,t)
(1 row)

insert into metrics SELECT t, 1, extract(epoch from t) from generate_series
        ( '2007-02-01'::timestamp
        , '2008-04-01'::timestamp
        , '1 day'::interval) t;
insert into metrics SELECT t, 2, extract(epoch from t) from generate_series
        ( '2009-02-01'::timestamp
        , '2010-04-01'::timestamp
        , '1 day'::interval) t;
ANALYZE metrics;
--use the best-scenario unique index
CREATE UNIQUE INDEX test_idx ON metrics(device_id, time);
SELECT _timescaledb_functions.get_segmentby_defaults('public.metrics');
            get_segmentby_defaults            
----------------------------------------------
 {"columns": ["device_id"], "confidence": 10}
(1 row)

SELECT _timescaledb_functions.get_orderby_defaults('public.metrics', ARRAY['device_id']);
              get_orderby_defaults               
-------------------------------------------------
 {"clauses": ["\"time\" DESC"], "confidence": 8}
(1 row)

ALTER TABLE metrics SET (timescaledb.compress = true);
NOTICE:  default segment by for hypertable "metrics" is set to "device_id"
NOTICE:  default order by for hypertable "metrics" is set to ""time" DESC"
SELECT * FROM _timescaledb_catalog.compression_settings;
  relid  | compress_relid |  segmentby  | orderby | orderby_desc | orderby_nullsfirst 
---------+----------------+-------------+---------+--------------+--------------------
 metrics |                | {device_id} | {time}  | {t}          | {t}
(1 row)

ALTER TABLE metrics SET (timescaledb.compress = false);
ALTER TABLE metrics SET (timescaledb.compress = true, timescaledb.compress_segmentby = 'device_id');
NOTICE:  default order by for hypertable "metrics" is set to ""time" DESC"
SELECT * FROM _timescaledb_catalog.compression_settings;
  relid  | compress_relid |  segmentby  | orderby | orderby_desc | orderby_nullsfirst 
---------+----------------+-------------+---------+--------------+--------------------
 metrics |                | {device_id} | {time}  | {t}          | {t}
(1 row)

ALTER TABLE metrics SET (timescaledb.compress = false);
--make sure all the GUC combinations work
SET timescaledb.compression_segmentby_default_function = '';
SET timescaledb.compression_orderby_default_function = '';
ALTER TABLE metrics SET (timescaledb.compress = true);
WARNING:  column "device_id" should be used for segmenting or ordering
SELECT * FROM _timescaledb_catalog.compression_settings;
  relid  | compress_relid | segmentby | orderby | orderby_desc | orderby_nullsfirst 
---------+----------------+-----------+---------+--------------+--------------------
 metrics |                |           | {time}  | {t}          | {t}
(1 row)

ALTER TABLE metrics SET (timescaledb.compress = false);
SET timescaledb.compression_segmentby_default_function   = '';
RESET timescaledb.compression_orderby_default_function;
ALTER TABLE metrics SET (timescaledb.compress = true);
NOTICE:  default order by for hypertable "metrics" is set to "device_id, "time" DESC"
SELECT * FROM _timescaledb_catalog.compression_settings;
  relid  | compress_relid | segmentby |     orderby      | orderby_desc | orderby_nullsfirst 
---------+----------------+-----------+------------------+--------------+--------------------
 metrics |                |           | {device_id,time} | {f,t}        | {f,t}
(1 row)

ALTER TABLE metrics SET (timescaledb.compress = false);
RESET timescaledb.compression_segmentby_default_function;
SET timescaledb.compression_orderby_default_function = '';
ALTER TABLE metrics SET (timescaledb.compress = true);
NOTICE:  default segment by for hypertable "metrics" is set to "device_id"
SELECT * FROM _timescaledb_catalog.compression_settings;
  relid  | compress_relid |  segmentby  | orderby | orderby_desc | orderby_nullsfirst 
---------+----------------+-------------+---------+--------------+--------------------
 metrics |                | {device_id} | {time}  | {t}          | {t}
(1 row)

ALTER TABLE metrics SET (timescaledb.compress = false);
RESET timescaledb.compression_segmentby_default_function;
RESET timescaledb.compression_orderby_default_function;
--opposite order of columns
drop index test_idx;
CREATE UNIQUE INDEX test_idx ON metrics(time, device_id);
SELECT _timescaledb_functions.get_segmentby_defaults('public.metrics');
            get_segmentby_defaults            
----------------------------------------------
 {"columns": ["device_id"], "confidence": 10}
(1 row)

SELECT _timescaledb_functions.get_orderby_defaults('public.metrics', ARRAY['device_id']);
              get_orderby_defaults               
-------------------------------------------------
 {"clauses": ["\"time\" DESC"], "confidence": 8}
(1 row)

--use a high-cardinality column in the index
drop index test_idx;
CREATE UNIQUE INDEX test_idx ON metrics(val, time);
SELECT _timescaledb_functions.get_segmentby_defaults('public.metrics');
                                                                                                        get_segmentby_defaults                                                                                                        
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 {"columns": [], "message": "Several columns are potential segment by candidates and we do not have enough information to choose one. Please use the segment_by option to explicitly specify the segment_by column", "confidence": 0}
(1 row)

SELECT _timescaledb_functions.get_orderby_defaults('public.metrics', ARRAY[]::text[]);
                  get_orderby_defaults                  
--------------------------------------------------------
 {"clauses": ["val", "\"time\" DESC"], "confidence": 8}
(1 row)

--use a non-unique index
drop index test_idx;
CREATE INDEX test_idx ON metrics(device_id, time, val);
SELECT _timescaledb_functions.get_segmentby_defaults('public.metrics');
           get_segmentby_defaults            
---------------------------------------------
 {"columns": ["device_id"], "confidence": 8}
(1 row)

SELECT _timescaledb_functions.get_orderby_defaults('public.metrics', ARRAY['device_id']::text[]);
              get_orderby_defaults               
-------------------------------------------------
 {"clauses": ["\"time\" DESC"], "confidence": 5}
(1 row)

--another non-unique index column order
drop index test_idx;
CREATE INDEX test_idx ON metrics(val, device_id, time);
SELECT _timescaledb_functions.get_segmentby_defaults('public.metrics');
           get_segmentby_defaults            
---------------------------------------------
 {"columns": ["device_id"], "confidence": 8}
(1 row)

SELECT _timescaledb_functions.get_orderby_defaults('public.metrics', ARRAY['device_id']::text[]);
                  get_orderby_defaults                  
--------------------------------------------------------
 {"clauses": ["\"time\" DESC", "val"], "confidence": 5}
(1 row)

--use a high-cardinality column in the non-unque index
drop index test_idx;
CREATE INDEX test_idx ON metrics(val, time);
SELECT _timescaledb_functions.get_segmentby_defaults('public.metrics');
                                                                                                    get_segmentby_defaults                                                                                                    
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 {"columns": [], "message": "You do not have any indexes on columns that can be used for segment_by and thus we are not using segment_by for compression. Please make sure you are not missing any indexes", "confidence": 5}
(1 row)

SELECT _timescaledb_functions.get_orderby_defaults('public.metrics', ARRAY[]::text[]);
                  get_orderby_defaults                  
--------------------------------------------------------
 {"clauses": ["\"time\" DESC", "val"], "confidence": 5}
(1 row)

--use 2 indexes
drop index test_idx;
CREATE INDEX test_idx1 ON metrics(val, time);
CREATE INDEX test_idx2 ON metrics(device_id, time);
SELECT _timescaledb_functions.get_segmentby_defaults('public.metrics');
           get_segmentby_defaults            
---------------------------------------------
 {"columns": ["device_id"], "confidence": 8}
(1 row)

SELECT _timescaledb_functions.get_orderby_defaults('public.metrics', ARRAY['device_id']::text[]);
                  get_orderby_defaults                  
--------------------------------------------------------
 {"clauses": ["\"time\" DESC", "val"], "confidence": 5}
(1 row)

--no indexes
drop index test_idx1;
drop index test_idx2;
SELECT _timescaledb_functions.get_segmentby_defaults('public.metrics');
                                                                                                    get_segmentby_defaults                                                                                                    
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 {"columns": [], "message": "You do not have any indexes on columns that can be used for segment_by and thus we are not using segment_by for compression. Please make sure you are not missing any indexes", "confidence": 5}
(1 row)

SELECT _timescaledb_functions.get_orderby_defaults('public.metrics', ARRAY[]::text[]);
              get_orderby_defaults               
-------------------------------------------------
 {"clauses": ["\"time\" DESC"], "confidence": 5}
(1 row)

ALTER TABLE metrics SET (timescaledb.compress = true);
WARNING:  there was some uncertainty picking the default segment by for the hypertable: You do not have any indexes on columns that can be used for segment_by and thus we are not using segment_by for compression. Please make sure you are not missing any indexes
NOTICE:  default segment by for hypertable "metrics" is set to ""
NOTICE:  default order by for hypertable "metrics" is set to ""time" DESC"
SELECT * FROM _timescaledb_catalog.compression_settings;
  relid  | compress_relid | segmentby | orderby | orderby_desc | orderby_nullsfirst 
---------+----------------+-----------+---------+--------------+--------------------
 metrics |                |           | {time}  | {t}          | {t}
(1 row)

ALTER TABLE metrics SET (timescaledb.compress = false);
-- tables with no stats --
drop table metrics;
--serial case
CREATE TABLE "public"."metrics" (
     id serial NOT NULL,
    "time" timestamp with time zone NOT NULL,
    "device_id" "text",
    "val" double precision
) WITH (autovacuum_enabled=0);
SELECT create_hypertable('public.metrics', 'time', create_default_indexes=>false);
  create_hypertable   
----------------------
 (8,public,metrics,t)
(1 row)

--no indexes
SELECT _timescaledb_functions.get_segmentby_defaults('public.metrics');
                                                                                                    get_segmentby_defaults                                                                                                    
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 {"columns": [], "message": "You do not have any indexes on columns that can be used for segment_by and thus we are not using segment_by for compression. Please make sure you are not missing any indexes", "confidence": 5}
(1 row)

SELECT _timescaledb_functions.get_orderby_defaults('public.metrics', ARRAY[]::text[]);
              get_orderby_defaults               
-------------------------------------------------
 {"clauses": ["\"time\" DESC"], "confidence": 5}
(1 row)

--minimum index
CREATE UNIQUE INDEX test_idx ON metrics(id, time);
SELECT _timescaledb_functions.get_segmentby_defaults('public.metrics');
                                                                                                    get_segmentby_defaults                                                                                                    
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 {"columns": [], "message": "You do not have any indexes on columns that can be used for segment_by and thus we are not using segment_by for compression. Please make sure you are not missing any indexes", "confidence": 5}
(1 row)

--index with device_id
drop index test_idx;
CREATE UNIQUE INDEX test_idx ON metrics(device_id, id, time);
SELECT _timescaledb_functions.get_segmentby_defaults('public.metrics');
                                                            get_segmentby_defaults                                                            
----------------------------------------------------------------------------------------------------------------------------------------------
 {"columns": ["device_id"], "message": "Please make sure device_id is not a unique column and appropriate for a segment by", "confidence": 5}
(1 row)

--two indexes
drop index test_idx;
CREATE UNIQUE INDEX test_idx ON metrics(id, time);
CREATE INDEX test_idx2 ON metrics(device_id, time);
SELECT _timescaledb_functions.get_segmentby_defaults('public.metrics');
                                                            get_segmentby_defaults                                                            
----------------------------------------------------------------------------------------------------------------------------------------------
 {"columns": ["device_id"], "message": "Please make sure device_id is not a unique column and appropriate for a segment by", "confidence": 5}
(1 row)

--separate indexes
drop index test_idx;
drop index test_idx2;
CREATE INDEX test_idx ON metrics(id);
CREATE INDEX test_idx2 ON metrics(time);
SELECT _timescaledb_functions.get_segmentby_defaults('public.metrics');
                                                                                                    get_segmentby_defaults                                                                                                    
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 {"columns": [], "message": "You do not have any indexes on columns that can be used for segment_by and thus we are not using segment_by for compression. Please make sure you are not missing any indexes", "confidence": 5}
(1 row)

--make sure generated identity also works
drop table metrics;
CREATE TABLE "public"."metrics" (
     id int GENERATED ALWAYS AS IDENTITY,
    "time" timestamp with time zone NOT NULL,
    "device_id" "text",
    "val" double precision
) WITH (autovacuum_enabled=0);
SELECT create_hypertable('public.metrics', 'time', create_default_indexes=>false);
  create_hypertable   
----------------------
 (9,public,metrics,t)
(1 row)

--minimum index
CREATE UNIQUE INDEX test_idx ON metrics(id, time);
SELECT _timescaledb_functions.get_segmentby_defaults('public.metrics');
                                                                                                    get_segmentby_defaults                                                                                                    
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 {"columns": [], "message": "You do not have any indexes on columns that can be used for segment_by and thus we are not using segment_by for compression. Please make sure you are not missing any indexes", "confidence": 5}
(1 row)

--index with device_id
drop index test_idx;
CREATE UNIQUE INDEX test_idx ON metrics(device_id, id, time);
SELECT _timescaledb_functions.get_segmentby_defaults('public.metrics');
                                                            get_segmentby_defaults                                                            
----------------------------------------------------------------------------------------------------------------------------------------------
 {"columns": ["device_id"], "message": "Please make sure device_id is not a unique column and appropriate for a segment by", "confidence": 5}
(1 row)

--test default indexes
drop table metrics;
CREATE TABLE "public"."metrics" (
     id int GENERATED ALWAYS AS IDENTITY,
    "time" timestamp with time zone NOT NULL,
    "device_id" "text",
    "val" double precision
) WITH (autovacuum_enabled=0);
SELECT create_hypertable('public.metrics', 'time', create_default_indexes=>true);
   create_hypertable   
-----------------------
 (10,public,metrics,t)
(1 row)

SELECT _timescaledb_functions.get_segmentby_defaults('public.metrics');
                                                                                                    get_segmentby_defaults                                                                                                    
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 {"columns": [], "message": "You do not have any indexes on columns that can be used for segment_by and thus we are not using segment_by for compression. Please make sure you are not missing any indexes", "confidence": 5}
(1 row)

SELECT _timescaledb_functions.get_orderby_defaults('public.metrics', ARRAY[]::text[]);
              get_orderby_defaults               
-------------------------------------------------
 {"clauses": ["\"time\" DESC"], "confidence": 5}
(1 row)

CREATE INDEX test_idx ON metrics(device_id);
SELECT _timescaledb_functions.get_segmentby_defaults('public.metrics');
                                                            get_segmentby_defaults                                                            
----------------------------------------------------------------------------------------------------------------------------------------------
 {"columns": ["device_id"], "message": "Please make sure device_id is not a unique column and appropriate for a segment by", "confidence": 5}
(1 row)

SELECT _timescaledb_functions.get_orderby_defaults('public.metrics', ARRAY['device_id']);
              get_orderby_defaults               
-------------------------------------------------
 {"clauses": ["\"time\" DESC"], "confidence": 5}
(1 row)

drop index test_idx;
CREATE UNIQUE INDEX test_idx ON metrics(device_id, time);
SELECT _timescaledb_functions.get_segmentby_defaults('public.metrics');
                                                            get_segmentby_defaults                                                            
----------------------------------------------------------------------------------------------------------------------------------------------
 {"columns": ["device_id"], "message": "Please make sure device_id is not a unique column and appropriate for a segment by", "confidence": 5}
(1 row)

SELECT _timescaledb_functions.get_orderby_defaults('public.metrics', ARRAY['device_id']::text[]);
              get_orderby_defaults               
-------------------------------------------------
 {"clauses": ["\"time\" DESC"], "confidence": 8}
(1 row)

--test on an empty order_by
CREATE TABLE table1(col1 INT NOT NULL, col2 INT);
SELECT create_hypertable('table1','col1', chunk_time_interval => 10);
  create_hypertable   
----------------------
 (11,public,table1,t)
(1 row)

SELECT _timescaledb_functions.get_orderby_defaults('table1', ARRAY['col1']::text[]);
       get_orderby_defaults       
----------------------------------
 {"clauses": [], "confidence": 5}
(1 row)

ALTER TABLE table1 SET (timescaledb.compress, timescaledb.compress_segmentby = 'col1');
NOTICE:  default order by for hypertable "table1" is set to ""
SELECT * FROM _timescaledb_catalog.compression_settings;
 relid  | compress_relid | segmentby | orderby | orderby_desc | orderby_nullsfirst 
--------+----------------+-----------+---------+--------------+--------------------
 table1 |                | {col1}    |         |              | 
(1 row)

ALTER TABLE table1 SET (timescaledb.compress = false);
\set ON_ERROR_STOP 0
SET timescaledb.compression_segmentby_default_function = 'function_does_not_exist';
ERROR:  invalid value for parameter "timescaledb.compression_segmentby_default_function": "function_does_not_exist"
SET timescaledb.compression_orderby_default_function = 'function_does_not_exist';
ERROR:  invalid value for parameter "timescaledb.compression_orderby_default_function": "function_does_not_exist"
--wrong function signatures
SET timescaledb.compression_segmentby_default_function = '_timescaledb_functions.get_orderby_defaults';
ERROR:  invalid value for parameter "timescaledb.compression_segmentby_default_function": "_timescaledb_functions.get_orderby_defaults"
SET timescaledb.compression_orderby_default_function = '_timescaledb_functions.get_segmentby_defaults';
ERROR:  invalid value for parameter "timescaledb.compression_orderby_default_function": "_timescaledb_functions.get_segmentby_defaults"
\set ON_ERROR_STOP 1
SET timescaledb.compression_orderby_default_function = '_timescaledb_functions.get_orderby_defaults';
SET timescaledb.compression_segmentby_default_function = '_timescaledb_functions.get_segmentby_defaults';
RESET timescaledb.compression_segmentby_default_function;
RESET timescaledb.compression_orderby_default_function;
-- test search_path quoting
SET search_path TO '';
CREATE TABLE public.t1 (time timestamptz NOT NULL, segment_value text NOT NULL);
SELECT public.create_hypertable('public.t1', 'time');
 create_hypertable 
-------------------
 (13,public,t1,t)
(1 row)

ALTER TABLE public.t1 SET (timescaledb.compress, timescaledb.compress_orderby = 'segment_value');
WARNING:  there was some uncertainty picking the default segment by for the hypertable: You do not have any indexes on columns that can be used for segment_by and thus we are not using segment_by for compression. Please make sure you are not missing any indexes
NOTICE:  default segment by for hypertable "t1" is set to ""
RESET search_path;
-- test same named objects in different schemas with default orderbys/segmentbys
\c :TEST_DBNAME :ROLE_SUPERUSER
CREATE SCHEMA schema1;
CREATE SCHEMA schema2;
GRANT ALL ON SCHEMA schema1, schema2 to public;
\c :TEST_DBNAME :ROLE_DEFAULT_PERM_USER
-- test the case with default orderbys
CREATE TABLE schema1.page_events2 (
 time        TIMESTAMPTZ         NOT NULL,
 page        TEXT              NOT NULL
);
SELECT create_hypertable('schema1.page_events2', 'time');
      create_hypertable      
-----------------------------
 (15,schema1,page_events2,t)
(1 row)

ALTER TABLE schema1.page_events2 SET (
 timescaledb.compress,
 timescaledb.compress_segmentby = 'page'
);
NOTICE:  default order by for hypertable "page_events2" is set to ""time" DESC"
CREATE TABLE schema2.page_events2 (
 time        TIMESTAMPTZ         NOT NULL,
 page        TEXT              NOT NULL
);
SELECT create_hypertable('schema2.page_events2', 'time');
      create_hypertable      
-----------------------------
 (17,schema2,page_events2,t)
(1 row)

ALTER TABLE schema2.page_events2 SET (
 timescaledb.compress,
 timescaledb.compress_segmentby = 'page'
);
NOTICE:  default order by for hypertable "page_events2" is set to ""time" DESC"
DROP TABLE schema1.page_events2;
DROP TABLE schema2.page_events2;
-- test the case with default segmentbys
CREATE TABLE schema1.page_events2 (
 time        TIMESTAMPTZ         NOT NULL,
 id          BIGSERIAL           NOT NULL,
 page        TEXT                NOT NULL
);
SELECT create_hypertable('schema1.page_events2', 'time');
      create_hypertable      
-----------------------------
 (19,schema1,page_events2,t)
(1 row)

ALTER TABLE schema1.page_events2 SET (
 timescaledb.compress,
 timescaledb.compress_orderby = 'time desc, id asc'
);
WARNING:  there was some uncertainty picking the default segment by for the hypertable: You do not have any indexes on columns that can be used for segment_by and thus we are not using segment_by for compression. Please make sure you are not missing any indexes
NOTICE:  default segment by for hypertable "page_events2" is set to ""
CREATE TABLE schema2.page_events2 (
 time        TIMESTAMPTZ         NOT NULL UNIQUE,
 id          BIGSERIAL           NOT NULL,
 page        TEXT                NOT NULL
);
SELECT create_hypertable('schema2.page_events2', 'time');
      create_hypertable      
-----------------------------
 (21,schema2,page_events2,t)
(1 row)

ALTER TABLE schema2.page_events2 SET (
 timescaledb.compress,
 timescaledb.compress_orderby = 'time desc'
);
WARNING:  there was some uncertainty picking the default segment by for the hypertable: You do not have any indexes on columns that can be used for segment_by and thus we are not using segment_by for compression. Please make sure you are not missing any indexes
NOTICE:  default segment by for hypertable "page_events2" is set to ""
