-- This file and its contents are licensed under the Timescale License.
-- Please see the included NOTICE for copyright information and
-- LICENSE-TIMESCALE for a copy of the license.
--install necessary functions for tests
\c :TEST_DBNAME :ROLE_SUPERUSER
CREATE OR REPLACE FUNCTION ts_test_compression() RETURNS VOID
AS :TSL_MODULE_PATHNAME LANGUAGE C VOLATILE;
\ir include/compression_utils.sql
-- This file and its contents are licensed under the Timescale License.
-- Please see the included NOTICE for copyright information and
-- LICENSE-TIMESCALE for a copy of the license.
\set ECHO errors
\c :TEST_DBNAME :ROLE_DEFAULT_PERM_USER
-- helper function: float -> pseudorandom float [0..1].
create or replace function mix(x float4) returns float4 as $$ select ((hashfloat4(x) / (pow(2., 31) - 1) + 1) / 2)::float4 $$ language sql;
create or replace function mix(x timestamptz) returns float4 as $$ select mix(extract(epoch from x)::float4) $$ language sql;
------------------
-- C unit tests --
------------------
SELECT ts_test_compression();
 ts_test_compression 
---------------------
 
(1 row)

------------------------
-- BIGINT Compression --
------------------------
SELECT
  $$
  select item from base_ints order by rn
  $$ AS "QUERY"
\gset
\set TABLE_NAME base_ints
\set TYPE BIGINT
\set COMPRESSION_CMD _timescaledb_internal.compress_deltadelta(item)
\set DECOMPRESS_FORWARD_CMD _timescaledb_internal.decompress_forward(c::_timescaledb_internal.compressed_data, NULL::BIGINT)
\set DECOMPRESS_REVERSE_CMD _timescaledb_internal.decompress_reverse(c::_timescaledb_internal.compressed_data, NULL::BIGINT)
-- random order
CREATE TABLE base_ints AS SELECT row_number() OVER() as rn, item::bigint FROM (select sub.item from (SELECT generate_series(1, 1000) item) as sub ORDER BY mix(item)) sub;
\ir include/compression_test.sql
-- This file and its contents are licensed under the Timescale License.
-- Please see the included NOTICE for copyright information and
-- LICENSE-TIMESCALE for a copy of the license.
\set ECHO errors
psql:include/compression_test.sql:7: NOTICE:  table "compressed" does not exist, skipping
 algorithm  | has_nulls | compressed size 
------------+-----------+-----------------
 DELTADELTA | f         |            1720
(1 row)

                                   ?column?                                    | count 
-------------------------------------------------------------------------------+-------
 Number of rows different between original and decompressed forward (expect 0) |     0
(1 row)

                                    ?column?                                    | count 
--------------------------------------------------------------------------------+-------
 Number of rows different between original and decompressed reversed (expect 0) |     0
(1 row)

                                              ?column?                                              | count 
----------------------------------------------------------------------------------------------------+-------
 Number of rows different between original, decompressed, and decompressed deserializeed (expect 0) |     0
(1 row)

                                              ?column?                                               | ?column? 
-----------------------------------------------------------------------------------------------------+----------
 Test that deserialization, decompression, recompression, and serialization results in the same text | t
(1 row)

DROP TABLE base_ints;
-- ascending order with nulls
CREATE TABLE base_ints AS SELECT row_number() OVER() as rn, item::bigint FROM (SELECT generate_series(1, 1000) item) sub;
INSERT INTO base_ints VALUES (0, NULL), (10, NULL), (10000, NULL);
\ir include/compression_test.sql
-- This file and its contents are licensed under the Timescale License.
-- Please see the included NOTICE for copyright information and
-- LICENSE-TIMESCALE for a copy of the license.
\set ECHO errors
 algorithm  | has_nulls | compressed size 
------------+-----------+-----------------
 DELTADELTA | t         |              93
(1 row)

                                   ?column?                                    | count 
-------------------------------------------------------------------------------+-------
 Number of rows different between original and decompressed forward (expect 0) |     0
(1 row)

                                    ?column?                                    | count 
--------------------------------------------------------------------------------+-------
 Number of rows different between original and decompressed reversed (expect 0) |     0
(1 row)

                                              ?column?                                              | count 
----------------------------------------------------------------------------------------------------+-------
 Number of rows different between original, decompressed, and decompressed deserializeed (expect 0) |     0
(1 row)

                                              ?column?                                               | ?column? 
-----------------------------------------------------------------------------------------------------+----------
 Test that deserialization, decompression, recompression, and serialization results in the same text | t
(1 row)

SELECT c ints_text FROM compressed;
                                                        ints_text                                                         
--------------------------------------------------------------------------------------------------------------------------
 BAEAAAAAAAAD6AAAAAAAAAABAAAD6AAAAAIAAAAAAAAA8gAAAAAAAAACAAA8gAAAAAAAAAPrAAAAAwAAAAAAAAHxAAAAAAAABAEAADqgAAAAAAAAAAAAAAAB
(1 row)

DROP TABLE base_ints;
-- single element
CREATE TABLE base_ints AS SELECT row_number() OVER() as rn, item::bigint FROM (SELECT generate_series(1, 1) item) sub;
\ir include/compression_test.sql
-- This file and its contents are licensed under the Timescale License.
-- Please see the included NOTICE for copyright information and
-- LICENSE-TIMESCALE for a copy of the license.
\set ECHO errors
 algorithm  | has_nulls | compressed size 
------------+-----------+-----------------
 DELTADELTA | f         |              45
(1 row)

                                   ?column?                                    | count 
-------------------------------------------------------------------------------+-------
 Number of rows different between original and decompressed forward (expect 0) |     0
(1 row)

                                    ?column?                                    | count 
--------------------------------------------------------------------------------+-------
 Number of rows different between original and decompressed reversed (expect 0) |     0
(1 row)

                                              ?column?                                              | count 
----------------------------------------------------------------------------------------------------+-------
 Number of rows different between original, decompressed, and decompressed deserializeed (expect 0) |     0
(1 row)

                                              ?column?                                               | ?column? 
-----------------------------------------------------------------------------------------------------+----------
 Test that deserialization, decompression, recompression, and serialization results in the same text | t
(1 row)

DROP TABLE base_ints;
-- really big deltas
SELECT  9223372036854775807 as big_int_max \gset
SELECT -9223372036854775808	 as big_int_min \gset
CREATE TABLE base_ints AS SELECT row_number() over () as rn, item FROM
    (
        VALUES
           --big deltas
           (0), (:big_int_max), (:big_int_min), (:big_int_max), (:big_int_min),
           (0), (:big_int_min), (32), (5), (:big_int_min), (-52), (:big_int_max),
           (1000),
           --big delta_deltas
            (0), (:big_int_max), (:big_int_max), (:big_int_min), (:big_int_min), (:big_int_max), (:big_int_max),
            (0), (:big_int_max-1), (:big_int_max-1), (:big_int_min), (:big_int_min), (:big_int_max-1), (:big_int_max-1)
    ) as t(item);
\ir include/compression_test.sql
-- This file and its contents are licensed under the Timescale License.
-- Please see the included NOTICE for copyright information and
-- LICENSE-TIMESCALE for a copy of the license.
\set ECHO errors
 algorithm  | has_nulls | compressed size 
------------+-----------+-----------------
 DELTADELTA | f         |             184
(1 row)

                                   ?column?                                    | count 
-------------------------------------------------------------------------------+-------
 Number of rows different between original and decompressed forward (expect 0) |     0
(1 row)

                                    ?column?                                    | count 
--------------------------------------------------------------------------------+-------
 Number of rows different between original and decompressed reversed (expect 0) |     0
(1 row)

                                              ?column?                                              | count 
----------------------------------------------------------------------------------------------------+-------
 Number of rows different between original, decompressed, and decompressed deserializeed (expect 0) |     0
(1 row)

                                              ?column?                                               | ?column? 
-----------------------------------------------------------------------------------------------------+----------
 Test that deserialization, decompression, recompression, and serialization results in the same text | t
(1 row)

DROP TABLE base_ints;
-- NULLs
CREATE TABLE base_ints AS SELECT row_number() OVER() as rn, NULLIF(i, 5) item FROM generate_series(1::BIGINT, 10) i;
\ir include/compression_test.sql
-- This file and its contents are licensed under the Timescale License.
-- Please see the included NOTICE for copyright information and
-- LICENSE-TIMESCALE for a copy of the license.
\set ECHO errors
 algorithm  | has_nulls | compressed size 
------------+-----------+-----------------
 DELTADELTA | t         |              69
(1 row)

                                   ?column?                                    | count 
-------------------------------------------------------------------------------+-------
 Number of rows different between original and decompressed forward (expect 0) |     0
(1 row)

                                    ?column?                                    | count 
--------------------------------------------------------------------------------+-------
 Number of rows different between original and decompressed reversed (expect 0) |     0
(1 row)

                                              ?column?                                              | count 
----------------------------------------------------------------------------------------------------+-------
 Number of rows different between original, decompressed, and decompressed deserializeed (expect 0) |     0
(1 row)

                                              ?column?                                               | ?column? 
-----------------------------------------------------------------------------------------------------+----------
 Test that deserialization, decompression, recompression, and serialization results in the same text | t
(1 row)

DROP TABLE base_ints;
CREATE TABLE base_ints AS SELECT row_number() OVER() as rn, NULLIF(i, 1) item FROM generate_series(1::BIGINT, 10) i;
\ir include/compression_test.sql
-- This file and its contents are licensed under the Timescale License.
-- Please see the included NOTICE for copyright information and
-- LICENSE-TIMESCALE for a copy of the license.
\set ECHO errors
 algorithm  | has_nulls | compressed size 
------------+-----------+-----------------
 DELTADELTA | t         |              69
(1 row)

                                   ?column?                                    | count 
-------------------------------------------------------------------------------+-------
 Number of rows different between original and decompressed forward (expect 0) |     0
(1 row)

                                    ?column?                                    | count 
--------------------------------------------------------------------------------+-------
 Number of rows different between original and decompressed reversed (expect 0) |     0
(1 row)

                                              ?column?                                              | count 
----------------------------------------------------------------------------------------------------+-------
 Number of rows different between original, decompressed, and decompressed deserializeed (expect 0) |     0
(1 row)

                                              ?column?                                               | ?column? 
-----------------------------------------------------------------------------------------------------+----------
 Test that deserialization, decompression, recompression, and serialization results in the same text | t
(1 row)

DROP TABLE base_ints;
CREATE TABLE base_ints AS SELECT row_number() OVER() as rn, NULLIF(i, 10) item FROM generate_series(1::BIGINT, 10) i;
\ir include/compression_test.sql
-- This file and its contents are licensed under the Timescale License.
-- Please see the included NOTICE for copyright information and
-- LICENSE-TIMESCALE for a copy of the license.
\set ECHO errors
 algorithm  | has_nulls | compressed size 
------------+-----------+-----------------
 DELTADELTA | t         |              69
(1 row)

                                   ?column?                                    | count 
-------------------------------------------------------------------------------+-------
 Number of rows different between original and decompressed forward (expect 0) |     0
(1 row)

                                    ?column?                                    | count 
--------------------------------------------------------------------------------+-------
 Number of rows different between original and decompressed reversed (expect 0) |     0
(1 row)

                                              ?column?                                              | count 
----------------------------------------------------------------------------------------------------+-------
 Number of rows different between original, decompressed, and decompressed deserializeed (expect 0) |     0
(1 row)

                                              ?column?                                               | ?column? 
-----------------------------------------------------------------------------------------------------+----------
 Test that deserialization, decompression, recompression, and serialization results in the same text | t
(1 row)

DROP TABLE base_ints;
CREATE TABLE base_ints AS SELECT row_number() OVER() as rn, NULLIF(NULLIF(NULLIF(NULLIF(i, 2), 4), 5), 8) item FROM generate_series(1::BIGINT, 10) i;
\ir include/compression_test.sql
-- This file and its contents are licensed under the Timescale License.
-- Please see the included NOTICE for copyright information and
-- LICENSE-TIMESCALE for a copy of the license.
\set ECHO errors
 algorithm  | has_nulls | compressed size 
------------+-----------+-----------------
 DELTADELTA | t         |              69
(1 row)

                                   ?column?                                    | count 
-------------------------------------------------------------------------------+-------
 Number of rows different between original and decompressed forward (expect 0) |     0
(1 row)

                                    ?column?                                    | count 
--------------------------------------------------------------------------------+-------
 Number of rows different between original and decompressed reversed (expect 0) |     0
(1 row)

                                              ?column?                                              | count 
----------------------------------------------------------------------------------------------------+-------
 Number of rows different between original, decompressed, and decompressed deserializeed (expect 0) |     0
(1 row)

                                              ?column?                                               | ?column? 
-----------------------------------------------------------------------------------------------------+----------
 Test that deserialization, decompression, recompression, and serialization results in the same text | t
(1 row)

DROP TABLE base_ints;
------------------------
-- INT Compression --
------------------------
CREATE TABLE base_ints AS SELECT row_number() OVER() as rn, item::int FROM (select sub.item from (SELECT generate_series(1, 1000) item) as sub ORDER BY mix(item)) sub;
SELECT
  $$
  select item::bigint from base_ints order by rn
  $$ AS "QUERY"
\gset
\set TABLE_NAME base_ints
\set TYPE BIGINT
\set COMPRESSION_CMD _timescaledb_internal.compress_deltadelta(item::bigint)
\ir include/compression_test.sql
-- This file and its contents are licensed under the Timescale License.
-- Please see the included NOTICE for copyright information and
-- LICENSE-TIMESCALE for a copy of the license.
\set ECHO errors
 algorithm  | has_nulls | compressed size 
------------+-----------+-----------------
 DELTADELTA | f         |            1720
(1 row)

                                   ?column?                                    | count 
-------------------------------------------------------------------------------+-------
 Number of rows different between original and decompressed forward (expect 0) |     0
(1 row)

                                    ?column?                                    | count 
--------------------------------------------------------------------------------+-------
 Number of rows different between original and decompressed reversed (expect 0) |     0
(1 row)

                                              ?column?                                              | count 
----------------------------------------------------------------------------------------------------+-------
 Number of rows different between original, decompressed, and decompressed deserializeed (expect 0) |     0
(1 row)

                                              ?column?                                               | ?column? 
-----------------------------------------------------------------------------------------------------+----------
 Test that deserialization, decompression, recompression, and serialization results in the same text | t
(1 row)

DROP TABLE base_ints;
-----------------------------
-- TIMESTAMPTZ Compression --
-----------------------------
SELECT
  $$
  select item from base_time order by rn
  $$ AS "QUERY"
\gset
\set TYPE TIMESTAMPTZ
\set TABLE_NAME base_time
\set COMPRESSION_CMD _timescaledb_internal.compress_deltadelta(item)
\set DECOMPRESS_FORWARD_CMD _timescaledb_internal.decompress_forward(c::_timescaledb_internal.compressed_data, NULL::TIMESTAMPTZ)
\set DECOMPRESS_REVERSE_CMD _timescaledb_internal.decompress_reverse(c::_timescaledb_internal.compressed_data, NULL::TIMESTAMPTZ)
CREATE TABLE base_time AS SELECT row_number() OVER() as rn, item FROM
    (select sub.item from (SELECT generate_series('2018-03-02 1:00'::TIMESTAMPTZ, '2018-03-28 1:00', '1 hour') item) as sub ORDER BY mix(item)) sub;
\ir include/compression_test.sql
-- This file and its contents are licensed under the Timescale License.
-- Please see the included NOTICE for copyright information and
-- LICENSE-TIMESCALE for a copy of the license.
\set ECHO errors
 algorithm  | has_nulls | compressed size 
------------+-----------+-----------------
 DELTADELTA | f         |            5332
(1 row)

                                   ?column?                                    | count 
-------------------------------------------------------------------------------+-------
 Number of rows different between original and decompressed forward (expect 0) |     0
(1 row)

                                    ?column?                                    | count 
--------------------------------------------------------------------------------+-------
 Number of rows different between original and decompressed reversed (expect 0) |     0
(1 row)

                                              ?column?                                              | count 
----------------------------------------------------------------------------------------------------+-------
 Number of rows different between original, decompressed, and decompressed deserializeed (expect 0) |     0
(1 row)

                                              ?column?                                               | ?column? 
-----------------------------------------------------------------------------------------------------+----------
 Test that deserialization, decompression, recompression, and serialization results in the same text | t
(1 row)

DROP TABLE base_time;
------------------------
-- FLOAT4 Compression --
------------------------
SELECT
  $$
  select item from base_floats order by rn
  $$ AS "QUERY"
\gset
\set TABLE_NAME base_floats
SELECT 'real' as "TYPE" \gset
\set COMPRESSION_CMD _timescaledb_internal.compress_gorilla(item)
SELECT '_timescaledb_internal.decompress_forward(c::_timescaledb_internal.compressed_data, NULL::float4)' AS "DECOMPRESS_FORWARD_CMD" \gset
SELECT '_timescaledb_internal.decompress_reverse(c::_timescaledb_internal.compressed_data, NULL::float4)' AS "DECOMPRESS_REVERSE_CMD" \gset
CREATE TABLE base_floats AS SELECT row_number() OVER() as rn, item::float4 FROM
    (select sub.item from (SELECT generate_series(1, 1000) item) as sub ORDER BY mix(item)) sub;
\ir include/compression_test.sql
-- This file and its contents are licensed under the Timescale License.
-- Please see the included NOTICE for copyright information and
-- LICENSE-TIMESCALE for a copy of the license.
\set ECHO errors
 algorithm | has_nulls | compressed size 
-----------+-----------+-----------------
 GORILLA   | f         |            1760
(1 row)

                                   ?column?                                    | count 
-------------------------------------------------------------------------------+-------
 Number of rows different between original and decompressed forward (expect 0) |     0
(1 row)

                                    ?column?                                    | count 
--------------------------------------------------------------------------------+-------
 Number of rows different between original and decompressed reversed (expect 0) |     0
(1 row)

                                              ?column?                                              | count 
----------------------------------------------------------------------------------------------------+-------
 Number of rows different between original, decompressed, and decompressed deserializeed (expect 0) |     0
(1 row)

                                              ?column?                                               | ?column? 
-----------------------------------------------------------------------------------------------------+----------
 Test that deserialization, decompression, recompression, and serialization results in the same text | t
(1 row)

SELECT c gorilla_text FROM compressed;
gorilla_text

 AwAAAAAARA4AAAAAA+gAAAABAAAAAAAAAA8AAD6AAAAAAQAAA+gAAAAEAAAAAAAA8fEAAAAAAAAeAQAAIDAAAAAAAAAAAAAAABkAABZQAAAAAAAAAAEwAACWmGWqmmEAAAAIAAAAAQAAAAAAAAAFAAAAamDTFJEAAADMGRGACGA5CxE1kwB1AJ8Ac4AyuXv2ugHVD0MFUc5gBQL3cBGRpAwQYYL0ITfOrOikQfX2jw3357GbZBXdK+Ret/e3F7lL8NGsccRMIDhPxYDBQkbmx8UHeD2DsNbIO304DX6EFsCq/jin8WhwAjXj8LoPLcuQkLmEzC7/Df/3RziqQAPIOu9JABCWc++kvJ3nR8L8t5n/I/JwKA89o+yMIqGeeOxKDcf2gddLQhOpA6h20EJ8g9Oe/BzghAN/W7qOFwNIDd6uiLvJB5aRlM6udWjwOJO71AUQzx6glALoo9v9cnq5DBByv64OgcSRxJ94V6R4WC0+nwOQBPSgrzld9ECj115WgngIYOOkQZDi2AHAsHyAphWvrnvgeg5bl2G4D8fmFVAYB1AVAzPIkPIKSMlxp95/V/Gv3w7XtPayaMAoQk97AX/IIWTKfqAFUGj2uiC+ubOj0nJPN4XoKCEj/Fg6BnBCPY32oBnGIDeBivD2CH2fBAAwa7mAdQCknitjdT+SgRPhYgwcHfD+J/aCH+k9ngrvZpB44oHwPj226RfC++eMvAXyD3IbL3Rz+HHBuAYYADpH0DyAroIX7ZBNGOsFhf/cnsfYPrzKDyJG6BdPYCrhn3awKRmXyH71/KhBeRAWgmwNEGl90AeHT/K/4gxAgeU5JQqBy8NDpiKADoOeeGOj3NfF3gj2b7AAM73yKe5/OPVXtWCUXgEi8IB9wDWF+qo1b0hTyWAbO/n+VwaHsgUHm4O94SxuFGD80MmAGAeOIQg5ptqAho0LmGJM9gd+Ag2T6lwi7v/B+ygdgBQNg8HenvmF/A96ATcIUPRYcCeHhjYgGI1QTq++AFg0GuDaePfCYBH3xrz+ggZftwVjOgJUOYFMBycY/IAYPzxoDHBcD0cFx/8g8+XACPZnGQwD7CpaHi/a+YDbeaAvu2UDXk8CMBuDmBG+RAgfOf8kEX6bwHw7B+Cm+Tfwf+Ir7nPuv6/8eBlBEN48URxX13y/JUDB2M6ofyMnB3PvHl4AOH/T14C+J/Of9eIAsAPT1ntIFyAqDmfU/y48ClneX3b/eiuq8CIfOQwyOZgAQv6X7YcIrsshdUuFEwtbISX2kCnZLo93VbCiDcWObGNjINq2ouAKyO4PACn8MXAKfpmicul8dCke2W4C8v3nk0MiCE/Rwl96/u/8fsAXAYj8MAc6MDMF7DEvHn+wfeBg80h6RwHN4VmiN+ALwc4AL8QHo8QA86xB1AdQKLgIcj8cdUJIUfef6APfvO/roaGQ1cgeCu/C/puRs0sNbq2ImFBcpAMhfwEHVLniET236f9w+FgJGUgeB1T72A0Il7GDZfrgpNzOdASMIX6azPhFEcAENlkauxf/H5p6kwL73FBdTwcvVetvk/5/356UDd84gzvAPVwNnerfEbw6N+mCsA8gXPcv9HjEEZ+5D0FGzcYygKgMvVYIGxIsc74kuAKfUt/BbxSHM72QZCdQx0JCGRPqH5DpVo5Id+7C60M3CBkDLAnzFPBDjhyUD+ft/QCvOModACHlIhoV88kgeNecUPMH9IFfeQPF/KBHEMBTdiRAHufkxIDV2EWCnBm+//MON3KrwQO4k1s3AiAR6NjPPa4Bn3UEMJ+Hv8MfXQsxJG8HeYCuALzkHCGzcbTu/P/z3mz7AIMEUGtDbBNgNhCQSHGAlJiryQAMFVdLg2gmgZXuL+l9AIBo5uI2EfJZkA5/8cmAE4Pb0iFeeysEDph+HvQGCBrvZ/cEydPPXfDN7RjDst3Wwl8K/ygWfCF9wXgJEEV6j0t/B/FihObom+y/TsHt4ZBiBJCQBcebHYwWPp31WAyBHMXCgAygIwcA/4YENICclEEO+j9DeioCu0/uP958eB19G8rbCi/w1TBBMrwyCDCdyH+AgLgsAxTigwQGB+i7LXXCSge/Q5ZoKQmD3kFg6xcm67dsNxGsbpQawFmBT2V6M85hqgSIIENgiwAh/4qwKw1b7fyMgzQNPEsJwMyQ5M8xLB8vMwUD7ADPYgTQLoCuPNZ4gEgYUET5wGIHDCz+EJSFROiP50P97gGT8HFbBfCmeDvA2lQih1n5+PSMkBwNqerg7Aaj/t6ISNwx1Mk2ADm0AeHMHx6F8ND7QHxdS9XgMwAoUK5HbnwN8T+C/3g5YBPdBdTTeDQAAAAAAenjSw==
(1 row)

DROP TABLE  base_floats;
-- single element
CREATE TABLE base_floats AS SELECT row_number() OVER() as rn, item::float4 FROM (SELECT generate_series(1, 1) item) sub;
\ir include/compression_test.sql
-- This file and its contents are licensed under the Timescale License.
-- Please see the included NOTICE for copyright information and
-- LICENSE-TIMESCALE for a copy of the license.
\set ECHO errors
 algorithm | has_nulls | compressed size 
-----------+-----------+-----------------
 GORILLA   | f         |             109
(1 row)

                                   ?column?                                    | count 
-------------------------------------------------------------------------------+-------
 Number of rows different between original and decompressed forward (expect 0) |     0
(1 row)

                                    ?column?                                    | count 
--------------------------------------------------------------------------------+-------
 Number of rows different between original and decompressed reversed (expect 0) |     0
(1 row)

                                              ?column?                                              | count 
----------------------------------------------------------------------------------------------------+-------
 Number of rows different between original, decompressed, and decompressed deserializeed (expect 0) |     0
(1 row)

                                              ?column?                                               | ?column? 
-----------------------------------------------------------------------------------------------------+----------
 Test that deserialization, decompression, recompression, and serialization results in the same text | t
(1 row)

DROP TABLE base_floats;
--special values
CREATE TABLE base_floats AS SELECT row_number() over () as rn, item FROM
    (
        VALUES
           --special
           (0::float4), ('Infinity'), ('-Infinity'), ('NaN'),
           --big deltas
           (0), ('Infinity'), ('-Infinity'), ('Infinity'), ('-Infinity'),
           (0), ('-Infinity'), (32), (5), ('-Infinity'), (-52), ('Infinity'),
           (1000),
           --big delta_deltas
            (0), ('Infinity'), ('Infinity'), ('-Infinity'), ('-Infinity'), ('Infinity'), ('Infinity')
    ) as t(item);
\ir include/compression_test.sql
-- This file and its contents are licensed under the Timescale License.
-- Please see the included NOTICE for copyright information and
-- LICENSE-TIMESCALE for a copy of the license.
\set ECHO errors
 algorithm | has_nulls | compressed size 
-----------+-----------+-----------------
 GORILLA   | f         |             136
(1 row)

                                   ?column?                                    | count 
-------------------------------------------------------------------------------+-------
 Number of rows different between original and decompressed forward (expect 0) |     0
(1 row)

                                    ?column?                                    | count 
--------------------------------------------------------------------------------+-------
 Number of rows different between original and decompressed reversed (expect 0) |     0
(1 row)

                                              ?column?                                              | count 
----------------------------------------------------------------------------------------------------+-------
 Number of rows different between original, decompressed, and decompressed deserializeed (expect 0) |     0
(1 row)

                                              ?column?                                               | ?column? 
-----------------------------------------------------------------------------------------------------+----------
 Test that deserialization, decompression, recompression, and serialization results in the same text | t
(1 row)

DROP TABLE  base_floats;
-- all 0s
CREATE TABLE base_floats AS SELECT row_number() over () as rn, 0::float4 as item FROM (SELECT generate_series(1, 1000) ) j;
\ir include/compression_test.sql
-- This file and its contents are licensed under the Timescale License.
-- Please see the included NOTICE for copyright information and
-- LICENSE-TIMESCALE for a copy of the license.
\set ECHO errors
 algorithm | has_nulls | compressed size 
-----------+-----------+-----------------
 GORILLA   | f         |             109
(1 row)

                                   ?column?                                    | count 
-------------------------------------------------------------------------------+-------
 Number of rows different between original and decompressed forward (expect 0) |     0
(1 row)

                                    ?column?                                    | count 
--------------------------------------------------------------------------------+-------
 Number of rows different between original and decompressed reversed (expect 0) |     0
(1 row)

                                              ?column?                                              | count 
----------------------------------------------------------------------------------------------------+-------
 Number of rows different between original, decompressed, and decompressed deserializeed (expect 0) |     0
(1 row)

                                              ?column?                                               | ?column? 
-----------------------------------------------------------------------------------------------------+----------
 Test that deserialization, decompression, recompression, and serialization results in the same text | t
(1 row)

DROP TABLE  base_floats;
-- NULLs
CREATE TABLE base_floats AS SELECT row_number() OVER() as rn, NULLIF(i, 5)::float4 item FROM generate_series(1, 10) i;
\ir include/compression_test.sql
-- This file and its contents are licensed under the Timescale License.
-- Please see the included NOTICE for copyright information and
-- LICENSE-TIMESCALE for a copy of the license.
\set ECHO errors
 algorithm | has_nulls | compressed size 
-----------+-----------+-----------------
 GORILLA   | t         |             136
(1 row)

                                   ?column?                                    | count 
-------------------------------------------------------------------------------+-------
 Number of rows different between original and decompressed forward (expect 0) |     0
(1 row)

                                    ?column?                                    | count 
--------------------------------------------------------------------------------+-------
 Number of rows different between original and decompressed reversed (expect 0) |     0
(1 row)

                                              ?column?                                              | count 
----------------------------------------------------------------------------------------------------+-------
 Number of rows different between original, decompressed, and decompressed deserializeed (expect 0) |     0
(1 row)

                                              ?column?                                               | ?column? 
-----------------------------------------------------------------------------------------------------+----------
 Test that deserialization, decompression, recompression, and serialization results in the same text | t
(1 row)

DROP TABLE base_floats;
CREATE TABLE base_floats AS SELECT row_number() OVER() as rn, NULLIF(i, 1)::float4 item FROM generate_series(1, 10) i;
\ir include/compression_test.sql
-- This file and its contents are licensed under the Timescale License.
-- Please see the included NOTICE for copyright information and
-- LICENSE-TIMESCALE for a copy of the license.
\set ECHO errors
 algorithm | has_nulls | compressed size 
-----------+-----------+-----------------
 GORILLA   | t         |             136
(1 row)

                                   ?column?                                    | count 
-------------------------------------------------------------------------------+-------
 Number of rows different between original and decompressed forward (expect 0) |     0
(1 row)

                                    ?column?                                    | count 
--------------------------------------------------------------------------------+-------
 Number of rows different between original and decompressed reversed (expect 0) |     0
(1 row)

                                              ?column?                                              | count 
----------------------------------------------------------------------------------------------------+-------
 Number of rows different between original, decompressed, and decompressed deserializeed (expect 0) |     0
(1 row)

                                              ?column?                                               | ?column? 
-----------------------------------------------------------------------------------------------------+----------
 Test that deserialization, decompression, recompression, and serialization results in the same text | t
(1 row)

DROP TABLE base_floats;
CREATE TABLE base_floats AS SELECT row_number() OVER() as rn, NULLIF(i, 10)::float4 item FROM generate_series(1, 10) i;
\ir include/compression_test.sql
-- This file and its contents are licensed under the Timescale License.
-- Please see the included NOTICE for copyright information and
-- LICENSE-TIMESCALE for a copy of the license.
\set ECHO errors
 algorithm | has_nulls | compressed size 
-----------+-----------+-----------------
 GORILLA   | t         |             136
(1 row)

                                   ?column?                                    | count 
-------------------------------------------------------------------------------+-------
 Number of rows different between original and decompressed forward (expect 0) |     0
(1 row)

                                    ?column?                                    | count 
--------------------------------------------------------------------------------+-------
 Number of rows different between original and decompressed reversed (expect 0) |     0
(1 row)

                                              ?column?                                              | count 
----------------------------------------------------------------------------------------------------+-------
 Number of rows different between original, decompressed, and decompressed deserializeed (expect 0) |     0
(1 row)

                                              ?column?                                               | ?column? 
-----------------------------------------------------------------------------------------------------+----------
 Test that deserialization, decompression, recompression, and serialization results in the same text | t
(1 row)

DROP TABLE base_floats;
CREATE TABLE base_floats AS SELECT row_number() OVER() as rn, NULLIF(NULLIF(NULLIF(NULLIF(i, 2), 4), 5), 8)::float4 item FROM generate_series(1, 10) i;
\ir include/compression_test.sql
-- This file and its contents are licensed under the Timescale License.
-- Please see the included NOTICE for copyright information and
-- LICENSE-TIMESCALE for a copy of the license.
\set ECHO errors
 algorithm | has_nulls | compressed size 
-----------+-----------+-----------------
 GORILLA   | t         |             136
(1 row)

                                   ?column?                                    | count 
-------------------------------------------------------------------------------+-------
 Number of rows different between original and decompressed forward (expect 0) |     0
(1 row)

                                    ?column?                                    | count 
--------------------------------------------------------------------------------+-------
 Number of rows different between original and decompressed reversed (expect 0) |     0
(1 row)

                                              ?column?                                              | count 
----------------------------------------------------------------------------------------------------+-------
 Number of rows different between original, decompressed, and decompressed deserializeed (expect 0) |     0
(1 row)

                                              ?column?                                               | ?column? 
-----------------------------------------------------------------------------------------------------+----------
 Test that deserialization, decompression, recompression, and serialization results in the same text | t
(1 row)

DROP TABLE base_floats;
------------------------
-- DOUBLE Compression --
------------------------
SELECT
  $$
  select item from  base_doubles order by rn
  $$ AS "QUERY"
\gset
\set TABLE_NAME base_doubles
SELECT 'DOUBLE PRECISION' as "TYPE" \gset
\set COMPRESSION_CMD _timescaledb_internal.compress_gorilla(item)
SELECT '_timescaledb_internal.decompress_forward(c::_timescaledb_internal.compressed_data, NULL::DOUBLE PRECISION)' AS "DECOMPRESS_FORWARD_CMD" \gset
SELECT '_timescaledb_internal.decompress_reverse(c::_timescaledb_internal.compressed_data, NULL::DOUBLE PRECISION)' AS "DECOMPRESS_REVERSE_CMD" \gset
CREATE TABLE base_doubles AS SELECT row_number() OVER() as rn, item::double precision FROM
    (select sub.item from (SELECT generate_series(1, 1000) item) as sub ORDER BY mix(item)) sub;
\ir include/compression_test.sql
-- This file and its contents are licensed under the Timescale License.
-- Please see the included NOTICE for copyright information and
-- LICENSE-TIMESCALE for a copy of the license.
\set ECHO errors
 algorithm | has_nulls | compressed size 
-----------+-----------+-----------------
 GORILLA   | f         |            1752
(1 row)

                                   ?column?                                    | count 
-------------------------------------------------------------------------------+-------
 Number of rows different between original and decompressed forward (expect 0) |     0
(1 row)

                                    ?column?                                    | count 
--------------------------------------------------------------------------------+-------
 Number of rows different between original and decompressed reversed (expect 0) |     0
(1 row)

                                              ?column?                                              | count 
----------------------------------------------------------------------------------------------------+-------
 Number of rows different between original, decompressed, and decompressed deserializeed (expect 0) |     0
(1 row)

                                              ?column?                                               | ?column? 
-----------------------------------------------------------------------------------------------------+----------
 Test that deserialization, decompression, recompression, and serialization results in the same text | t
(1 row)

SELECT c gorilla_text FROM compressed;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         gorilla_text

 AwBAgcAAAAAAAAAAA+gAAAABAAAAAAAAAA8AAD6AAAAAAQAAA+gAAAAEAAAAAAAA8fEAAAAAAAAR1QAAIDAAAAAAAAAAAAAAABkAABZQAAAAAAAAAAE8AgwEgwgwosEAAAAKAAAAAQAAAAAAAAAFAAGpm1LDoPQAAADLN/njQwHIWBE1b0qGg6vyfWc5zACgXuZXLzSBggwwSGCq+dWdFIguAjLhvvz2M36EJqV8i9b+/r7RKX4aNY4sgrsHCfiwGDbi99j4oO8HuImE2QdvpwGoSNzYFV/HFPB2GgBGvH4XT9CCchIXMJmeLQ6//ujnFUHluQdd6SACBd/h9JeTvOjoAHnzP+R+ThLOfbR9kYRUOF+WiUG4/tAlAedCdSB1DtPPHZB6c9+Dmulob+t3UcL6CE+71dEXeTwQgDKZ1c6tAGkBd3qAohng8tKAXRR7f74HEiGCDlf1w9QSkjiT7wruT1cFp9PgcgHQOBXnK76IFI8LytBPAQwAnpQyHFsAOBR66xTCtfXPfHSIy3LsNwH2D5CqAwDqArwPQRIeQUkZOPzCz+r+NfvgZnme1k0YBQ40+2Av+QQsgdr2AKoNHtdISe82dHpOSflP1AUEJH+LBBfXCEexvtQG8L0G8DFeHsdAzuCABg13IzjEFJPFbG6hD7MifCxBg5AOoMT+0EP9J/JQXezSDxxDvh/Htt0i+EezwZeAvkHuUD4Hjn8OODcffPEHSPoHkANl7v2yCaMdYMMA+5PY+wfV0ELkSN0C6eCwvzPu1gUjN5lB3r+VCC8sBVxNgaINL7L5D+n+V/xBggLQpyShUDl6APDEUAHQc8gQPHua+LvBGGh0AAZ3vkUvDHQeqvasEp7N9l4QD7gGvc/nRq3pCnkrwCR/P8rg0PC/VfNwd7wljANnH5oZMAMWQKAhBzTbUA3CjHMMSZ7A4PHEsn1LhF3Q0aFlA7ACga/AQdPfML+B//g/4Qoeiw4QeDvGxAMRqg9AJsALBoNcBPDw+EwCPvjJ1fdAy/bgrHtPHocwKYDk95/QAwfnjQGHQEro4Lj/5AMfkAEezOMhjguBS0PF+18+fLg0BfdsoGB9hUYDcHMCMBtvA+c/5IIryeAPh2D8FNfIgQ/8RX3Ob9N4/48DKCIfJv4jivrvl/3X9TsZ1Q/ke8eKfePLwAcEqBjwF8T+c+Tg7hYAenrPb/p6BUHM+p/+vEBLO8vu3+kC5F4EQ+chhceBAAhf0v2vRXXZZC6pcKZHM2QkvtIFMOEV7uq2FEGiYWuMbGQbVtsl0VkdweAFOLHNAU/TNE5UXAGFI9stwF+GLvJoZEEJ/S+O71/d/4/eX7wxH4YA51o4S72GJePP+ALgDB5pD0jmBmArNEb8AXYPvAX4gPR4gDm8iDqA6gUYOcBH446oSQAedQAe/7zv9wEONXIHgpR95/rkbNLDeuhoZBQXKQD78L+m1S54hFurYibcPhYCSF/AQdU+9gNPbfp/2X64KQZSB4EjCF+mgiXsYHABDZZ3M50Bx+aepPM+EUQXU8HLxq7F//+f9+eAvvcUIM7wD1V62+S3xG8OpQN3zgPIFz3XA2d6BGfuQ836YKyMoCoDC/0eMcSLHO+QUbNx1LfwW+9VggZkGQnUCS4Ap0T6h+QFIczvHfuwuvHQkIZAywJ8+lWjkoclA/nQzcIGzjKHQAU8EOOFfPJIO39AKzzB/SBIeUiGfygRxB415xQQB7n5F95A8RFgpwZwFN2Jjdyq8HEgNXbNwIgEb7/8w2uAZ91A7iTW7/DH13o2M8/B3mArgQwn4Qhs3G0CzEkb95s+wAAvOQfQ2wTYO78//BxgJSYgwRQaBVXS4M2EJBJ7i/pfavJAA7iNhHyaCaBl/HJgBMAgGjlXnsrBFmQDn70Bggag9vSIMnTz10OmH4cw7Ld1u9n9wcoFnwh8M3tGRBFeo/CXwr9YoTm6H3BeArB7eGQS38H8AXHmx2b7L9N9VgMgWIEkJAMoCMHjBY+nDSAnJQcxcKDQ3oqAgD/hgfefHgdQQ76Pwov8NW7T+48MggwnX0byti4LAMUMEEyvgfouy3If4CDv0OWaOKDBAZBYOsXdcJKBDcRrG4pCYPdgU9leibrt24EiCBDlBrAWf+KsCszzmGojIM0DWCLACDMkOTPDVvt/zMFA+w8SwnA0C6ArjEsHyxIGFBEAM9iBwws/hA81niAj+dD/fnAYgRxWwXwlIVE6NpUIofuAZPwjJAcDaZ4O8AGo/7eWfn49dTJNgCp6uDtzB8ehYhI3DB8XUvVObQB4FCuR27w0PtDgv94OeAzACnU03g0fA3xPAHp40tgE90E=
(1 row)

DROP TABLE  base_doubles;
-- single element
CREATE TABLE base_doubles AS SELECT row_number() OVER() as rn, item::double precision FROM (SELECT generate_series(1, 1) item) sub;
\ir include/compression_test.sql
-- This file and its contents are licensed under the Timescale License.
-- Please see the included NOTICE for copyright information and
-- LICENSE-TIMESCALE for a copy of the license.
\set ECHO errors
 algorithm | has_nulls | compressed size 
-----------+-----------+-----------------
 GORILLA   | f         |             109
(1 row)

                                   ?column?                                    | count 
-------------------------------------------------------------------------------+-------
 Number of rows different between original and decompressed forward (expect 0) |     0
(1 row)

                                    ?column?                                    | count 
--------------------------------------------------------------------------------+-------
 Number of rows different between original and decompressed reversed (expect 0) |     0
(1 row)

                                              ?column?                                              | count 
----------------------------------------------------------------------------------------------------+-------
 Number of rows different between original, decompressed, and decompressed deserializeed (expect 0) |     0
(1 row)

                                              ?column?                                               | ?column? 
-----------------------------------------------------------------------------------------------------+----------
 Test that deserialization, decompression, recompression, and serialization results in the same text | t
(1 row)

DROP TABLE base_doubles;
--special values
CREATE TABLE base_doubles AS SELECT row_number() over () as rn, item FROM
    (
        VALUES
           --special
           (0::double precision), ('Infinity'), ('-Infinity'), ('NaN'),
           --big deltas
           (0), ('Infinity'), ('-Infinity'), ('Infinity'), ('-Infinity'),
           (0), ('-Infinity'), (32), (5), ('-Infinity'), (-52), ('Infinity'),
           (1000),
           --big delta_deltas
            (0), ('Infinity'), ('Infinity'), ('-Infinity'), ('-Infinity'), ('Infinity'), ('Infinity')
    ) as t(item);
\ir include/compression_test.sql
-- This file and its contents are licensed under the Timescale License.
-- Please see the included NOTICE for copyright information and
-- LICENSE-TIMESCALE for a copy of the license.
\set ECHO errors
 algorithm | has_nulls | compressed size 
-----------+-----------+-----------------
 GORILLA   | f         |             144
(1 row)

                                   ?column?                                    | count 
-------------------------------------------------------------------------------+-------
 Number of rows different between original and decompressed forward (expect 0) |     0
(1 row)

                                    ?column?                                    | count 
--------------------------------------------------------------------------------+-------
 Number of rows different between original and decompressed reversed (expect 0) |     0
(1 row)

                                              ?column?                                              | count 
----------------------------------------------------------------------------------------------------+-------
 Number of rows different between original, decompressed, and decompressed deserializeed (expect 0) |     0
(1 row)

                                              ?column?                                               | ?column? 
-----------------------------------------------------------------------------------------------------+----------
 Test that deserialization, decompression, recompression, and serialization results in the same text | t
(1 row)

DROP TABLE  base_doubles;
-- all 0s
CREATE TABLE base_doubles AS SELECT row_number() over () as rn, 0::FLOAT(50) as item FROM (SELECT generate_series(1, 1000) ) j;
\ir include/compression_test.sql
-- This file and its contents are licensed under the Timescale License.
-- Please see the included NOTICE for copyright information and
-- LICENSE-TIMESCALE for a copy of the license.
\set ECHO errors
 algorithm | has_nulls | compressed size 
-----------+-----------+-----------------
 GORILLA   | f         |             109
(1 row)

                                   ?column?                                    | count 
-------------------------------------------------------------------------------+-------
 Number of rows different between original and decompressed forward (expect 0) |     0
(1 row)

                                    ?column?                                    | count 
--------------------------------------------------------------------------------+-------
 Number of rows different between original and decompressed reversed (expect 0) |     0
(1 row)

                                              ?column?                                              | count 
----------------------------------------------------------------------------------------------------+-------
 Number of rows different between original, decompressed, and decompressed deserializeed (expect 0) |     0
(1 row)

                                              ?column?                                               | ?column? 
-----------------------------------------------------------------------------------------------------+----------
 Test that deserialization, decompression, recompression, and serialization results in the same text | t
(1 row)

DROP TABLE  base_doubles;
-- NULLs
CREATE TABLE base_doubles AS SELECT row_number() OVER() as rn, NULLIF(i, 5)::DOUBLE PRECISION item FROM generate_series(1, 10) i;
\ir include/compression_test.sql
-- This file and its contents are licensed under the Timescale License.
-- Please see the included NOTICE for copyright information and
-- LICENSE-TIMESCALE for a copy of the license.
\set ECHO errors
 algorithm | has_nulls | compressed size 
-----------+-----------+-----------------
 GORILLA   | t         |             136
(1 row)

                                   ?column?                                    | count 
-------------------------------------------------------------------------------+-------
 Number of rows different between original and decompressed forward (expect 0) |     0
(1 row)

                                    ?column?                                    | count 
--------------------------------------------------------------------------------+-------
 Number of rows different between original and decompressed reversed (expect 0) |     0
(1 row)

                                              ?column?                                              | count 
----------------------------------------------------------------------------------------------------+-------
 Number of rows different between original, decompressed, and decompressed deserializeed (expect 0) |     0
(1 row)

                                              ?column?                                               | ?column? 
-----------------------------------------------------------------------------------------------------+----------
 Test that deserialization, decompression, recompression, and serialization results in the same text | t
(1 row)

DROP TABLE base_doubles;
CREATE TABLE base_doubles AS SELECT row_number() OVER() as rn, NULLIF(i, 1)::DOUBLE PRECISION item FROM generate_series(1, 10) i;
\ir include/compression_test.sql
-- This file and its contents are licensed under the Timescale License.
-- Please see the included NOTICE for copyright information and
-- LICENSE-TIMESCALE for a copy of the license.
\set ECHO errors
 algorithm | has_nulls | compressed size 
-----------+-----------+-----------------
 GORILLA   | t         |             136
(1 row)

                                   ?column?                                    | count 
-------------------------------------------------------------------------------+-------
 Number of rows different between original and decompressed forward (expect 0) |     0
(1 row)

                                    ?column?                                    | count 
--------------------------------------------------------------------------------+-------
 Number of rows different between original and decompressed reversed (expect 0) |     0
(1 row)

                                              ?column?                                              | count 
----------------------------------------------------------------------------------------------------+-------
 Number of rows different between original, decompressed, and decompressed deserializeed (expect 0) |     0
(1 row)

                                              ?column?                                               | ?column? 
-----------------------------------------------------------------------------------------------------+----------
 Test that deserialization, decompression, recompression, and serialization results in the same text | t
(1 row)

DROP TABLE base_doubles;
CREATE TABLE base_doubles AS SELECT row_number() OVER() as rn, NULLIF(i, 10)::DOUBLE PRECISION item FROM generate_series(1, 10) i;
\ir include/compression_test.sql
-- This file and its contents are licensed under the Timescale License.
-- Please see the included NOTICE for copyright information and
-- LICENSE-TIMESCALE for a copy of the license.
\set ECHO errors
 algorithm | has_nulls | compressed size 
-----------+-----------+-----------------
 GORILLA   | t         |             136
(1 row)

                                   ?column?                                    | count 
-------------------------------------------------------------------------------+-------
 Number of rows different between original and decompressed forward (expect 0) |     0
(1 row)

                                    ?column?                                    | count 
--------------------------------------------------------------------------------+-------
 Number of rows different between original and decompressed reversed (expect 0) |     0
(1 row)

                                              ?column?                                              | count 
----------------------------------------------------------------------------------------------------+-------
 Number of rows different between original, decompressed, and decompressed deserializeed (expect 0) |     0
(1 row)

                                              ?column?                                               | ?column? 
-----------------------------------------------------------------------------------------------------+----------
 Test that deserialization, decompression, recompression, and serialization results in the same text | t
(1 row)

DROP TABLE base_doubles;
CREATE TABLE base_doubles AS SELECT row_number() OVER() as rn, NULLIF(NULLIF(NULLIF(NULLIF(i, 2), 4), 5), 8)::DOUBLE PRECISION item FROM generate_series(1, 10) i;
\ir include/compression_test.sql
-- This file and its contents are licensed under the Timescale License.
-- Please see the included NOTICE for copyright information and
-- LICENSE-TIMESCALE for a copy of the license.
\set ECHO errors
 algorithm | has_nulls | compressed size 
-----------+-----------+-----------------
 GORILLA   | t         |             136
(1 row)

                                   ?column?                                    | count 
-------------------------------------------------------------------------------+-------
 Number of rows different between original and decompressed forward (expect 0) |     0
(1 row)

                                    ?column?                                    | count 
--------------------------------------------------------------------------------+-------
 Number of rows different between original and decompressed reversed (expect 0) |     0
(1 row)

                                              ?column?                                              | count 
----------------------------------------------------------------------------------------------------+-------
 Number of rows different between original, decompressed, and decompressed deserializeed (expect 0) |     0
(1 row)

                                              ?column?                                               | ?column? 
-----------------------------------------------------------------------------------------------------+----------
 Test that deserialization, decompression, recompression, and serialization results in the same text | t
(1 row)

DROP TABLE base_doubles;
------------------------
-- Dictionary Compression --
------------------------
SELECT
  $$
  select item from  base_texts order by rn
  $$ AS "QUERY"
\gset
\set TABLE_NAME base_texts
SELECT 'TEXT' as "TYPE" \gset
\set COMPRESSION_CMD _timescaledb_internal.compress_dictionary(item)
\set DECOMPRESS_FORWARD_CMD _timescaledb_internal.decompress_forward(c::_timescaledb_internal.compressed_data, NULL::TEXT)
\set DECOMPRESS_REVERSE_CMD _timescaledb_internal.decompress_reverse(c::_timescaledb_internal.compressed_data, NULL::TEXT)
-- high cardinality
CREATE TABLE base_texts AS SELECT row_number() OVER() as rn, item::text FROM
    (select sub.item from (SELECT generate_series(1, 1000) item) as sub ORDER BY mix(item)) sub;
\ir include/compression_test.sql
-- This file and its contents are licensed under the Timescale License.
-- Please see the included NOTICE for copyright information and
-- LICENSE-TIMESCALE for a copy of the license.
\set ECHO errors
 algorithm | has_nulls | compressed size 
-----------+-----------+-----------------
 ARRAY     | f         |            4305
(1 row)

                                   ?column?                                    | count 
-------------------------------------------------------------------------------+-------
 Number of rows different between original and decompressed forward (expect 0) |     0
(1 row)

                                    ?column?                                    | count 
--------------------------------------------------------------------------------+-------
 Number of rows different between original and decompressed reversed (expect 0) |     0
(1 row)

                                              ?column?                                              | count 
----------------------------------------------------------------------------------------------------+-------
 Number of rows different between original, decompressed, and decompressed deserializeed (expect 0) |     0
(1 row)

                                              ?column?                                               | ?column? 
-----------------------------------------------------------------------------------------------------+----------
 Test that deserialization, decompression, recompression, and serialization results in the same text | t
(1 row)

SELECT c from compressed;
c

 AQBwZ19jYXRhbG9nAHRleHQAAAEAAAPoAAAAAzgyMQAAAAMyMzYAAAADNDY4AAAAAzIzMAAAAAI4NAAAAAMzMDAAAAADNDU0AAAAAzY4MgAAAAM4OTUAAAADNzM1AAAAAzkxMQAAAAM4OTEAAAACMzIAAAADOTE3AAAAAzgwOAAAAAM4MDIAAAADMjQxAAAAAzQzOAAAAAIxOQAAAAI3NAAAAAIxOAAAAAMxMDgAAAADMzg2AAAAAzI0OQAAAAIyOQAAAAM5ODAAAAADMzc1AAAAAjg5AAAAAzgyOAAAAAMxNzIAAAADODQxAAAAAzQyNQAAAAM1NzAAAAADMTIwAAAAAzc5OQAAAAMyMjkAAAADNzAzAAAAAzUyOQAAAAMxNDYAAAADMzkyAAAAAzU0MQAAAAMxNzQAAAADNzQyAAAAAjQ1AAAAAzIxMgAAAAM0MDcAAAACMjUAAAADNDc2AAAAAzE1MwAAAAM0OTIAAAADNzE2AAAAAzEzMwAAAAMyOTcAAAADMjg0AAAAAzg4NgAAAAEzAAAAAzE1NQAAAAMyMzcAAAADNDA1AAAAAzc0OQAAAAM1ODMAAAADNzUzAAAAAzQyNAAAAAMyNzQAAAADNTM5AAAAAzc2OQAAAAM3MDUAAAADMzc0AAAAAjY4AAAAAzUwMgAAAAMxMjEAAAADNjA3AAAAAzY4NQAAAAMxOTAAAAADOTk2AAAAAzI2OQAAAAM3OTEAAAADNjA4AAAAAzYxMgAAAAMzNzkAAAADMjE0AAAAAzE3NQAAAAM5NTYAAAADMjEzAAAAAzk2OQAAAAMxODcAAAADNTM1AAAAAzgyNwAAAAMyNzAAAAADOTA5AAAAAzUwMQAAAAM2MzYAAAADOTU4AAAAAzY4MwAAAAMxMTMAAAADNzE5AAAAAzU3MgAAAAM2ODAAAAADNDQxAAAAAzM1NwAAAAE1AAAAAzgzOQAAAAMxODQAAAADMTE4AAAAAzgwMAAAAAM1NTMAAAADMTkzAAAAAzMzNQAAAAM2MTAAAAADMzgzAAAAAzk5MAAAAAM4NTgAAAADNTUxAAAAAzIxNgAAAAM1MjYAAAADNjA5AAAAAzc0MQAAAAMzNDEAAAADMTYxAAAAAzk4NQAAAAM3NzIAAAADNjcyAAAAAjEyAAAAAzcxOAAAAAE4AAAAAzY1MgAAAAM4NzMAAAADNzU5AAAAAzY3OAAAAAMyMTEAAAADMzg1AAAAAzc3MwAAAAI5NQAAAAM0OTkAAAADNDMwAAAAAzMxNAAAAAM0NjMAAAADNTg1AAAAAzg5OQAAAAM1MTMAAAACODcAAAADODExAAAAAzQxNQAAAAIxNgAAAAMzOTgAAAADNTExAAAAAzQ4MgAAAAM0NzUAAAADODA5AAAAAzU3NgAAAAMyOTkAAAADMzk5AAAAAzYwMgAAAAMxODkAAAADMjkyAAAAAzczMgAAAAM3MjgAAAADNjY3AAAAAzUxNwAAAAMxNzAAAAADOTg5AAAAAzkwOAAAAAM5MDcAAAADMjQ0AAAAAzE0NAAAAAM4NjYAAAADNDYxAAAAAzcxMAAAAAM5MjQAAAADOTc1AAAAAzU3MwAAAAM5NzEAAAADNjI3AAAAAzE3OAAAAAM0MzEAAAADNDY5AAAAAzM3OAAAAAMyMTUAAAADMjA3AAAAAzQ1OQAAAAIzOQAAAAMyODcAAAADMTcxAAAAAzIxMAAAAAM5NjEAAAADNjAwAAAAAzQwMgAAAAM3ODUAAAADMjkxAAAAAzY5MwAAAAMxODMAAAADMTYzAAAAAjY0AAAAAzg1NwAAAAM0NTMAAAADMjk2AAAAAzQxMAAAAAM4ODUAAAADODEwAAAAAzQ5NAAAAAMxMjcAAAADNjc3AAAAAzc3NAAAAAM5NDAAAAADMzkwAAAAAzg2MwAAAAMyNDMAAAACNzcAAAADODUwAAAAAzI2MwAAAAMzMjYAAAADNzc1AAAAAzU0OAAAAAM4NjkAAAADNTQzAAAAAzYyNAAAAAMzOTcAAAADOTg4AAAAAzcyNAAAAAM1MzgAAAACMTcAAAADOTM1AAAAAzk2NQAAAAM5MzgAAAADMjQyAAAAAzgzNgAAAAM3NDYAAAADNzQ4AAAAAzUwMAAAAAMxMjkAAAADODM4AAAAAjI4AAAAAzMwNQAAAAMyODAAAAADNDk4AAAAAzE1NwAAAAMzMTYAAAADODgzAAAAAzgyMwAAAAMyNjUAAAADNjQxAAAAAzkxMAAAAAMyOTgAAAADOTEyAAAAAzE1MgAAAAMxMTAAAAADNDM5AAAAAzkzMQAAAAM3ODEAAAADNDgxAAAAAzcxNAAAAAMyNTAAAAADNjA2AAAAAzk0MwAAAAM5NzkAAAADNDExAAAAAzUzNAAAAAMyNjYAAAADNTUwAAAAAzQyOQAAAAMzNjkAAAADMjE5AAAAAzkxNAAAAAM0NDUAAAADMzU2AAAAAzY0OAAAAAM0ODQAAAACNDAAAAADNjQwAAAAAjQzAAAAAzMyNQAAAAMyNjQAAAADNzEzAAAAAzk2MgAAAAMxMTEAAAADNjM5AAAAAzM0OAAAAAM2MDQAAAADODAzAAAAAzQwNAAAAAMzMDIAAAADMjAyAAAAAzkyOQAAAAI0NgAAAAM4NjAAAAADNTMyAAAAAzIzOAAAAAMzMjMAAAADMTM4AAAAAzY2NAAAAAM5MjUAAAADMjYwAAAAAzc2NQAAAAMzNTEAAAADOTg3AAAAAzc3NwAAAAM5ODQAAAADNzUwAAAAAzY5MgAAAAM4MjIAAAADMzYyAAAAAzgzMwAAAAM2NTgAAAADNjY5AAAAAzEzNgAAAAI1NAAAAAMyNTMAAAADODUxAAAAAzk3OAAAAAMyMDAAAAADMzIwAAAAAzExMgAAAAM5OTQAAAADNTc5AAAAAjM4AAAAAzczMQAAAAMxMzEAAAADNzg2AAAAAzM4OQAAAAMxMDcAAAADNjQ3AAAAAzY3MAAAAAMzMDMAAAADNjU5AAAAAzUxOQAAAAMyMzUAAAADNzYxAAAAAzMyNAAAAAM2MjMAAAADNjI5AAAAAzg5OAAAAAM0NTcAAAADMzQ0AAAAATkAAAADNjkwAAAAAzI3MwAAAAMyMjEAAAADNTQ1AAAAAzI4MwAAAAMzNzEAAAADNjg5AAAAAzQ0NwAAAAI1OQAAAAM4ODAAAAADNDMzAAAAAzM1MAAAAAM3MjIAAAADNjI2AAAAAjQ0AAAAAjExAAAAAzc1NAAAAAM3NzkAAAADNTg5AAAAAzYzNAAAAAI5OAAAAAMxMzcAAAADMjAzAAAAAzg2MQAAAAM2NjgAAAACNTUAAAADNDI2AAAAAjgzAAAAAzY4NAAAAAMyMjMAAAADODYyAAAAAzI2MgAAAAMyMTgAAAADODc2AAAAAzk1NQAAAAM5NDUAAAADOTY3AAAAAzMzNwAAAAM4NjcAAAADNzk2AAAAAzYxMQAAAAMyMjgAAAADNjMzAAAAAzkyMQAAAAM2MDMAAAADMzYwAAAAAjIwAAAAAzQxMgAAAAM5NTIAAAACOTkAAAACODIAAAADODk2AAAAAzQ2MAAAAAMxMDkAAAADOTA0AAAAAzU1MgAAAAM1NzQAAAADNDE3AAAAAzExNwAAAAM1ODcAAAADNTI0AAAAAjM2AAAAAzY5NQAAAAMzMDYAAAADNDE0AAAAAzU5NAAAAAM1NjcAAAADNDQzAAAAAzkwMQAAAAM4NjUAAAADNTU3AAAAAzk5MwAAAAM4ODQAAAACNDgAAAADNDQ4AAAAAzU0MgAAAAM2MzgAAAADNTAzAAAAAzUwNwAAAAM1MjcAAAADODk0AAAAAzUwNAAAAAI3MAAAAAMxMzAAAAADNjIwAAAAAzMzNgAAAAMzNDAAAAADOTAyAAAAAzUwOQAAAAM1OTEAAAADOTQxAAAAAjEwAAAAAzEwMgAAAAMxMDYAAAADNTY1AAAAAzg0MAAAAAM0MDAAAAADMzMxAAAAAzQ1NQAAAAMyODkAAAADMjc4AAAAAzMwOQAAAAM1NDkAAAADNjg3AAAAAzQzNQAAAAM3ODkAAAADOTE2AAAAAzM0NwAAAAMxMzkAAAADMTgwAAAAAzc0NwAAAAMzNzIAAAADODQ2AAAAAzIzNAAAAAMzOTUAAAADNzQzAAAAAzQwMwAAAAM1MTIAAAADNzg0AAAAAzk4NgAAAAMzNTQAAAADOTIzAAAAAzQ0MAAAAAM4MTUAAAADMzEzAAAAAzI1NAAAAAM5MzcAAAADNDI4AAAAAzY1NgAAAAMyNDAAAAADNTg4AAAAAzU1NgAAAAM2OTcAAAADNzAyAAAAAzM2OAAAAAM5MjAAAAADNTgwAAAAAzI2MQAAAAM4MTkAAAADMjcyAAAAAzU0NgAAAAI3NQAAAAM4MDcAAAADNDU4AAAAAzQzMgAAAAMyNTYAAAADNTQ0AAAAAzQ5MwAAAAM2NDkAAAADODM3AAAAAzg3OQAAAAM5ODIAAAADMjU4AAAAAzc0NQAAAAMxOTUAAAACMzQAAAADNzIwAAAAAzg1MwAAAAMzMTAAAAADNDQ2AAAAAjE1AAAAAzkxOQAAAAM0MTYAAAADNTIzAAAAAzc2OAAAAAE0AAAAAzU2OQAAAAMxMzIAAAADODM0AAAAAjI0AAAAAzI1MQAAAAMzMDgAAAADMzU5AAAAAzU0MAAAAAM4MjUAAAADMTI0AAAAAzQwMQAAAAMxMDMAAAADNTYyAAAAAzExNQAAAAM5MzMAAAACODAAAAADNTY2AAAAAjUxAAAABDEwMDAAAAADMjA0AAAAAzg3MgAAAAM4OTIAAAACNTIAAAADNjA1AAAAAzU5OQAAAAIxMwAAAAMyNDcAAAADNzUxAAAAAzU4NAAAAAI0NwAAAAE2AAAAAzM1MgAAAAM1MzcAAAADODQ5AAAAAzI5NAAAAAM5MjYAAAADNzk0AAAAAzY1MQAAAAMzNTUAAAADODkwAAAAAzQ1MgAAAAM2MTkAAAADNDg4AAAAAzgwNQAAAAMxOTIAAAADNjE2AAAAAzYyOAAAAAM1MDUAAAADMzE3AAAAAzM1MwAAAAM4MTgAAAADMzkxAAAAAzEzNQAAAAMzNzMAAAADMjc1AAAAAjIyAAAAAzM0OQAAAAI1MAAAAAM4MjQAAAADOTYzAAAAAzg4OAAAAAI4MQAAAAMxMjgAAAADNTU1AAAAAzk5OAAAAAM0ODMAAAADMjc5AAAAAzkzNAAAAAM5MzIAAAADODM1AAAAAzk5MgAAAAM3NzgAAAADNzM0AAAAAzIzOQAAAAMyMjQAAAACNDkAAAADMjkwAAAAAzk3MAAAAAM1MTQAAAABMQAAAAM4MjYAAAADOTcyAAAAAzU2MQAAAAM0MjAAAAACNzYAAAACNjcAAAADNjczAAAAAzgxNwAAAAMxNDMAAAADNDE5AAAAAjYxAAAAAzcxNQAAAAM0NTEAAAADNjUzAAAAAzc1MgAAAAMxNDkAAAADMzYzAAAAAzE4OAAAAAM5MzkAAAADNzAxAAAAAzE0NwAAAAM3OTgAAAADODMwAAAAAzU3NwAAAAM1MjAAAAADMjcxAAAAAzc2NwAAAAMzMDQAAAADNjk5AAAAAzY1NQAAAAM1MDYAAAACNDIAAAACMzcAAAADMjU3AAAAAzQyMQAAAAM3NDAAAAADODU0AAAAAzQ1NgAAAAMzMjEAAAADNTM2AAAAAzc4NwAAAAM1NjAAAAADMTgyAAAAAzc4OAAAAAI3MQAAAAI2OQAAAAIzMwAAAAM1OTcAAAADMjgxAAAAAzY2MgAAAAM0NjUAAAADNTk1AAAAAzI0NgAAAAM5NDYAAAADODU1AAAAAzEzNAAAAAMzMzMAAAADNjIxAAAAAzE1NAAAAAM5MTMAAAADMzQzAAAAAzczNwAAAAMyMjcAAAADNzI5AAAAAzM2NAAAAAMyNjcAAAADNjE1AAAAAzY5OAAAAAMyNTIAAAACOTYAAAADNzM4AAAAAzE5NAAAAAMyMTcAAAADNjkxAAAAAzUyMgAAAAM3NjAAAAADOTI4AAAAAzI1OQAAAAM0OTYAAAADNjAxAAAAAzcyNQAAAAMzNzAAAAADNzgwAAAAAzk3NAAAAAM5MjIAAAACNTMAAAADNzQ0AAAAAzk0MgAAAAMxNTEAAAACMjYAAAADODY4AAAAAzk5NwAAAAM0MjMAAAACOTQAAAADNzc2AAAAAzMwMQAAAAMyOTUAAAACMjcAAAACNjAAAAADNDQ5AAAAAzg0MgAAAAMyMjUAAAADMzk0AAAAAzY0NAAAAAM0OTAAAAACNTcAAAADMTk3AAAAAzg2NAAAAAM1MzMAAAADNDcxAAAAAjIxAAAAAzU1OAAAAAM0MzQAAAADMTk4AAAAAzEwNAAAAAI5MAAAAAM4NTIAAAADMTUwAAAAAzIzMwAAAAM4MTYAAAADMjA4AAAAAzg0OAAAAAM4ODkAAAADNjgxAAAAAzE3OQAAAAMzMTIAAAADOTc2AAAAAzgyOQAAAAM0NDIAAAACNjUAAAADMjg2AAAAAzYyMgAAAAM3NjYAAAADNDA2AAAAAzg0NAAAAAMxOTkAAAADMTE2AAAAAzQ3OQAAAAM0MDgAAAADNzYyAAAAAzc5MgAAAAMxOTEAAAADNjMxAAAAAzMyOAAAAAMxNjQAAAADNzkzAAAAAzk1OQAAAAM1NDcAAAADODc3AAAAAzYzNQAAAAI4OAAAAAMyODgAAAADNTkwAAAAAzE4NQAAAAM2NTAAAAADNDc3AAAAAzcwOQAAAAM2NDMAAAADNzExAAAAAzEyNgAAAAM0MzcAAAADNDUwAAAAAzg3OAAAAAM4ODcAAAADNDY0AAAAAzE2NwAAAAM5MDMAAAADMzY1AAAAAzcwNgAAAAM4MTMAAAADNTMwAAAAAzU5MwAAAAM1MTgAAAADMjQ4AAAAATIAAAADODA0AAAAAzg5MwAAAAMxOTYAAAADMzE1AAAAAzQ3NAAAAAM5NjYAAAADOTY0AAAAAzMzOAAAAAM3MTIAAAADNDI3AAAAAzYxNwAAAAM5NDgAAAADNjQyAAAAAzgyMAAAAAM2NjUAAAADNTMxAAAAAjQxAAAAAzE0MQAAAAM1OTYAAAADNzA4AAAAAzk3MwAAAAM1OTgAAAADMjIyAAAAAzQ4OQAAAAM0OTUAAAADOTE4AAAAAzM4MgAAAAM4MTQAAAADNDg2AAAAAzM4NwAAAAM0NjIAAAADOTc3AAAAAjMwAAAAAzcyMQAAAAI5MwAAAAMxMjUAAAACOTEAAAADMjY4AAAAAzk5MQAAAAM1MjgAAAACNTYAAAADOTMwAAAAAzQzNgAAAAMyNDUAAAADNzU4AAAAAzc5NQAAAAM4ODEAAAADOTQ0AAAAAzQxOAAAAAMxNzMAAAADMzkzAAAAAzkzNgAAAAMxNjUAAAADMzc2AAAAAzgxMgAAAAMxNzYAAAADNzkwAAAAAzE2MAAAAAI4NgAAAAM4NzQAAAADMzA3AAAAAzYzMAAAAAM1NTkAAAADNDg1AAAAAzcwNAAAAAMzNjEAAAADNjI1AAAAAzc2MwAAAAM2MTgAAAADNzI2AAAAAzgwMQAAAAMyNTUAAAADNDQ0AAAAAzc1NQAAAAM0MDkAAAADNDY2AAAAAzk1NwAAAAM4NDMAAAADMTU2AAAAAzk5OQAAAAMxNTkAAAADNjc2AAAAAzk4MQAAAAM3NTcAAAADNzAwAAAAAzUyNQAAAAM1NzUAAAADMzMwAAAAAzUyMQAAAAM2OTYAAAADODU5AAAAAzc5NwAAAAM5ODMAAAADNjYzAAAAATcAAAADNzcxAAAAAzkyNwAAAAM1NzEAAAADOTU0AAAAAzU4MQAAAAM2MTMAAAADMjIwAAAAAzYzNwAAAAM0MTMAAAADMjgyAAAAAzM2NwAAAAM5NjAAAAADMzE4AAAAAzY3MQAAAAMyMDYAAAADMzExAAAAAzExNAAAAAM2NjYAAAADMzU4AAAAAzkwNgAAAAM2ODgAAAADNTYzAAAAAzI3NwAAAAI5MgAAAAMxODYAAAADNTEwAAAAAzMzNAAAAAMzNDUAAAADOTQ3AAAAAzIwNQAAAAM2NzQAAAADMzg0AAAAAzQ4MAAAAAMxNzcAAAADMTIyAAAAAzI5MwAAAAM3MTcAAAADNjk0AAAAAzkxNQAAAAMxNDUAAAADODA2AAAAAzU4MgAAAAMzNDYAAAADMTgxAAAAAzY0NgAAAAI3MgAAAAM5NjgAAAADMTU4AAAAAzc4MgAAAAMxMDEAAAADNTE1AAAAAzU5MgAAAAM3MzkAAAADODQ3AAAAAzY0NQAAAAM1MTYAAAADNjYxAAAAAzgzMQAAAAM0MjIAAAACMTQAAAADNzM2AAAAAzM5NgAAAAMzODgAAAADMjAxAAAAAzE2MgAAAAM0NzgAAAADMTIzAAAAAzY3OQAAAAI2NgAAAAIyMwAAAAMzMjkAAAADMjMyAAAAAzE2NgAAAAM3MjMAAAADNDczAAAAAzM3NwAAAAM2NjAAAAADODcwAAAAAjYzAAAAAzEwNQAAAAMzMzIAAAACNzMAAAADODU2AAAAAzg3NQAAAAM5OTUAAAADNjE0AAAAAzU3OAAAAAI1OAAAAAMyODUAAAADNTU0AAAAAzg0NQAAAAM2NTQAAAADNTg2AAAAAzQ5MQAAAAMyNzYAAAADOTQ5AAAAAzE2OQAAAAI2MgAAAAMyMDkAAAADMTQyAAAAAzMyNwAAAAM5MDUAAAADODMyAAAAAzM4MAAAAAI4NQAAAAM3NjQAAAADMzgxAAAAAzc1NgAAAAMxMTkAAAACNzkAAAADMTQwAAAAAzQ5NwAAAAM3MzMAAAADMzIyAAAAAzg4MgAAAAM3MzAAAAADNzcwAAAAAzQ3MAAAAAM1MDgAAAADMTAwAAAAAzk1MwAAAAMyMjYAAAADNDg3AAAAAzM0MgAAAAM2NTcAAAADMTQ4AAAAAzE2OAAAAAI3OAAAAAM3MjcAAAADMjMxAAAAAzMxOQAAAAM2ODYAAAADNzgzAAAAAjMxAAAAAzcwNwAAAAM4OTcAAAADOTAwAAAAAzk1MQAAAAM2MzIAAAADNDY3AAAAAzY3NQAAAAM0NzIAAAADOTUwAAAAAzg3MQAAAAI5NwAAAAMzNjYAAAADNTY0AAAAAjM1AAAAAzMzOQAAAAM1Njg=
(1 row)

DROP TABLE base_texts;
-- low cardinality
CREATE TABLE base_texts AS SELECT row_number() OVER() as rn, item::text FROM
    (SELECT i as item FROM generate_series(1, 10) i, generate_series(1, 100) j ORDER BY mix(i + j)) sub;
\ir include/compression_test.sql
-- This file and its contents are licensed under the Timescale License.
-- Please see the included NOTICE for copyright information and
-- LICENSE-TIMESCALE for a copy of the license.
\set ECHO errors
 algorithm  | has_nulls | compressed size 
------------+-----------+-----------------
 DICTIONARY | f         |             605
(1 row)

                                   ?column?                                    | count 
-------------------------------------------------------------------------------+-------
 Number of rows different between original and decompressed forward (expect 0) |     0
(1 row)

                                    ?column?                                    | count 
--------------------------------------------------------------------------------+-------
 Number of rows different between original and decompressed reversed (expect 0) |     0
(1 row)

                                              ?column?                                              | count 
----------------------------------------------------------------------------------------------------+-------
 Number of rows different between original, decompressed, and decompressed deserializeed (expect 0) |     0
(1 row)

                                              ?column?                                               | ?column? 
-----------------------------------------------------------------------------------------------------+----------
 Test that deserialization, decompression, recompression, and serialization results in the same text | t
(1 row)

DROP TABLE base_texts;
-- single element
CREATE TABLE base_texts AS SELECT row_number() OVER() as rn, item::text FROM (SELECT generate_series(1, 1) item) sub;
\ir include/compression_test.sql
-- This file and its contents are licensed under the Timescale License.
-- Please see the included NOTICE for copyright information and
-- LICENSE-TIMESCALE for a copy of the license.
\set ECHO errors
 algorithm | has_nulls | compressed size 
-----------+-----------+-----------------
 ARRAY     | f         |              39
(1 row)

                                   ?column?                                    | count 
-------------------------------------------------------------------------------+-------
 Number of rows different between original and decompressed forward (expect 0) |     0
(1 row)

                                    ?column?                                    | count 
--------------------------------------------------------------------------------+-------
 Number of rows different between original and decompressed reversed (expect 0) |     0
(1 row)

                                              ?column?                                              | count 
----------------------------------------------------------------------------------------------------+-------
 Number of rows different between original, decompressed, and decompressed deserializeed (expect 0) |     0
(1 row)

                                              ?column?                                               | ?column? 
-----------------------------------------------------------------------------------------------------+----------
 Test that deserialization, decompression, recompression, and serialization results in the same text | t
(1 row)

DROP TABLE base_texts;
-- high cardinality with toasted values
CREATE TABLE base_texts AS SELECT row_number() OVER() as rn, repeat(item::text, 100000) as item FROM
    (select sub.item from (SELECT generate_series(1, 10) item) as sub ORDER BY mix(item)) sub;
--make sure it's toasted
SELECT pg_total_relation_size(reltoastrelid)
      FROM pg_class c
      WHERE relname = 'base_texts';
 pg_total_relation_size 
------------------------
                  24576
(1 row)

\ir include/compression_test.sql
-- This file and its contents are licensed under the Timescale License.
-- Please see the included NOTICE for copyright information and
-- LICENSE-TIMESCALE for a copy of the license.
\set ECHO errors
 algorithm | has_nulls | compressed size 
-----------+-----------+-----------------
 ARRAY     | f         |         1100092
(1 row)

                                   ?column?                                    | count 
-------------------------------------------------------------------------------+-------
 Number of rows different between original and decompressed forward (expect 0) |     0
(1 row)

                                    ?column?                                    | count 
--------------------------------------------------------------------------------+-------
 Number of rows different between original and decompressed reversed (expect 0) |     0
(1 row)

                                              ?column?                                              | count 
----------------------------------------------------------------------------------------------------+-------
 Number of rows different between original, decompressed, and decompressed deserializeed (expect 0) |     0
(1 row)

                                              ?column?                                               | ?column? 
-----------------------------------------------------------------------------------------------------+----------
 Test that deserialization, decompression, recompression, and serialization results in the same text | t
(1 row)

DROP TABLE base_texts;
-- NULLs
CREATE TABLE base_texts AS SELECT row_number() OVER() as rn, NULLIF(i, 5)::TEXT item FROM generate_series(1, 10) i, generate_series(1, 100) j;
\ir include/compression_test.sql
-- This file and its contents are licensed under the Timescale License.
-- Please see the included NOTICE for copyright information and
-- LICENSE-TIMESCALE for a copy of the license.
\set ECHO errors
 algorithm  | has_nulls | compressed size 
------------+-----------+-----------------
 DICTIONARY | t         |             187
(1 row)

                                   ?column?                                    | count 
-------------------------------------------------------------------------------+-------
 Number of rows different between original and decompressed forward (expect 0) |     0
(1 row)

                                    ?column?                                    | count 
--------------------------------------------------------------------------------+-------
 Number of rows different between original and decompressed reversed (expect 0) |     0
(1 row)

                                              ?column?                                              | count 
----------------------------------------------------------------------------------------------------+-------
 Number of rows different between original, decompressed, and decompressed deserializeed (expect 0) |     0
(1 row)

                                              ?column?                                               | ?column? 
-----------------------------------------------------------------------------------------------------+----------
 Test that deserialization, decompression, recompression, and serialization results in the same text | t
(1 row)

DROP TABLE base_texts;
CREATE TABLE base_texts AS SELECT row_number() OVER() as rn, NULLIF(i, 1)::TEXT item FROM generate_series(1, 10) i, generate_series(1, 100) j;
\ir include/compression_test.sql
-- This file and its contents are licensed under the Timescale License.
-- Please see the included NOTICE for copyright information and
-- LICENSE-TIMESCALE for a copy of the license.
\set ECHO errors
 algorithm  | has_nulls | compressed size 
------------+-----------+-----------------
 DICTIONARY | t         |             179
(1 row)

                                   ?column?                                    | count 
-------------------------------------------------------------------------------+-------
 Number of rows different between original and decompressed forward (expect 0) |     0
(1 row)

                                    ?column?                                    | count 
--------------------------------------------------------------------------------+-------
 Number of rows different between original and decompressed reversed (expect 0) |     0
(1 row)

                                              ?column?                                              | count 
----------------------------------------------------------------------------------------------------+-------
 Number of rows different between original, decompressed, and decompressed deserializeed (expect 0) |     0
(1 row)

                                              ?column?                                               | ?column? 
-----------------------------------------------------------------------------------------------------+----------
 Test that deserialization, decompression, recompression, and serialization results in the same text | t
(1 row)

DROP TABLE base_texts;
CREATE TABLE base_texts AS SELECT row_number() OVER() as rn, NULLIF(i, 10)::TEXT item FROM generate_series(1, 10) i, generate_series(1, 100) j;
\ir include/compression_test.sql
-- This file and its contents are licensed under the Timescale License.
-- Please see the included NOTICE for copyright information and
-- LICENSE-TIMESCALE for a copy of the license.
\set ECHO errors
 algorithm  | has_nulls | compressed size 
------------+-----------+-----------------
 DICTIONARY | t         |             178
(1 row)

                                   ?column?                                    | count 
-------------------------------------------------------------------------------+-------
 Number of rows different between original and decompressed forward (expect 0) |     0
(1 row)

                                    ?column?                                    | count 
--------------------------------------------------------------------------------+-------
 Number of rows different between original and decompressed reversed (expect 0) |     0
(1 row)

                                              ?column?                                              | count 
----------------------------------------------------------------------------------------------------+-------
 Number of rows different between original, decompressed, and decompressed deserializeed (expect 0) |     0
(1 row)

                                              ?column?                                               | ?column? 
-----------------------------------------------------------------------------------------------------+----------
 Test that deserialization, decompression, recompression, and serialization results in the same text | t
(1 row)

DROP TABLE base_texts;
CREATE TABLE base_texts AS SELECT row_number() OVER() as rn, NULLIF(NULLIF(NULLIF(NULLIF(i, 2), 4), 5), 8)::TEXT item FROM generate_series(1, 10) i, generate_series(1, 100) j;
\ir include/compression_test.sql
-- This file and its contents are licensed under the Timescale License.
-- Please see the included NOTICE for copyright information and
-- LICENSE-TIMESCALE for a copy of the license.
\set ECHO errors
 algorithm  | has_nulls | compressed size 
------------+-----------+-----------------
 DICTIONARY | t         |             189
(1 row)

                                   ?column?                                    | count 
-------------------------------------------------------------------------------+-------
 Number of rows different between original and decompressed forward (expect 0) |     0
(1 row)

                                    ?column?                                    | count 
--------------------------------------------------------------------------------+-------
 Number of rows different between original and decompressed reversed (expect 0) |     0
(1 row)

                                              ?column?                                              | count 
----------------------------------------------------------------------------------------------------+-------
 Number of rows different between original, decompressed, and decompressed deserializeed (expect 0) |     0
(1 row)

                                              ?column?                                               | ?column? 
-----------------------------------------------------------------------------------------------------+----------
 Test that deserialization, decompression, recompression, and serialization results in the same text | t
(1 row)

DROP TABLE base_texts;
-----------------------
-- Array Compression --
-----------------------
SELECT
  $$
  select item from  base_texts order by rn
  $$ AS "QUERY"
\gset
\set TABLE_NAME base_texts
SELECT 'TEXT' as "TYPE" \gset
\set COMPRESSION_CMD _timescaledb_internal.compress_array(item)
\set DECOMPRESS_FORWARD_CMD _timescaledb_internal.decompress_forward(c::_timescaledb_internal.compressed_data, NULL::TEXT)
\set DECOMPRESS_REVERSE_CMD _timescaledb_internal.decompress_reverse(c::_timescaledb_internal.compressed_data, NULL::TEXT)
--basic test
CREATE TABLE base_texts AS SELECT row_number() OVER() as rn, item::text FROM
    (select sub.item from (SELECT generate_series(1, 100) item) as sub ORDER BY mix(item)) sub;
\ir include/compression_test.sql
-- This file and its contents are licensed under the Timescale License.
-- Please see the included NOTICE for copyright information and
-- LICENSE-TIMESCALE for a copy of the license.
\set ECHO errors
 algorithm | has_nulls | compressed size 
-----------+-----------+-----------------
 ARRAY     | f         |             356
(1 row)

                                   ?column?                                    | count 
-------------------------------------------------------------------------------+-------
 Number of rows different between original and decompressed forward (expect 0) |     0
(1 row)

                                    ?column?                                    | count 
--------------------------------------------------------------------------------+-------
 Number of rows different between original and decompressed reversed (expect 0) |     0
(1 row)

                                              ?column?                                              | count 
----------------------------------------------------------------------------------------------------+-------
 Number of rows different between original, decompressed, and decompressed deserializeed (expect 0) |     0
(1 row)

                                              ?column?                                               | ?column? 
-----------------------------------------------------------------------------------------------------+----------
 Test that deserialization, decompression, recompression, and serialization results in the same text | t
(1 row)

SELECT c from compressed;
                                                                                                                                                                                                                                                                                                                                                                                                                            c                                                                                                                                                                                                                                                                                                                                                                                                                             

 AQBwZ19jYXRhbG9nAHRleHQAAAEAAABkAAAAAjg0AAAAAjMyAAAAAjE5AAAAAjc0AAAAAjE4AAAAAjI5AAAAAjg5AAAAAjQ1AAAAAjI1AAAAATMAAAACNjgAAAABNQAAAAIxMgAAAAE4AAAAAjk1AAAAAjg3AAAAAjE2AAAAAjM5AAAAAjY0AAAAAjc3AAAAAjE3AAAAAjI4AAAAAjQwAAAAAjQzAAAAAjQ2AAAAAjU0AAAAAjM4AAAAATkAAAACNTkAAAACNDQAAAACMTEAAAACOTgAAAACNTUAAAACODMAAAACMjAAAAACOTkAAAACODIAAAACMzYAAAACNDgAAAACNzAAAAACMTAAAAACNzUAAAACMzQAAAACMTUAAAABNAAAAAIyNAAAAAI4MAAAAAI1MQAAAAI1MgAAAAIxMwAAAAI0NwAAAAE2AAAAAjIyAAAAAjUwAAAAAjgxAAAAAjQ5AAAAATEAAAACNzYAAAACNjcAAAACNjEAAAACNDIAAAACMzcAAAACNzEAAAACNjkAAAACMzMAAAACOTYAAAACNTMAAAACMjYAAAACOTQAAAACMjcAAAACNjAAAAACNTcAAAACMjEAAAACOTAAAAACNjUAAAACODgAAAABMgAAAAI0MQAAAAIzMAAAAAI5MwAAAAI5MQAAAAI1NgAAAAI4NgAAAAE3AAAAAjkyAAAAAjcyAAAAAjE0AAAAAjY2AAAAAjIzAAAAAjYzAAAAAjczAAAAAjU4AAAAAjYyAAAAAjg1AAAAAjc5AAAAAzEwMAAAAAI3OAAAAAIzMQAAAAI5NwAAAAIzNQ==
(1 row)

DROP TABLE base_texts;
-- single element
CREATE TABLE base_texts AS SELECT row_number() OVER() as rn, item::text FROM (SELECT generate_series(1, 1) item) sub;
\ir include/compression_test.sql
-- This file and its contents are licensed under the Timescale License.
-- Please see the included NOTICE for copyright information and
-- LICENSE-TIMESCALE for a copy of the license.
\set ECHO errors
 algorithm | has_nulls | compressed size 
-----------+-----------+-----------------
 ARRAY     | f         |              39
(1 row)

                                   ?column?                                    | count 
-------------------------------------------------------------------------------+-------
 Number of rows different between original and decompressed forward (expect 0) |     0
(1 row)

                                    ?column?                                    | count 
--------------------------------------------------------------------------------+-------
 Number of rows different between original and decompressed reversed (expect 0) |     0
(1 row)

                                              ?column?                                              | count 
----------------------------------------------------------------------------------------------------+-------
 Number of rows different between original, decompressed, and decompressed deserializeed (expect 0) |     0
(1 row)

                                              ?column?                                               | ?column? 
-----------------------------------------------------------------------------------------------------+----------
 Test that deserialization, decompression, recompression, and serialization results in the same text | t
(1 row)

DROP TABLE base_texts;
-- toasted values
CREATE TABLE base_texts AS SELECT row_number() OVER() as rn, repeat(item::text, 100000) as item FROM
    (select sub.item from (SELECT generate_series(1, 10) item) as sub ORDER BY mix(item)) sub;
--make sure it's toasted
SELECT pg_total_relation_size(reltoastrelid)
      FROM pg_class c
      WHERE relname = 'base_texts';
 pg_total_relation_size 
------------------------
                  24576
(1 row)

\ir include/compression_test.sql
-- This file and its contents are licensed under the Timescale License.
-- Please see the included NOTICE for copyright information and
-- LICENSE-TIMESCALE for a copy of the license.
\set ECHO errors
 algorithm | has_nulls | compressed size 
-----------+-----------+-----------------
 ARRAY     | f         |         1100092
(1 row)

                                   ?column?                                    | count 
-------------------------------------------------------------------------------+-------
 Number of rows different between original and decompressed forward (expect 0) |     0
(1 row)

                                    ?column?                                    | count 
--------------------------------------------------------------------------------+-------
 Number of rows different between original and decompressed reversed (expect 0) |     0
(1 row)

                                              ?column?                                              | count 
----------------------------------------------------------------------------------------------------+-------
 Number of rows different between original, decompressed, and decompressed deserializeed (expect 0) |     0
(1 row)

                                              ?column?                                               | ?column? 
-----------------------------------------------------------------------------------------------------+----------
 Test that deserialization, decompression, recompression, and serialization results in the same text | t
(1 row)

DROP TABLE base_texts;
-- NULLs
CREATE TABLE base_texts AS SELECT row_number() OVER() as rn, NULLIF(i, 5)::TEXT item FROM generate_series(1, 10) i;
\ir include/compression_test.sql
-- This file and its contents are licensed under the Timescale License.
-- Please see the included NOTICE for copyright information and
-- LICENSE-TIMESCALE for a copy of the license.
\set ECHO errors
 algorithm | has_nulls | compressed size 
-----------+-----------+-----------------
 ARRAY     | t         |              80
(1 row)

                                   ?column?                                    | count 
-------------------------------------------------------------------------------+-------
 Number of rows different between original and decompressed forward (expect 0) |     0
(1 row)

                                    ?column?                                    | count 
--------------------------------------------------------------------------------+-------
 Number of rows different between original and decompressed reversed (expect 0) |     0
(1 row)

                                              ?column?                                              | count 
----------------------------------------------------------------------------------------------------+-------
 Number of rows different between original, decompressed, and decompressed deserializeed (expect 0) |     0
(1 row)

                                              ?column?                                               | ?column? 
-----------------------------------------------------------------------------------------------------+----------
 Test that deserialization, decompression, recompression, and serialization results in the same text | t
(1 row)

DROP TABLE base_texts;
CREATE TABLE base_texts AS SELECT row_number() OVER() as rn, NULLIF(i, 1)::TEXT item FROM generate_series(1, 10) i;
\ir include/compression_test.sql
-- This file and its contents are licensed under the Timescale License.
-- Please see the included NOTICE for copyright information and
-- LICENSE-TIMESCALE for a copy of the license.
\set ECHO errors
 algorithm | has_nulls | compressed size 
-----------+-----------+-----------------
 ARRAY     | t         |              80
(1 row)

                                   ?column?                                    | count 
-------------------------------------------------------------------------------+-------
 Number of rows different between original and decompressed forward (expect 0) |     0
(1 row)

                                    ?column?                                    | count 
--------------------------------------------------------------------------------+-------
 Number of rows different between original and decompressed reversed (expect 0) |     0
(1 row)

                                              ?column?                                              | count 
----------------------------------------------------------------------------------------------------+-------
 Number of rows different between original, decompressed, and decompressed deserializeed (expect 0) |     0
(1 row)

                                              ?column?                                               | ?column? 
-----------------------------------------------------------------------------------------------------+----------
 Test that deserialization, decompression, recompression, and serialization results in the same text | t
(1 row)

DROP TABLE base_texts;
CREATE TABLE base_texts AS SELECT row_number() OVER() as rn, NULLIF(i, 10)::TEXT item FROM generate_series(1, 10) i;
\ir include/compression_test.sql
-- This file and its contents are licensed under the Timescale License.
-- Please see the included NOTICE for copyright information and
-- LICENSE-TIMESCALE for a copy of the license.
\set ECHO errors
 algorithm | has_nulls | compressed size 
-----------+-----------+-----------------
 ARRAY     | t         |              79
(1 row)

                                   ?column?                                    | count 
-------------------------------------------------------------------------------+-------
 Number of rows different between original and decompressed forward (expect 0) |     0
(1 row)

                                    ?column?                                    | count 
--------------------------------------------------------------------------------+-------
 Number of rows different between original and decompressed reversed (expect 0) |     0
(1 row)

                                              ?column?                                              | count 
----------------------------------------------------------------------------------------------------+-------
 Number of rows different between original, decompressed, and decompressed deserializeed (expect 0) |     0
(1 row)

                                              ?column?                                               | ?column? 
-----------------------------------------------------------------------------------------------------+----------
 Test that deserialization, decompression, recompression, and serialization results in the same text | t
(1 row)

DROP TABLE base_texts;
CREATE TABLE base_texts AS SELECT row_number() OVER() as rn, NULLIF(NULLIF(NULLIF(NULLIF(i, 2), 4), 5), 8)::TEXT item FROM generate_series(1, 10) i;
\ir include/compression_test.sql
-- This file and its contents are licensed under the Timescale License.
-- Please see the included NOTICE for copyright information and
-- LICENSE-TIMESCALE for a copy of the license.
\set ECHO errors
 algorithm | has_nulls | compressed size 
-----------+-----------+-----------------
 ARRAY     | t         |              74
(1 row)

                                   ?column?                                    | count 
-------------------------------------------------------------------------------+-------
 Number of rows different between original and decompressed forward (expect 0) |     0
(1 row)

                                    ?column?                                    | count 
--------------------------------------------------------------------------------+-------
 Number of rows different between original and decompressed reversed (expect 0) |     0
(1 row)

                                              ?column?                                              | count 
----------------------------------------------------------------------------------------------------+-------
 Number of rows different between original, decompressed, and decompressed deserializeed (expect 0) |     0
(1 row)

                                              ?column?                                               | ?column? 
-----------------------------------------------------------------------------------------------------+----------
 Test that deserialization, decompression, recompression, and serialization results in the same text | t
(1 row)

DROP TABLE base_texts;
----------------------
-- Bool Compression --
----------------------
SELECT
  $$
  select item from base_bools order by rn
  $$ AS "QUERY"
\gset
\set TABLE_NAME base_bools
\set TYPE boolean
\set COMPRESSION_CMD _timescaledb_internal.compress_bool(item)
\set DECOMPRESS_FORWARD_CMD _timescaledb_internal.decompress_forward(c::_timescaledb_internal.compressed_data, NULL::boolean)
\set DECOMPRESS_REVERSE_CMD _timescaledb_internal.decompress_reverse(c::_timescaledb_internal.compressed_data, NULL::boolean)
-- bool test, flipping values betweem true and false, no nulls
CREATE TABLE base_bools AS SELECT row_number() OVER() as rn, (item%2=0)::boolean as item FROM (SELECT generate_series(1, 1000) item) sub;
\ir include/compression_test.sql
-- This file and its contents are licensed under the Timescale License.
-- Please see the included NOTICE for copyright information and
-- LICENSE-TIMESCALE for a copy of the license.
\set ECHO errors
 algorithm | has_nulls | compressed size 
-----------+-----------+-----------------
 BOOL      | f         |             152
(1 row)

                                   ?column?                                    | count 
-------------------------------------------------------------------------------+-------
 Number of rows different between original and decompressed forward (expect 0) |     0
(1 row)

                                    ?column?                                    | count 
--------------------------------------------------------------------------------+-------
 Number of rows different between original and decompressed reversed (expect 0) |     0
(1 row)

                                              ?column?                                              | count 
----------------------------------------------------------------------------------------------------+-------
 Number of rows different between original, decompressed, and decompressed deserializeed (expect 0) |     0
(1 row)

                                              ?column?                                               | ?column? 
-----------------------------------------------------------------------------------------------------+----------
 Test that deserialization, decompression, recompression, and serialization results in the same text | t
(1 row)

DROP TABLE base_bools;
-- bool test, all true values, no nulls
CREATE TABLE base_bools AS SELECT row_number() OVER() as rn, true as item FROM (SELECT generate_series(1, 1000) item) sub;
\ir include/compression_test.sql
-- This file and its contents are licensed under the Timescale License.
-- Please see the included NOTICE for copyright information and
-- LICENSE-TIMESCALE for a copy of the license.
\set ECHO errors
 algorithm | has_nulls | compressed size 
-----------+-----------+-----------------
 BOOL      | f         |              29
(1 row)

                                   ?column?                                    | count 
-------------------------------------------------------------------------------+-------
 Number of rows different between original and decompressed forward (expect 0) |     0
(1 row)

                                    ?column?                                    | count 
--------------------------------------------------------------------------------+-------
 Number of rows different between original and decompressed reversed (expect 0) |     0
(1 row)

                                              ?column?                                              | count 
----------------------------------------------------------------------------------------------------+-------
 Number of rows different between original, decompressed, and decompressed deserializeed (expect 0) |     0
(1 row)

                                              ?column?                                               | ?column? 
-----------------------------------------------------------------------------------------------------+----------
 Test that deserialization, decompression, recompression, and serialization results in the same text | t
(1 row)

DROP TABLE base_bools;
-- bool test, all false, no nulls
CREATE TABLE base_bools AS SELECT row_number() OVER() as rn, false as item FROM (SELECT generate_series(1, 1000) item) sub;
\ir include/compression_test.sql
-- This file and its contents are licensed under the Timescale License.
-- Please see the included NOTICE for copyright information and
-- LICENSE-TIMESCALE for a copy of the license.
\set ECHO errors
 algorithm | has_nulls | compressed size 
-----------+-----------+-----------------
 BOOL      | f         |              29
(1 row)

                                   ?column?                                    | count 
-------------------------------------------------------------------------------+-------
 Number of rows different between original and decompressed forward (expect 0) |     0
(1 row)

                                    ?column?                                    | count 
--------------------------------------------------------------------------------+-------
 Number of rows different between original and decompressed reversed (expect 0) |     0
(1 row)

                                              ?column?                                              | count 
----------------------------------------------------------------------------------------------------+-------
 Number of rows different between original, decompressed, and decompressed deserializeed (expect 0) |     0
(1 row)

                                              ?column?                                               | ?column? 
-----------------------------------------------------------------------------------------------------+----------
 Test that deserialization, decompression, recompression, and serialization results in the same text | t
(1 row)

DROP TABLE base_bools;
-- a single true element
CREATE TABLE base_bools AS SELECT row_number() OVER() as rn, true as item FROM (SELECT generate_series(1, 1) item) sub;
\ir include/compression_test.sql
-- This file and its contents are licensed under the Timescale License.
-- Please see the included NOTICE for copyright information and
-- LICENSE-TIMESCALE for a copy of the license.
\set ECHO errors
 algorithm | has_nulls | compressed size 
-----------+-----------+-----------------
 BOOL      | f         |              29
(1 row)

                                   ?column?                                    | count 
-------------------------------------------------------------------------------+-------
 Number of rows different between original and decompressed forward (expect 0) |     0
(1 row)

                                    ?column?                                    | count 
--------------------------------------------------------------------------------+-------
 Number of rows different between original and decompressed reversed (expect 0) |     0
(1 row)

                                              ?column?                                              | count 
----------------------------------------------------------------------------------------------------+-------
 Number of rows different between original, decompressed, and decompressed deserializeed (expect 0) |     0
(1 row)

                                              ?column?                                               | ?column? 
-----------------------------------------------------------------------------------------------------+----------
 Test that deserialization, decompression, recompression, and serialization results in the same text | t
(1 row)

DROP TABLE base_bools;
-- all true, except every 43rd value is null
CREATE TABLE base_bools AS SELECT row_number() OVER() as rn, ((NULLIF(i, (CASE WHEN i%43=0 THEN i ELSE -1 END)))>0)::boolean item FROM generate_series(1, 1000) i;
\ir include/compression_test.sql
-- This file and its contents are licensed under the Timescale License.
-- Please see the included NOTICE for copyright information and
-- LICENSE-TIMESCALE for a copy of the license.
\set ECHO errors
 algorithm | has_nulls | compressed size 
-----------+-----------+-----------------
 BOOL      | t         |             176
(1 row)

                                   ?column?                                    | count 
-------------------------------------------------------------------------------+-------
 Number of rows different between original and decompressed forward (expect 0) |     0
(1 row)

                                    ?column?                                    | count 
--------------------------------------------------------------------------------+-------
 Number of rows different between original and decompressed reversed (expect 0) |     0
(1 row)

                                              ?column?                                              | count 
----------------------------------------------------------------------------------------------------+-------
 Number of rows different between original, decompressed, and decompressed deserializeed (expect 0) |     0
(1 row)

                                              ?column?                                               | ?column? 
-----------------------------------------------------------------------------------------------------+----------
 Test that deserialization, decompression, recompression, and serialization results in the same text | t
(1 row)

DROP TABLE base_bools;
-- all false, except every 29th value is null
CREATE TABLE base_bools AS SELECT row_number() OVER() as rn, ((NULLIF(i, (CASE WHEN i%29=0 THEN i ELSE -1 END)))<0)::boolean item FROM generate_series(1, 1000) i;
\ir include/compression_test.sql
-- This file and its contents are licensed under the Timescale License.
-- Please see the included NOTICE for copyright information and
-- LICENSE-TIMESCALE for a copy of the license.
\set ECHO errors
 algorithm | has_nulls | compressed size 
-----------+-----------+-----------------
 BOOL      | t         |             176
(1 row)

                                   ?column?                                    | count 
-------------------------------------------------------------------------------+-------
 Number of rows different between original and decompressed forward (expect 0) |     0
(1 row)

                                    ?column?                                    | count 
--------------------------------------------------------------------------------+-------
 Number of rows different between original and decompressed reversed (expect 0) |     0
(1 row)

                                              ?column?                                              | count 
----------------------------------------------------------------------------------------------------+-------
 Number of rows different between original, decompressed, and decompressed deserializeed (expect 0) |     0
(1 row)

                                              ?column?                                               | ?column? 
-----------------------------------------------------------------------------------------------------+----------
 Test that deserialization, decompression, recompression, and serialization results in the same text | t
(1 row)

DROP TABLE base_bools;
----------------------
-- UUID Compression --
----------------------
CREATE TABLE uuid_set (i int, u uuid);
INSERT INTO uuid_set (i, u) VALUES
(1, '0197a7a9-b48b-7c70-be05-e376afc66ee1'), (2, '0197a7a9-b48b-7c71-92cb-eb724822bb0f'), (3, '0197a7a9-b48b-7c72-bd57-49f981f064fd'), (4, '0197a7a9-b48b-7c73-b521-91172c2e770a'),
(5, '0197a7a9-b48b-7c74-a2a4-dcdbce635d11'), (6, '0197a7a9-b48b-7c75-a810-8acf630e634f'), (7, '0197a7a9-b48b-7c76-b616-69e64a802b5c'), (8, '0197a7a9-b48b-7c77-b54f-c5f3d64d68d0'),
(9, '0197a7a9-b48b-7c78-ab14-78b3dd81dbbc'), (10, '0197a7a9-b48b-7c79-92c7-7dde3bea6252'), (11, '0197a7a9-b48b-7c7a-8d9e-5afc3bf15234'), (12, '0197a7a9-b48b-7c7b-bc49-7150f16d8d63'),
(13, '0197a7a9-b48b-7c7c-aa7a-60d47bf04ff8'), (14, '0197a7a9-b48b-7c7d-8cfe-9503ed9bb1c9'), (15, '0197a7a9-b48b-7c7e-9ebb-acf63f5b625e'), (16, '0197a7a9-b48b-7c7f-a0c1-ba4adf950a2a'),
(17, '0197a7a9-b48b-7c80-a534-4eda33d89b41'), (18, '0197a7a9-b48b-7c81-abaf-e4d27888f6ea'), (19, '0197a7a9-b48b-7c82-a07c-bb5278039b67'), (20, '0197a7a9-b48b-7c83-9df3-2826632fcb42'),
(21, '0197a7a9-b48b-7c84-8588-dc4e6f10a5be'), (22, '0197a7a9-b48b-7c85-98a4-5ba69598ba88'), (23, '0197a7a9-b48b-7c86-9a96-69906846edf4'), (24, '0197a7a9-b48b-7c87-843a-d0c409e538d2'),
(25, '0197a7a9-b48b-7c88-a9c9-8e03283979dd'), (26, '0197a7a9-b48c-7c88-b962-5f38a5f5bb19'), (27, '0197a7a9-b48c-7c89-ad12-19c425cfe319'), (28, '0197a7a9-b48c-7c8a-9652-43b070f806b6'),
(29, '0197a7a9-b48c-7c8b-8b95-2e4b27b7c359'), (30, '0197a7a9-b48c-7c8c-9230-5a1b6a126d4e'), (31, '0197a7a9-b48c-7c8d-98e9-3622fe1418ae'), (32, '0197a7a9-b48c-7c8e-b262-e91dcf84f985'),
(33, '0197a7a9-b48c-7c8f-90c0-1036d19e438e'), (34, '0197a7a9-b48c-7c90-9fcb-f092518ae1e6'), (35, '0197a7a9-b48c-7c91-bf68-433e366f751d'), (36, '0197a7a9-b48c-7c92-95b6-82cb29498e5a'),
(37, '0197a7a9-b48c-7c93-9397-6ebbb9d4194d'), (38, '0197a7a9-b48c-7c94-8484-f47122e2dea3'), (39, '0197a7a9-b48c-7c95-a6e5-fe8d062f4e3c'), (40, '0197a7a9-b48c-7c96-914c-690b7930262f'),
(41, '0197a7a9-b48c-7c97-ac2b-473d61e0c396'), (42, '0197a7a9-b48c-7c98-93bd-ca093b30f6e8'), (43, '0197a7a9-b48c-7c99-b906-7fa2180536d3'), (44, '0197a7a9-b48c-7c9a-a090-fe01428ccefc'),
(45, '0197a7a9-b48c-7c9b-9319-de9dd58deeee'), (46, '0197a7a9-b48c-7c9c-a9d4-ed6f3e6a41b7'), (47, '0197a7a9-b48c-7c9d-8036-4141e0780323'), (48, '0197a7a9-b48c-7c9e-bfbe-f00eb49ed7f2'),
(49, '0197a7a9-b48c-7c9f-8ffe-71cf00a0c0c0'), (50, '0197a7a9-b48c-7ca0-822f-95ced2f95702'), (51, '0197a7a9-b48c-7ca1-8c8a-66582aec95fa'), (52, '0197a7a9-b48c-7ca2-95c3-fe80362a2251'),
(53, '0197a7a9-b48c-7ca3-855f-f681b254a8c8'), (54, '0197a7a9-b48c-7ca4-856b-a562eca93c3f'), (55, '0197a7a9-b48c-7ca5-a30e-37c247fb4c46'), (56, '0197a7a9-b48c-7ca6-9e78-a148d54a44ac'),
(57, '0197a7a9-b48c-7ca7-badb-4b650bf5bf5f'), (58, '0197a7a9-b48c-7ca8-8275-a8590869ef13'), (59, '0197a7a9-b48c-7ca9-b328-b54c3901223c'), (60, '0197a7a9-b48c-7caa-a15d-f5564e4e552c'),
(61, '0197a7a9-b48c-7cab-a4ac-017259746322'), (62, '0197a7a9-b48c-7cac-bda5-74ef12abd6b8'), (63, '0197a7a9-b48c-7cad-a3cd-0e4c93eaba80'), (64, '0197a7a9-b48c-7cae-9667-de4a226418df'),
(65, '0197a7a9-b48c-7caf-8aa2-067619170f32'), (66, '0197a7a9-b48c-7cb0-ba8c-91d9e8920845'), (67, '0197a7a9-b48c-7cb1-9681-a62bfffe9237'), (68, '0197a7a9-b48c-7cb2-b78b-037e5ee26ff6'),
(69, '0197a7a9-b48c-7cb3-ac27-e24382445188'), (70, '0197a7a9-b48b-7c7d-8cfe-9503ed9bb1c9'), (71, '0197a7a9-b48b-7c7e-9ebb-acf63f5b625e'), (72, '0197a7a9-b48b-7c7f-a0c1-ba4adf950a2a'),
(73, '0197a7a9-b48b-7c80-a534-4eda33d89b41'), (74, '0197a7a9-b48b-7c81-abaf-e4d27888f6ea'), (75, '0197a7a9-b48b-7c82-a07c-bb5278039b67'), (76, '0197a7a9-b48b-7c83-9df3-2826632fcb42'),
(77, '0197a7a9-b48b-7c84-8588-dc4e6f10a5be'), (78, '0197a7a9-b48b-7c85-98a4-5ba69598ba88'), (79, '0197a7a9-b48b-7c86-9a96-69906846edf4'), (80, '0197a7a9-b48b-7c87-843a-d0c409e538d2'),
(81, '0197a7a9-b48b-7c88-a9c9-8e03283979dd'), (82, '0197a7a9-b48c-7c88-b962-5f38a5f5bb19'), (83, '0197a7a9-b48c-7c89-ad12-19c425cfe319'), (84, '0197a7a9-b48c-7c8a-9652-43b070f806b6'),
(85, '0197a7a9-b48c-7c8b-8b95-2e4b27b7c359'), (86, '0197a7a9-b48c-7c8c-9230-5a1b6a126d4e'), (87, '0197a7a9-b48c-7c8d-98e9-3622fe1418ae'), (88, '0197a7a9-b48c-7c8e-b262-e91dcf84f985'),
(89, '0197a7a9-b48c-7c8f-90c0-1036d19e438e'), (90, '0197a7a9-b48c-7c90-9fcb-f092518ae1e6'), (91, '0197a7a9-b48c-7c91-bf68-433e366f751d'), (92, '0197a7a9-b48c-7c92-95b6-82cb29498e5a'),
(93, '0197a7a9-b48c-7c93-9397-6ebbb9d4194d'), (94, '0197a7a9-b48c-7c94-8484-f47122e2dea3'), (95, '0197a7a9-b48c-7c95-a6e5-fe8d062f4e3c'), (96, '0197a7a9-b48c-7c96-914c-690b7930262f'),
(97, '0197a7a9-b48c-7c97-ac2b-473d61e0c396'), (98, '0197a7a9-b48c-7c98-93bd-ca093b30f6e8'), (99, '0197a7a9-b48c-7c99-b906-7fa2180536d3'), (100, '0197a7a9-b48c-7c9a-a090-fe01428ccefc');
SELECT
  $$
  select item from base_uuids order by rn
  $$ AS "QUERY"
\gset
\set TABLE_NAME base_uuids
\set TYPE uuid
\set COMPRESSION_CMD _timescaledb_internal.compress_uuid(item)
\set DECOMPRESS_FORWARD_CMD _timescaledb_internal.decompress_forward(c::_timescaledb_internal.compressed_data, NULL::uuid)
\set DECOMPRESS_REVERSE_CMD _timescaledb_internal.decompress_reverse(c::_timescaledb_internal.compressed_data, NULL::uuid)
SET timescaledb.enable_uuid_compression = on;
-- basic test, flipping values between UUID v4s, UUID v7s and NULLs
CREATE TABLE base_uuids AS SELECT row_number() OVER() as rn, NULL::uuid as item FROM (SELECT generate_series(1, 1000) item) sub;
UPDATE base_uuids SET item = gen_random_uuid() WHERE rn % 4 = 0;
UPDATE base_uuids SET item = (SELECT u FROM uuid_set WHERE i = rn % 100) WHERE rn % 4 = 1;
UPDATE base_uuids SET item = (SELECT u FROM uuid_set WHERE i = rn % 97) WHERE rn % 4 = 2;
\ir include/compression_test.sql
-- This file and its contents are licensed under the Timescale License.
-- Please see the included NOTICE for copyright information and
-- LICENSE-TIMESCALE for a copy of the license.
\set ECHO errors
 algorithm  | has_nulls | compressed size 
------------+-----------+-----------------
 DICTIONARY | t         |            6124
(1 row)

                                   ?column?                                    | count 
-------------------------------------------------------------------------------+-------
 Number of rows different between original and decompressed forward (expect 0) |     0
(1 row)

                                    ?column?                                    | count 
--------------------------------------------------------------------------------+-------
 Number of rows different between original and decompressed reversed (expect 0) |     0
(1 row)

                                              ?column?                                              | count 
----------------------------------------------------------------------------------------------------+-------
 Number of rows different between original, decompressed, and decompressed deserializeed (expect 0) |     0
(1 row)

                                              ?column?                                               | ?column? 
-----------------------------------------------------------------------------------------------------+----------
 Test that deserialization, decompression, recompression, and serialization results in the same text | t
(1 row)

DROP TABLE base_uuids;
-- all NULLs and a single UUID v7
CREATE TABLE base_uuids AS SELECT row_number() OVER() as rn, NULL::uuid as item FROM (SELECT generate_series(1, 1000) item) sub;
UPDATE base_uuids SET item = '0197a7a9-b48b-7c74-a2a4-dcdbce635d11' WHERE rn = 1;
\ir include/compression_test.sql
-- This file and its contents are licensed under the Timescale License.
-- Please see the included NOTICE for copyright information and
-- LICENSE-TIMESCALE for a copy of the license.
\set ECHO errors
 algorithm | has_nulls | compressed size 
-----------+-----------+-----------------
 ARRAY     | t         |              85
(1 row)

                                   ?column?                                    | count 
-------------------------------------------------------------------------------+-------
 Number of rows different between original and decompressed forward (expect 0) |     0
(1 row)

                                    ?column?                                    | count 
--------------------------------------------------------------------------------+-------
 Number of rows different between original and decompressed reversed (expect 0) |     0
(1 row)

                                              ?column?                                              | count 
----------------------------------------------------------------------------------------------------+-------
 Number of rows different between original, decompressed, and decompressed deserializeed (expect 0) |     0
(1 row)

                                              ?column?                                               | ?column? 
-----------------------------------------------------------------------------------------------------+----------
 Test that deserialization, decompression, recompression, and serialization results in the same text | t
(1 row)

DROP TABLE base_uuids;
-- no NULLs
CREATE TABLE base_uuids AS SELECT row_number() OVER() as rn, NULL::uuid as item FROM (SELECT generate_series(1, 1000) item) sub;
UPDATE base_uuids SET item = (SELECT u FROM uuid_set WHERE i = rn % 100);
\ir include/compression_test.sql
-- This file and its contents are licensed under the Timescale License.
-- Please see the included NOTICE for copyright information and
-- LICENSE-TIMESCALE for a copy of the license.
\set ECHO errors
 algorithm  | has_nulls | compressed size 
------------+-----------+-----------------
 DICTIONARY | t         |            2092
(1 row)

                                   ?column?                                    | count 
-------------------------------------------------------------------------------+-------
 Number of rows different between original and decompressed forward (expect 0) |     0
(1 row)

                                    ?column?                                    | count 
--------------------------------------------------------------------------------+-------
 Number of rows different between original and decompressed reversed (expect 0) |     0
(1 row)

                                              ?column?                                              | count 
----------------------------------------------------------------------------------------------------+-------
 Number of rows different between original, decompressed, and decompressed deserializeed (expect 0) |     0
(1 row)

                                              ?column?                                               | ?column? 
-----------------------------------------------------------------------------------------------------+----------
 Test that deserialization, decompression, recompression, and serialization results in the same text | t
(1 row)

DROP TABLE base_uuids;
-- flipping values between two UUID v7s and NULLs
CREATE TABLE base_uuids AS SELECT row_number() OVER() as rn, NULL::uuid as item FROM (SELECT generate_series(1, 1000) item) sub;
UPDATE base_uuids SET item = '0197a7a9-b48b-7c74-a2a4-dcdbce635d11' WHERE rn % 3 = 0;
UPDATE base_uuids SET item = '0197a7a9-b48b-7c74-a2a4-dcdbce635d12' WHERE rn % 3 = 1;
\ir include/compression_test.sql
-- This file and its contents are licensed under the Timescale License.
-- Please see the included NOTICE for copyright information and
-- LICENSE-TIMESCALE for a copy of the license.
\set ECHO errors
 algorithm  | has_nulls | compressed size 
------------+-----------+-----------------
 DICTIONARY | t         |             320
(1 row)

                                   ?column?                                    | count 
-------------------------------------------------------------------------------+-------
 Number of rows different between original and decompressed forward (expect 0) |     0
(1 row)

                                    ?column?                                    | count 
--------------------------------------------------------------------------------+-------
 Number of rows different between original and decompressed reversed (expect 0) |     0
(1 row)

                                              ?column?                                              | count 
----------------------------------------------------------------------------------------------------+-------
 Number of rows different between original, decompressed, and decompressed deserializeed (expect 0) |     0
(1 row)

                                              ?column?                                               | ?column? 
-----------------------------------------------------------------------------------------------------+----------
 Test that deserialization, decompression, recompression, and serialization results in the same text | t
(1 row)

DROP TABLE base_uuids;
-- test with a set of UUID v7s
CREATE TABLE base_uuids AS SELECT row_number() OVER() as rn, u as item FROM uuid_set ORDER BY i;
\ir include/compression_test.sql
-- This file and its contents are licensed under the Timescale License.
-- Please see the included NOTICE for copyright information and
-- LICENSE-TIMESCALE for a copy of the license.
\set ECHO errors
 algorithm | has_nulls | compressed size 
-----------+-----------+-----------------
 UUID      | f         |             944
(1 row)

                                   ?column?                                    | count 
-------------------------------------------------------------------------------+-------
 Number of rows different between original and decompressed forward (expect 0) |     0
(1 row)

                                    ?column?                                    | count 
--------------------------------------------------------------------------------+-------
 Number of rows different between original and decompressed reversed (expect 0) |     0
(1 row)

                                              ?column?                                              | count 
----------------------------------------------------------------------------------------------------+-------
 Number of rows different between original, decompressed, and decompressed deserializeed (expect 0) |     0
(1 row)

                                              ?column?                                               | ?column? 
-----------------------------------------------------------------------------------------------------+----------
 Test that deserialization, decompression, recompression, and serialization results in the same text | t
(1 row)

DROP TABLE base_uuids;
RESET timescaledb.enable_uuid_compression;
DROP table uuid_set;
-----------------------------------------------
-- Interesting corrupt data found by fuzzing --
-----------------------------------------------
\c :TEST_DBNAME :ROLE_SUPERUSER
create or replace function ts_read_compressed_data_file(cstring, regtype, cstring, bool = true) returns int
as :TSL_MODULE_PATHNAME, 'ts_read_compressed_data_file' language c;
\set ON_ERROR_STOP 0
select ts_read_compressed_data_file('gorilla', 'float8', '--nonexistent');
ERROR:  could not open the file '--nonexistent'
-- Just some random file that returns "compressed data is corrupt", for one-off testing.
select ts_read_compressed_data_file('gorilla', 'float8', (:'TEST_INPUT_DIR' || '/fuzzing/compression/gorilla-float8/1f09f12d930daae8e5fd34e11e7b2303e1705b2e')::cstring);
ERROR:  the compressed data is corrupt
\set ON_ERROR_STOP 1
create or replace function ts_read_compressed_data_directory(cstring, regtype, cstring, bool)
returns table(path text, bytes int, rows int, sqlstate text, location text)
as :TSL_MODULE_PATHNAME, 'ts_read_compressed_data_directory' language c;
\set fn 'ts_read_compressed_data_directory(:''algo'', :''type'', format(''%s/fuzzing/compression/%s-%s'', :''TEST_INPUT_DIR'', :''algo'', :''type'')::cstring, '
\set algo gorilla
\set type float8
select count(*)
    , coalesce((bulk.rows >= 0)::text, bulk.sqlstate) bulk_result
    , coalesce((rowbyrow.rows >= 0)::text, rowbyrow.sqlstate) rowbyrow_result
from :fn true) bulk join :fn false) rowbyrow using (path)
group by 2, 3 order by 1 desc
;
 count | bulk_result | rowbyrow_result 
-------+-------------+-----------------
   143 | XX001       | true
    82 | XX001       | XX001
    54 | true        | true
    23 | 08P01       | 08P01
(4 rows)

\set algo deltadelta
\set type int8
select count(*)
    , coalesce((bulk.rows >= 0)::text, bulk.sqlstate) bulk_result
    , coalesce((rowbyrow.rows >= 0)::text, rowbyrow.sqlstate) rowbyrow_result
from :fn true) bulk join :fn false) rowbyrow using (path)
group by 2, 3 order by 1 desc
;
 count | bulk_result | rowbyrow_result 
-------+-------------+-----------------
   106 | XX001       | XX001
    69 | true        | true
    62 | XX001       | true
    13 | 08P01       | 08P01
     1 | false       | false
(5 rows)

\set algo array
\set type text
select count(*)
    , coalesce((bulk.rows >= 0)::text, bulk.sqlstate) bulk_result
    , coalesce((rowbyrow.rows >= 0)::text, rowbyrow.sqlstate) rowbyrow_result
from :fn true) bulk join :fn false) rowbyrow using (path)
group by 2, 3 order by 1 desc
;
 count | bulk_result | rowbyrow_result 
-------+-------------+-----------------
    18 | true        | true
    14 | XX001       | XX001
     8 | 08P01       | 08P01
     2 | 3F000       | 3F000
     2 | false       | false
     1 | 22021       | 22021
(6 rows)

\set algo dictionary
\set type text
select count(*)
    , coalesce((bulk.rows >= 0)::text, bulk.sqlstate) bulk_result
    , coalesce((rowbyrow.rows >= 0)::text, rowbyrow.sqlstate) rowbyrow_result
from :fn true) bulk join :fn false) rowbyrow using (path)
group by 2, 3 order by 1 desc
;
 count | bulk_result | rowbyrow_result 
-------+-------------+-----------------
    76 | XX001       | XX001
     9 | XX001       | true
     5 | 08P01       | 08P01
     4 | true        | true
     3 | 22021       | 22021
     1 | 3F000       | 3F000
     1 | false       | false
(7 rows)

\set algo bool
\set type bool
select count(*)
    , coalesce((bulk.rows >= 0)::text, bulk.sqlstate) bulk_result
    , coalesce((rowbyrow.rows >= 0)::text, rowbyrow.sqlstate) rowbyrow_result
from :fn true) bulk join :fn false) rowbyrow using (path)
group by 2, 3 order by 1 desc
;
 count | bulk_result | rowbyrow_result 
-------+-------------+-----------------
    18 | XX001       | XX001
     3 | true        | true
     2 | 08P01       | 08P01
(3 rows)

\set algo uuid
\set type uuid
select count(*)
    , coalesce((bulk.rows >= 0)::text, bulk.sqlstate) bulk_result
    , coalesce((rowbyrow.rows >= 0)::text, rowbyrow.sqlstate) rowbyrow_result
from :fn true) bulk join :fn false) rowbyrow using (path)
group by 2, 3 order by 1 desc
;
 count | bulk_result | rowbyrow_result 
-------+-------------+-----------------
     1 | true        | true
(1 row)

