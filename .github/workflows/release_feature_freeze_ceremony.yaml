name: Release - Feature Freeze Ceremony

#
# Feature Freeze
# 
# prereq: needs approval from another person to run the action (environment)
#
# 1. creates the release branch X.Y.x, if and if the branch does not exist yet
# 2. generates CHANGELOG and opens PR for it
# 3. generates the release artefacts for the next versions
# 4. bumps the version in version.config to minor + 1 if and only if a .0 release is done
#

on:
  workflow_dispatch:

# The workflow needs the permission to push branches
permissions:
  contents: write
  pull-requests: write

jobs:
  release-feature-freeze-ceremony:
    name: Release - Feature Freeze & CHANGELOG
    runs-on: ubuntu-latest
    environment:
      name: Release Ceremonies

    steps:
      - name: Checkout TimescaleDB
        uses: actions/checkout@v4

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install pip
          pip install PyGithub requests

      # Read the next version and build the next versions
      - name: Set version configuration
        run: |
          NEXT_VERSION=$(head -1 version.config | cut -d ' ' -f 3 | cut -d '-' -f 1)
          CURRENT_VERSION=$(tail -1 version.config | cut -d ' ' -f 3 | cut -d '-' -f 1)
          RELEASE_BRANCH="${NEXT_VERSION/%.0/.x}"

          echo "RELEASE_BRANCH=${RELEASE_BRANCH}" >> $GITHUB_ENV
          echo "CURRENT_VERSION=${CURRENT_VERSION}" >> $GITHUB_ENV
          echo "NEXT_VERSION=${NEXT_VERSION}" >> $GITHUB_ENV

          echo "Release branch: $RELEASE_BRANCH"

      - name: Check if release branch exists
        id: check_branch
        run: |
          if git ls-remote --heads origin ${{ env.RELEASE_BRANCH }} | grep -q ${{ env.RELEASE_BRANCH }}; then
            echo "Branch ${{ env.RELEASE_BRANCH }} exists!"
            echo "branch_exists=true" >> $GITHUB_OUTPUT
          else
            echo "branch_exists=false" >> $GITHUB_OUTPUT
          fi

      # -------------------------------------------------------
      #
      # Only running for new minor releases
      #
      # -------------------------------------------------------
      
      # Bump minor in main for minor releases
      - name: Bump minor version on main if next release is a new minor
        if: endsWith(env.NEXT_VERSION, '.0')
        id: bump_minor_version_on_main
        run: |
          NEXT_MAIN_VERSION=$(head -1 version.config | cut -d ' ' -f 3 | cut -d '-' -f 1)
          NEXT_MAIN_VERSION=$(echo "$NEXT_MAIN_VERSION" | awk -F. '{printf "%d.%d.0-dev", $1, $2 + 1}')
          sed -i "s/^version = .*/version = $NEXT_MAIN_VERSION/" version.config
          echo "NEXT_MAIN_VERSION=${NEXT_MAIN_VERSION}" >> $GITHUB_ENV

      # Submit PR for new version changes on main
      - name: Create Pull Request for next version on main
        if: steps.bump_minor_version_on_main.conclusion == 'success'
        id: cpr_next_version_main
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.ORG_AUTOMATION_TOKEN }}
          branch: "release/${{ env.NEXT_VERSION }}-${{ env.NEXT_MAIN_VERSION }}"
          base: "main"
          delete-branch: true
          title: "Bump version to ${{ env.NEXT_MAIN_VERSION }}"
          labels: |
            release
          add-paths: |
            version.config
      
      # Create `2.XX.x` release branch of `main`
      # Release branch is a dependency for the next steps
      # only execute this step on .0 releases
      - name: Create Release Branch
        if: steps.check_branch.outputs.branch_exists == 'false'
        uses: peterjgrainger/action-create-branch@v3.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.ORG_AUTOMATION_TOKEN }}
        with:
          branch: '${{ env.RELEASE_BRANCH }}'

      # -------------------------------------------------------
      #
      # Runs for every release
      #
      # -------------------------------------------------------

      - name: Generate the CHANGELOG
        run: |
          ./scripts/changelog/generate.sh 
          head -n 19 CHANGELOG.md | tail -n 10

      # Generate the CHANGELOG and submit it in a separate PR
      - name: Create Pull Request for CHANGELOG
        id: cpr_changelog
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.ORG_AUTOMATION_TOKEN }}
          branch: "release/${{ env.NEXT_VERSION }}--changelog"
          base: ${{ env.RELEASE_BRANCH }}
          delete-branch: true
          reviewers: |
            @philkra
            @brandonpurcell-dev
            @atovpeko
          title: "Release ${{ env.NEXT_VERSION }}"
          labels: |
            release
            changelog
          add-paths: |
            .unreleased/*
            CHANGELOG.md

      - name: "Validate CHANGELOG PR"
        if: ${{ steps.cpr_changelog.outputs.pull-request-number }}
        run: |
          echo "Pull Request: ${{ steps.cpr_changelog.outputs.pull-request-url }}"

      # Rework version.config and up & down grade scripts
      - name: Curate minor release artefacts
        run: |
          ./scripts/release/build_release_artefacts.sh ${{ env.CURRENT_VERSION }} ${{ env.NEXT_VERSION }}

      # Submit PR for new version changes 
      - name: Create Pull Request for next version changes on release branch
        id: cpr_next_version_changes
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.ORG_AUTOMATION_TOKEN }}
          branch: "release/${{ env.NEXT_VERSION }}--next"
          base: ${{ env.RELEASE_BRANCH }}
          delete-branch: true
          title: "Bump version to ${{ env.NEXT_VERSION }}"
          labels: |
            release
          add-paths: |
            version.config
            sql/updates/*.sql
            sql/CMakeLists.txt

      - name: "Validate next version PR"
        if: ${{ steps.cpr_next_version_changes.outputs.pull-request-number }}
        run: |
          echo "Pull Request: ${{ steps.cpr_next_version_changes.outputs.pull-request-url }}"
