name: Coverity
"on":
  schedule:
    # run at 22:00 on every saturday
    - cron: '0 22 * * SAT'
  push:
    branches:
      - coverity_scan
  workflow_dispatch:

jobs:

  set-old-minor-version-branch:
    runs-on: ubuntu-latest

    steps:

      - name: Checkout TimescaleDB
        uses: actions/checkout@v4

      - name: Set env var CURRENT_MAIN_VERSION
        run: echo "CURRENT_MAIN_VERSION=$(head -1 version.config | cut -d ' ' -f 3 | cut -d '-' -f 1)" >> $GITHUB_ENV
      - name: Test env var CURRENT_MAIN_VERSION
        run: echo $CURRENT_MAIN_VERSION

      - name: Set env var CURRENT_MINOR_VERSION
        run: echo "CURRENT_MINOR_VERSION=$(echo ${{ env.CURRENT_MAIN_VERSION }} | cut -d '.' -f 2)" >> $GITHUB_ENV
      - name: Test env var CURRENT_MINOR_VERSION
        run: echo $CURRENT_MINOR_VERSION

      - name: Set env var OLD_MINOR_VERSION
        run: echo "OLD_MINOR_VERSION=$((${{ env.CURRENT_MINOR_VERSION }} - 1))" >> $GITHUB_ENV
      - name: Test env var OLD_MINOR_VERSION
        run: echo $OLD_MINOR_VERSION

      - name: Set env var OLD_MINOR_VERSION_FULL
        run: echo "OLD_MINOR_VERSION_FULL=$(echo ${{ env.CURRENT_MAIN_VERSION }} | sed -e "s/${{ env.CURRENT_MINOR_VERSION }}/${{ env.OLD_MINOR_VERSION }}/g")" >> $GITHUB_ENV
      - name: Test env var OLD_MINOR_VERSION_FULL
        run: echo $OLD_MINOR_VERSION_FULL

      - name: Set env var OLD_MINOR_VERSION_BRANCH
        run: echo "OLD_MINOR_VERSION_BRANCH="${${{ env.OLD_MINOR_VERSION_FULL }}/%.0/.x}"" >> $GITHUB_ENV
      - name: Test env var OLD_MINOR_VERSION_BRANCH
        run: echo $OLD_MINOR_VERSION_BRANCH

  coverity:
    name: Coverity ${{ matrix.pg }} ${{ matrix.timescaledb_branch }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        # run only on the 3 latest PG versions as we have rate limit on coverity
        pg: [15, 16, 17]
        os: [ubuntu-20.04]
        timescaledb_branch: [main, ${{ env.OLD_MINOR_VERSION_BRANCH }}]
    steps:
    - name: Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install gnupg systemd-coredump gdb postgresql-common libkrb5-dev
        yes | sudo /usr/share/postgresql-common/pgdg/apt.postgresql.org.sh
        sudo apt-get update
        sudo apt-get install postgresql-${{ matrix.pg }} postgresql-server-dev-${{ matrix.pg }}

    - name: Checkout TimescaleDB
      uses: actions/checkout@v4
      with:
        ref: ${{ matrix.timescaledb_branch }}

    - name: Coverity tools
      run: |
        wget https://scan.coverity.com/download/linux64 \
          --post-data "token=${{ secrets.COVERITY_TOKEN }}&project=timescale%2Ftimescaledb" \
          -O coverity_tool.tgz -q
        tar xf coverity_tool.tgz
        mv cov-analysis-linux64-* coverity

    - name: Build TimescaleDB
      run: |
        PATH="$GITHUB_WORKSPACE/coverity/bin:/usr/lib/postgresql/${{ matrix.pg }}/bin:$PATH"
        ./bootstrap -DCMAKE_BUILD_TYPE=Release
        cov-build --dir cov-int make -C build

    - name: Upload report
      env:
        FORM_EMAIL: --form email=ci@timescale.com
        FORM_FILE: --form file=@timescaledb.tgz
        FORM_DESC: --form description="CI"
        FORM_TOKEN: --form token="${{ secrets.COVERITY_TOKEN }}"
        COVERITY_URL: https://scan.coverity.com/builds?project=timescale%2Ftimescaledb
      run: |
        tar czf timescaledb.tgz cov-int
        curl $FORM_TOKEN $FORM_EMAIL $FORM_DESC $FORM_FILE \
          --form version="$(grep '^version' version.config | cut -b11-)-${{ matrix.pg }}" $COVERITY_URL
