# Test running make installcheck on our ubuntu and debian packages for the latest version.
name: "Packaging tests: Installcheck for APT"
"on":
  schedule:
    # run daily 0:00 on main branch
    - cron: '0 0 * * *'
  pull_request:
    paths: .github/workflows/apt-installcheck.yaml
  push:
    tags:
    - '*'
    branches:
    - release_test
    - trigger/package_test
  workflow_dispatch:
jobs:
  apt_tests:
    name: APT ${{ matrix.image }} PG${{ matrix.pg }} ${{ matrix.license }}
    container:
      image: ${{ matrix.image }}
      env:
        DEBIAN_FRONTEND: noninteractive
    strategy:
      fail-fast: false
      matrix:
        runner:
          - ubuntu-latest
          - timescaledb-runner-arm64
        image:
#          - debian:11-slim
#          - debian:12-slim
#          - debian:13-slim
          - ubuntu:22.04
#          - ubuntu:24.04
        pg:
#          - 15
#          - 16
          - 17
        license:
          - "TSL"
#          - "Apache"
        include:
#          - license: Apache
#            pkg_suffix: "-oss"
          - image: ubuntu:22.04
            image_friendly: ubuntu-22.04
    runs-on: ${{ matrix.runner }}

    steps:
    - name: Add repositories
      run: |
        apt-get update
        apt-get install -y wget lsb-release gnupg apt-transport-https sudo postgresql-common
        yes | /usr/share/postgresql-common/pgdg/apt.postgresql.org.sh
        image_type=$(lsb_release -i -s | tr '[:upper:]' '[:lower:]')
        echo "deb https://packagecloud.io/timescale/timescaledb/${image_type}/ $(lsb_release -c -s) main" \
          > /etc/apt/sources.list.d/timescaledb.list
        if [ "${image_type}" = "ubuntu" ]; then
          wget --quiet -O - https://packagecloud.io/timescale/timescaledb/gpgkey | apt-key add -
        else
          wget --quiet -O - https://packagecloud.io/timescale/timescaledb/gpgkey | gpg --dearmor -o /etc/apt/trusted.gpg.d/timescale_timescaledb.gpg
        fi

    - name: Install timescaledb
      run: |
        apt-get update
        apt-get install -y --no-install-recommends \
          timescaledb-2${{ matrix.pkg_suffix }}-postgresql-${{ matrix.pg }} timescaledb-tools
        timescaledb-tune --quiet --yes

    - uses: actions/checkout@v4

    - name: Read versions
      id: versions
      run: |
        # read expected version from version.config
        # version will only be a proper version in a release branch so we use previous_version
        # as fallback for main
        if grep '^version = [0-9.]\+$' version.config; then
          version=$(grep '^version = ' version.config | sed -e 's!^version = !!')
        else
          version=$(grep '^previous_version = ' version.config | sed -e 's!^previous_version = !!')
        fi
        echo "version=${version}" >>$GITHUB_OUTPUT

    - name: Checkout the sources for version ${{ steps.versions.outputs.version }}
      uses: actions/checkout@v4
      with:
        ref: ${{ steps.versions.outputs.version }}

    - name: Run make installcheck
      id: installcheck
      if: matrix.image == 'ubuntu:22.04' && matrix.license == 'TSL' && matrix.pg == 17
      shell: bash
      run: |
        apt install -y cmake postgresql-server-dev-${{ matrix.pg }}
        cmake -B build -S . -DCMAKE_BUILD_TYPE=RelWithDebInfo \
          -DTEST_PG_LOG_DIRECTORY="$(readlink -f .)"
        chown -R postgres:postgres .
        set -o pipefail
        sudo -u postgres make -k -C build installcheck | tee installcheck.log

    - name: Collect the logs
      if: always() && steps.installcheck.conclusion != 'skipped'
      run: |
        find . -name regression.diffs -exec cat {} + > regression.log
        find . -name initdb.log -exec cat {} + > initdb.log

    - name: Show regression diffs
      if: always() && steps.installcheck.conclusion != 'skipped'
      run: |
        grep -e 'FAILED' -e 'failed (ignored)' -e 'not ok' installcheck.log || true
        cat regression.log

    - name: Save the logs
      if: always() && steps.installcheck.conclusion != 'skipped'
      uses: actions/upload-artifact@v4
      with:
        name: Installcheck logs ${{ matrix.image_friendly }} ${{ matrix.license }} ${{ matrix.pg }}
        path: |
            postmaster.*
            initdb.log
            regression.log
            installcheck.log

